\doxysection{catch\+\_\+amalgamated.\+cpp File Reference}
\hypertarget{catch__amalgamated_8cpp}{}\label{catch__amalgamated_8cpp}\index{catch\_amalgamated.cpp@{catch\_amalgamated.cpp}}
{\ttfamily \#include "{}catch\+\_\+amalgamated.\+hpp"{}}\newline
{\ttfamily \#include $<$cmath$>$}\newline
{\ttfamily \#include $<$limits$>$}\newline
{\ttfamily \#include $<$fstream$>$}\newline
{\ttfamily \#include $<$cassert$>$}\newline
{\ttfamily \#include $<$stack$>$}\newline
{\ttfamily \#include $<$exception$>$}\newline
{\ttfamily \#include $<$iomanip$>$}\newline
{\ttfamily \#include $<$set$>$}\newline
{\ttfamily \#include $<$cctype$>$}\newline
{\ttfamily \#include $<$algorithm$>$}\newline
{\ttfamily \#include $<$string$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
{\ttfamily \#include $<$ostream$>$}\newline
{\ttfamily \#include $<$chrono$>$}\newline
{\ttfamily \#include $<$random$>$}\newline
{\ttfamily \#include $<$utility$>$}\newline
{\ttfamily \#include $<$stdexcept$>$}\newline
{\ttfamily \#include $<$cerrno$>$}\newline
{\ttfamily \#include $<$signal.\+h$>$}\newline
{\ttfamily \#include $<$cstring$>$}\newline
{\ttfamily \#include $<$cstdlib$>$}\newline
{\ttfamily \#include $<$cstdio$>$}\newline
{\ttfamily \#include $<$iosfwd$>$}\newline
{\ttfamily \#include $<$sstream$>$}\newline
{\ttfamily \#include $<$ctime$>$}\newline
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$iterator$>$}\newline
{\ttfamily \#include $<$cstdint$>$}\newline
{\ttfamily \#include $<$type\+\_\+traits$>$}\newline
{\ttfamily \#include $<$regex$>$}\newline
{\ttfamily \#include $<$cfloat$>$}\newline
{\ttfamily \#include $<$map$>$}\newline
Include dependency graph for catch\+\_\+amalgamated.\+cpp\+:
% FIG 0
\doxysubsubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structCatch_1_1Generators_1_1RandomFloatingGenerator_1_1PImpl}{Catch\+::\+Generators\+::\+Random\+Floating\+Generator\+::\+PImpl}}
\item 
struct \mbox{\hyperlink{structCatch_1_1SignalDefs}{Catch\+::\+Signal\+Defs}}
\item 
struct \mbox{\hyperlink{structCatch_1_1ReporterRegistry_1_1ReporterRegistryImpl}{Catch\+::\+Reporter\+Registry\+::\+Reporter\+Registry\+Impl}}
\item 
struct \mbox{\hyperlink{structCatch_1_1StringStreams}{Catch\+::\+String\+Streams}}
\end{DoxyCompactItemize}
\doxysubsubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\Hypertarget{catch__amalgamated_8cpp_a49ffcf43841dcedc78c808b8e62e4f12}\label{catch__amalgamated_8cpp_a49ffcf43841dcedc78c808b8e62e4f12} 
\#define {\bfseries Digits}(x)~( x \& 0x\+FF\textquotesingle{}FF\textquotesingle{}FF\textquotesingle{}FF )            std\+::uint64\+\_\+t lhs\+\_\+low = Digits( lhs );            std\+::uint64\+\_\+t rhs\+\_\+low = Digits( rhs );            std\+::uint64\+\_\+t low\+\_\+low = ( lhs\+\_\+low \texorpdfstring{$\ast$}{*} rhs\+\_\+low );            std\+::uint64\+\_\+t high\+\_\+high = Carry\+Bits( lhs ) \texorpdfstring{$\ast$}{*} Carry\+Bits( rhs );                        std\+::uint64\+\_\+t high\+\_\+low =                ( Carry\+Bits( lhs ) \texorpdfstring{$\ast$}{*} rhs\+\_\+low ) + Carry\+Bits( low\+\_\+low );                                    std\+::uint64\+\_\+t low\+\_\+high =                ( lhs\+\_\+low \texorpdfstring{$\ast$}{*} Carry\+Bits( rhs ) ) + Digits( high\+\_\+low );            return \{ high\+\_\+high + Carry\+Bits( high\+\_\+low ) + Carry\+Bits( low\+\_\+high ),                     ( low\+\_\+high $<$$<$ 32 ) \texorpdfstring{$\vert$}{|} Digits( low\+\_\+low ) \};\#undef Carry\+Bits\#undef Digits        \}                inline Extended\+Mult\+Result$<$std\+::uint64\+\_\+t$>$        extended\+Mult( std\+::uint64\+\_\+t lhs, std\+::uint64\+\_\+t rhs ) \{\#if defined( CATCH\+\_\+\+CONFIG\+\_\+\+UINT128 )            auto result = \+\_\+\+\_\+uint128\+\_\+t( lhs ) \texorpdfstring{$\ast$}{*} \+\_\+\+\_\+uint128\+\_\+t( rhs );            return \{ static\+\_\+cast$<$std\+::uint64\+\_\+t$>$( result $>$$>$ 64 ),                     static\+\_\+cast$<$std\+::uint64\+\_\+t$>$( result ) \};\#elif defined( CATCH\+\_\+\+CONFIG\+\_\+\+MSVC\+\_\+\+UMUL128 )            std\+::uint64\+\_\+t high;            std\+::uint64\+\_\+t low = \+\_\+umul128( lhs, rhs, \&high );            return \{ high, low \};\#else            return extended\+Mult\+Portable( lhs, rhs );\#endif        \}        template $<$typename UInt$>$        constexpr Extended\+Mult\+Result$<$UInt$>$ extended\+Mult( UInt lhs, UInt rhs ) \{            static\+\_\+assert( std\+::is\+\_\+unsigned$<$UInt$>$\+::value,                           "{}extended\+Mult can only handle unsigned integers"{} );            static\+\_\+assert( sizeof( UInt ) $<$ sizeof( std\+::uint64\+\_\+t ),                           "{}Generic extended\+Mult can only handle types smaller "{}                           "{}than uint64\+\_\+t"{} );            using Wide\+Type = Double\+Width\+Unsigned\+Type\+\_\+t$<$UInt$>$;            auto result = Wide\+Type( lhs ) \texorpdfstring{$\ast$}{*} Wide\+Type( rhs );            return \{                static\+\_\+cast$<$UInt$>$( result $>$$>$ ( CHAR\+\_\+\+BIT \texorpdfstring{$\ast$}{*} sizeof( UInt ) ) ),                static\+\_\+cast$<$UInt$>$( result \& UInt( -\/1 ) ) \};        \}        template $<$typename Target\+Type,                  typename Generator$>$            std\+::enable\+\_\+if\+\_\+t$<$sizeof(typename Generator\+::result\+\_\+type) $>$= sizeof(Target\+Type),            Target\+Type$>$ fill\+Bits\+From(Generator\& gen) \{            using gresult\+\_\+type = typename Generator\+::result\+\_\+type;            static\+\_\+assert( std\+::is\+\_\+unsigned$<$Target\+Type$>$\+::value, "{}Only unsigned integers are supported"{} );            static\+\_\+assert( Generator\+::min() == 0 \&\&                           Generator\+::max() == static\+\_\+cast$<$gresult\+\_\+type$>$( -\/1 ),                           "{}Generator must be able to output all numbers in its result type (effectively it must be a random bit generator)"{} );                                    constexpr auto generated\+\_\+bits = sizeof( gresult\+\_\+type ) \texorpdfstring{$\ast$}{*} CHAR\+\_\+\+BIT;            constexpr auto return\+\_\+bits = sizeof( Target\+Type ) \texorpdfstring{$\ast$}{*} CHAR\+\_\+\+BIT;            return static\+\_\+cast$<$Target\+Type$>$( gen() $>$$>$                                            ( generated\+\_\+bits -\/ return\+\_\+bits) );        \}        template $<$typename Target\+Type,                  typename Generator$>$            std\+::enable\+\_\+if\+\_\+t$<$sizeof(typename Generator\+::result\+\_\+type) $<$ sizeof(Target\+Type),            Target\+Type$>$ fill\+Bits\+From(Generator\& gen) \{            using gresult\+\_\+type = typename Generator\+::result\+\_\+type;            static\+\_\+assert( std\+::is\+\_\+unsigned$<$Target\+Type$>$\+::value,                           "{}Only unsigned integers are supported"{} );            static\+\_\+assert( Generator\+::min() == 0 \&\&                           Generator\+::max() == static\+\_\+cast$<$gresult\+\_\+type$>$( -\/1 ),                           "{}Generator must be able to output all numbers in its result type (effectively it must be a random bit generator)"{} );            constexpr auto generated\+\_\+bits = sizeof( gresult\+\_\+type ) \texorpdfstring{$\ast$}{*} CHAR\+\_\+\+BIT;            constexpr auto return\+\_\+bits = sizeof( Target\+Type ) \texorpdfstring{$\ast$}{*} CHAR\+\_\+\+BIT;            std\+::size\+\_\+t filled\+\_\+bits = 0;            Target\+Type ret = 0;            do \{                ret $<$$<$= generated\+\_\+bits;                ret \texorpdfstring{$\vert$}{|}= gen();                filled\+\_\+bits += generated\+\_\+bits;            \} while ( filled\+\_\+bits $<$ return\+\_\+bits );            return ret;        \}                template $<$typename Original\+Type, typename Unsigned\+Type$>$        constexpr        std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+signed$<$Original\+Type$>$\+::value, Unsigned\+Type$>$        transpose\+To\+Natural\+Order( Unsigned\+Type in ) \{            static\+\_\+assert(                sizeof( Original\+Type ) == sizeof( Unsigned\+Type ),                "{}reordering requires the same sized types on both sides"{} );            static\+\_\+assert( std\+::is\+\_\+unsigned$<$Unsigned\+Type$>$\+::value,                           "{}Input type must be unsigned"{} );                                                            constexpr auto highest\+\_\+bit =                Unsigned\+Type( 1 ) $<$$<$ ( sizeof( Unsigned\+Type ) \texorpdfstring{$\ast$}{*} CHAR\+\_\+\+BIT -\/ 1 );            return static\+\_\+cast$<$Unsigned\+Type$>$( in \texorpdfstring{$^\wedge$}{\string^} highest\+\_\+bit );        \}        template $<$typename Original\+Type,                  typename Unsigned\+Type$>$        constexpr        std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+unsigned$<$Original\+Type$>$\+::value, Unsigned\+Type$>$            transpose\+To\+Natural\+Order(Unsigned\+Type in) \{            static\+\_\+assert(                sizeof( Original\+Type ) == sizeof( Unsigned\+Type ),                "{}reordering requires the same sized types on both sides"{} );            static\+\_\+assert( std\+::is\+\_\+unsigned$<$Unsigned\+Type$>$\+::value, "{}Input type must be unsigned"{} );                        return in;        \}    \} \} \#endif namespace Catch \{template $<$typename Integer\+Type$>$class uniform\+\_\+integer\+\_\+distribution \{    static\+\_\+assert(std\+::is\+\_\+integral$<$Integer\+Type$>$\+::value, "{}..."{});    using Unsigned\+Integer\+Type = Detail\+::\+Sized\+Unsigned\+Type\+\_\+t$<$sizeof(Integer\+Type)$>$;                        Unsigned\+Integer\+Type m\+\_\+a;        Unsigned\+Integer\+Type m\+\_\+ab\+\_\+distance;                            Unsigned\+Integer\+Type m\+\_\+rejection\+\_\+threshold = 0;    static constexpr Unsigned\+Integer\+Type compute\+Distance(Integer\+Type a, Integer\+Type b) \{                        return transpose\+To(b) -\/ transpose\+To(a) + 1;    \}    static constexpr Unsigned\+Integer\+Type compute\+Rejection\+Threshold(Unsigned\+Integer\+Type ab\+\_\+distance) \{                        if ( ab\+\_\+distance == 0 ) \{ return 0; \}        return ( \texorpdfstring{$\sim$}{\string~}ab\+\_\+distance + 1 ) \% ab\+\_\+distance;    \}    static constexpr Unsigned\+Integer\+Type transpose\+To(Integer\+Type in) \{        return Detail\+::transpose\+To\+Natural\+Order$<$Integer\+Type$>$(            static\+\_\+cast$<$Unsigned\+Integer\+Type$>$( in ) );    \}    static constexpr Integer\+Type transpose\+Back(Unsigned\+Integer\+Type in) \{        return static\+\_\+cast$<$Integer\+Type$>$(            Detail\+::transpose\+To\+Natural\+Order$<$Integer\+Type$>$(in) );    \}public\+:    using result\+\_\+type = Integer\+Type;    constexpr uniform\+\_\+integer\+\_\+distribution( Integer\+Type a, Integer\+Type b )\+:        m\+\_\+a( transpose\+To(a) ),        m\+\_\+ab\+\_\+distance( compute\+Distance(a, b) ),        m\+\_\+rejection\+\_\+threshold( compute\+Rejection\+Threshold(m\+\_\+ab\+\_\+distance) ) \{        assert( a $<$= b );    \}    template $<$typename Generator$>$    constexpr result\+\_\+type operator()( Generator\& g ) \{                if ( m\+\_\+ab\+\_\+distance == 0 ) \{            return transpose\+Back( Detail\+::fill\+Bits\+From$<$Unsigned\+Integer\+Type$>$( g ) );        \}        auto random\+\_\+number = Detail\+::fill\+Bits\+From$<$Unsigned\+Integer\+Type$>$( g );        auto emul = Detail\+::extended\+Mult( random\+\_\+number, m\+\_\+ab\+\_\+distance );                        while (emul.\+lower $<$ m\+\_\+rejection\+\_\+threshold) \{            random\+\_\+number = Detail\+::fill\+Bits\+From$<$Unsigned\+Integer\+Type$>$( g );            emul = Detail\+::extended\+Mult( random\+\_\+number, m\+\_\+ab\+\_\+distance );        \}        return transpose\+Back(m\+\_\+a + emul.\+upper);    \}    constexpr result\+\_\+type a() const \{ return transpose\+Back(m\+\_\+a); \}    constexpr result\+\_\+type b() const \{ return transpose\+Back(m\+\_\+ab\+\_\+distance + m\+\_\+a -\/ 1); \}\};\} \#endif \#ifndef CATCH\+\_\+\+UNIFORM\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+DISTRIBUTION\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+UNIFORM\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+DISTRIBUTION\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+RANDOM\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+RANDOM\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+POLYFILLS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+POLYFILLS\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    bool isnan(float f);    bool isnan(double d);    float nextafter(float x, float y);    double nextafter(double x, double y);\}\#endif \#include $<$cassert$>$\#include $<$cmath$>$\#include $<$cstdint$>$\#include $<$limits$>$\#include $<$type\+\_\+traits$>$namespace Catch \{    namespace Detail \{                template $<$typename Float\+Type$>$        Float\+Type gamma(Float\+Type a, Float\+Type b) \{            static\+\_\+assert( std\+::is\+\_\+floating\+\_\+point$<$Float\+Type$>$\+::value,                           "{}gamma returns the largest ULP magnitude within "{}                           "{}floating point range \mbox{[}a, b\mbox{]}. This only makes sense "{}                           "{}for floating point types"{} );            assert( a $<$= b );            const auto gamma\+\_\+up = Catch\+::nextafter( a, std\+::numeric\+\_\+limits$<$Float\+Type$>$\+::infinity() ) -\/ a;            const auto gamma\+\_\+down = b -\/ Catch\+::nextafter( b, -\/std\+::numeric\+\_\+limits$<$Float\+Type$>$\+::infinity() );            return gamma\+\_\+up $<$ gamma\+\_\+down ? gamma\+\_\+down \+: gamma\+\_\+up;        \}        template $<$typename Floating\+Point$>$        struct Distance\+Type\+Picker;        template $<$$>$        struct Distance\+Type\+Picker$<$float$>$ \{            using type = std\+::uint32\+\_\+t;        \};        template $<$$>$        struct Distance\+Type\+Picker$<$double$>$ \{            using type = std\+::uint64\+\_\+t;        \};        template $<$typename T$>$        using Distance\+Type = typename Distance\+Type\+Picker$<$T$>$\+::type;\#if defined( \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+ ) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ )\#    pragma GCC diagnostic push\#    pragma GCC diagnostic ignored "{}-\/Wfloat-\/equal"{}\#endif                template $<$typename Float\+Type$>$        Distance\+Type$<$Float\+Type$>$        count\+\_\+equidistant\+\_\+floats( Float\+Type a, Float\+Type b, Float\+Type distance ) \{            assert( a $<$= b );                                    const auto ag = a / distance;            const auto bg = b / distance;            const auto s = bg -\/ ag;            const auto err = ( std\+::fabs( a ) $<$= std\+::fabs( b ) )                                 ? -\/ag -\/ ( s -\/ bg )                                 \+: bg -\/ ( s + ag );            const auto ceil\+\_\+s = static\+\_\+cast$<$Distance\+Type$<$Float\+Type$>$$>$( std\+::ceil( s ) );            return ( ceil\+\_\+s != s ) ? ceil\+\_\+s \+: ceil\+\_\+s + ( err $>$ 0 );        \}\#if defined( \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+ ) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ )\#    pragma GCC diagnostic pop\#endif    \}\} \#endif \#include $<$cmath$>$\#include $<$type\+\_\+traits$>$namespace Catch \{    namespace Detail \{\#if defined( \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+ ) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ )\#    pragma GCC diagnostic push\#    pragma GCC diagnostic ignored "{}-\/Wfloat-\/equal"{}\#endif                                        constexpr std\+::uint64\+\_\+t calculate\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go(double gamma) \{            if ( gamma == 1.\+99584030953472e+292 ) \{ return 9007199254740991; \}            return static\+\_\+cast$<$std\+::uint64\+\_\+t$>$( -\/1 );        \}        constexpr std\+::uint32\+\_\+t calculate\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go(float gamma) \{            if ( gamma == 2.\+028241e+31f ) \{ return 16777215; \}            return static\+\_\+cast$<$std\+::uint32\+\_\+t$>$( -\/1 );        \}\#if defined( \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+ ) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ )\#    pragma GCC diagnostic pop\#endif    \}template $<$typename Float\+Type$>$class uniform\+\_\+floating\+\_\+point\+\_\+distribution \{    static\+\_\+assert(std\+::is\+\_\+floating\+\_\+point$<$Float\+Type$>$\+::value, "{}..."{});    static\+\_\+assert(!std\+::is\+\_\+same$<$Float\+Type, long double$>$\+::value,                  "{}We do not support long double due to inconsistent behaviour between platforms"{});    using Width\+Type = Detail\+::\+Distance\+Type$<$Float\+Type$>$;    Float\+Type m\+\_\+a, m\+\_\+b;    Float\+Type m\+\_\+ulp\+\_\+magnitude;    Width\+Type m\+\_\+floats\+\_\+in\+\_\+range;    uniform\+\_\+integer\+\_\+distribution$<$Width\+Type$>$ m\+\_\+int\+\_\+dist;                Width\+Type m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go;        bool m\+\_\+a\+\_\+has\+\_\+leq\+\_\+magnitude;public\+:    using result\+\_\+type = Float\+Type;    uniform\+\_\+floating\+\_\+point\+\_\+distribution( Float\+Type a, Float\+Type b )\+:        m\+\_\+a( a ),        m\+\_\+b( b ),        m\+\_\+ulp\+\_\+magnitude( Detail\+::gamma( m\+\_\+a, m\+\_\+b ) ),        m\+\_\+floats\+\_\+in\+\_\+range( Detail\+::count\+\_\+equidistant\+\_\+floats( m\+\_\+a, m\+\_\+b, m\+\_\+ulp\+\_\+magnitude ) ),        m\+\_\+int\+\_\+dist(0, m\+\_\+floats\+\_\+in\+\_\+range),        m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go( Detail\+::calculate\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go(m\+\_\+ulp\+\_\+magnitude)),        m\+\_\+a\+\_\+has\+\_\+leq\+\_\+magnitude(std\+::fabs(m\+\_\+a) $<$= std\+::fabs(m\+\_\+b))    \{        assert( a $<$= b );    \}    template $<$typename Generator$>$    result\+\_\+type operator()( Generator\& g ) \{        Width\+Type steps = m\+\_\+int\+\_\+dist( g );        if ( m\+\_\+a\+\_\+has\+\_\+leq\+\_\+magnitude ) \{            if ( steps == m\+\_\+floats\+\_\+in\+\_\+range ) \{ return m\+\_\+a; \}            auto b = m\+\_\+b;            while (steps $>$ m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go) \{                b -\/= m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go \texorpdfstring{$\ast$}{*} m\+\_\+ulp\+\_\+magnitude;                steps -\/= m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go;            \}            return b -\/ steps \texorpdfstring{$\ast$}{*} m\+\_\+ulp\+\_\+magnitude;        \} else \{            if ( steps == m\+\_\+floats\+\_\+in\+\_\+range ) \{ return m\+\_\+b; \}            auto a = m\+\_\+a;            while (steps $>$ m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go) \{                a += m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go \texorpdfstring{$\ast$}{*} m\+\_\+ulp\+\_\+magnitude;                steps -\/= m\+\_\+max\+\_\+steps\+\_\+in\+\_\+one\+\_\+go;            \}            return a + steps \texorpdfstring{$\ast$}{*} m\+\_\+ulp\+\_\+magnitude;        \}    \}    result\+\_\+type a() const \{ return m\+\_\+a; \}    result\+\_\+type b() const \{ return m\+\_\+b; \}\};\} \#endif namespace Catch \{namespace Generators \{namespace Detail \{                std\+::uint32\+\_\+t get\+Seed();\}template $<$typename Float$>$class Random\+Floating\+Generator final \+: public IGenerator$<$Float$>$ \{    \mbox{\hyperlink{classCatch_1_1SimplePcg32}{Catch\+::\+Simple\+Pcg32}} m\+\_\+rng;    Catch\+::uniform\+\_\+floating\+\_\+point\+\_\+distribution$<$Float$>$ m\+\_\+dist;    Float m\+\_\+current\+\_\+number;public\+:    Random\+Floating\+Generator( Float a, Float b, std\+::uint32\+\_\+t seed )\+:        m\+\_\+rng(seed),        m\+\_\+dist(a, b) \{        static\+\_\+cast$<$void$>$(next());    \}    Float const\& get() const override \{        return m\+\_\+current\+\_\+number;    \}    bool next() override \{        m\+\_\+current\+\_\+number = m\+\_\+dist(m\+\_\+rng);        return true;    \}\};template $<$$>$class Random\+Floating\+Generator$<$long double$>$ final \+: public IGenerator$<$long double$>$ \{            struct PImpl;    \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Catch\+::\+Detail\+::unique\+\_\+ptr}}$<$PImpl$>$ m\+\_\+pimpl;    long double m\+\_\+current\+\_\+number;public\+:    Random\+Floating\+Generator( long double a, long double b, std\+::uint32\+\_\+t seed );    long double const\& get() const override \{ return m\+\_\+current\+\_\+number; \}    bool next() override;    \texorpdfstring{$\sim$}{\string~}Random\+Floating\+Generator() override; \};template $<$typename Integer$>$class Random\+Integer\+Generator final \+: public IGenerator$<$Integer$>$ \{    \mbox{\hyperlink{classCatch_1_1SimplePcg32}{Catch\+::\+Simple\+Pcg32}} m\+\_\+rng;    Catch\+::uniform\+\_\+integer\+\_\+distribution$<$Integer$>$ m\+\_\+dist;    Integer m\+\_\+current\+\_\+number;public\+:    Random\+Integer\+Generator( Integer a, Integer b, std\+::uint32\+\_\+t seed )\+:        m\+\_\+rng(seed),        m\+\_\+dist(a, b) \{        static\+\_\+cast$<$void$>$(next());    \}    Integer const\& get() const override \{        return m\+\_\+current\+\_\+number;    \}    bool next() override \{        m\+\_\+current\+\_\+number = m\+\_\+dist(m\+\_\+rng);        return true;    \}\};template $<$typename T$>$std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+integral$<$T$>$\+::value, Generator\+Wrapper$<$T$>$$>$random(T a, T b) \{    return Generator\+Wrapper$<$T$>$(        Catch\+::\+Detail\+::make\+\_\+unique$<$Random\+Integer\+Generator$<$T$>$$>$(a, b, Detail\+::get\+Seed())    );\}template $<$typename T$>$std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+floating\+\_\+point$<$T$>$\+::value,Generator\+Wrapper$<$T$>$$>$random(T a, T b) \{    return Generator\+Wrapper$<$T$>$(        Catch\+::\+Detail\+::make\+\_\+unique$<$Random\+Floating\+Generator$<$T$>$$>$(a, b, Detail\+::get\+Seed())    );\}\} \} \#endif \#ifndef CATCH\+\_\+\+GENERATORS\+\_\+\+RANGE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+GENERATORS\+\_\+\+RANGE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iterator$>$\#include $<$type\+\_\+traits$>$namespace Catch \{namespace Generators \{template $<$typename T$>$class Range\+Generator final \+: public IGenerator$<$T$>$ \{    T m\+\_\+current;    T m\+\_\+end;    T m\+\_\+step;    bool m\+\_\+positive;public\+:    Range\+Generator(T const\& start, T const\& end, T const\& step)\+:        m\+\_\+current(start),        m\+\_\+end(end),        m\+\_\+step(step),        m\+\_\+positive(m\+\_\+step $>$ T(0))    \{        assert(m\+\_\+current != m\+\_\+end \&\& "{}Range start and end cannot be equal"{});        assert(m\+\_\+step != T(0) \&\& "{}Step size cannot be zero"{});        assert(((m\+\_\+positive \&\& m\+\_\+current $<$= m\+\_\+end) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (!m\+\_\+positive \&\& m\+\_\+current $>$= m\+\_\+end)) \&\& "{}Step moves away from end"{});    \}    Range\+Generator(T const\& start, T const\& end)\+:        Range\+Generator(start, end, (start $<$ end) ? T(1) \+: T(-\/1))    \{\}    T const\& get() const override \{        return m\+\_\+current;    \}    bool next() override \{        m\+\_\+current += m\+\_\+step;        return (m\+\_\+positive) ? (m\+\_\+current $<$ m\+\_\+end) \+: (m\+\_\+current $>$ m\+\_\+end);    \}\};template $<$typename T$>$Generator\+Wrapper$<$T$>$ range(T const\& start, T const\& end, T const\& step) \{    static\+\_\+assert(std\+::is\+\_\+arithmetic$<$T$>$\+::value \&\& !std\+::is\+\_\+same$<$T, bool$>$\+::value, "{}Type must be numeric"{});    return Generator\+Wrapper$<$T$>$(Catch\+::\+Detail\+::make\+\_\+unique$<$Range\+Generator$<$T$>$$>$(start, end, step));\}template $<$typename T$>$Generator\+Wrapper$<$T$>$ range(T const\& start, T const\& end) \{    static\+\_\+assert(std\+::is\+\_\+integral$<$T$>$\+::value \&\& !std\+::is\+\_\+same$<$T, bool$>$\+::value, "{}Type must be an integer"{});    return Generator\+Wrapper$<$T$>$(Catch\+::\+Detail\+::make\+\_\+unique$<$Range\+Generator$<$T$>$$>$(start, end));\}template $<$typename T$>$class Iterator\+Generator final \+: public IGenerator$<$T$>$ \{    static\+\_\+assert(!std\+::is\+\_\+same$<$T, bool$>$\+::value,        "{}Iterator\+Generator currently does not support bools"{}        "{}because of std\+::vector$<$bool$>$ specialization"{});    std\+::vector$<$T$>$ m\+\_\+elems;    size\+\_\+t m\+\_\+current = 0;public\+:    template $<$typename Input\+Iterator, typename Input\+Sentinel$>$    Iterator\+Generator(Input\+Iterator first, Input\+Sentinel last)\+:m\+\_\+elems(first, last) \{        if (m\+\_\+elems.\+empty()) \{            Detail\+::throw\+\_\+generator\+\_\+exception("{}Iterator\+Generator received no valid values"{});        \}    \}    T const\& get() const override \{        return m\+\_\+elems\mbox{[}m\+\_\+current\mbox{]};    \}    bool next() override \{        ++m\+\_\+current;        return m\+\_\+current != m\+\_\+elems.\+size();    \}\};template $<$typename Input\+Iterator,          typename Input\+Sentinel,          typename Result\+Type = std\+::remove\+\_\+const\+\_\+t$<$typename std\+::iterator\+\_\+traits$<$Input\+Iterator$>$\+::value\+\_\+type$>$$>$Generator\+Wrapper$<$Result\+Type$>$ from\+\_\+range(Input\+Iterator from, Input\+Sentinel to) \{    return Generator\+Wrapper$<$Result\+Type$>$(Catch\+::\+Detail\+::make\+\_\+unique$<$Iterator\+Generator$<$Result\+Type$>$$>$(from, to));\}template $<$typename Container$>$auto from\+\_\+range(Container const\& cnt) \{    using std\+::begin;    using std\+::end;    return from\+\_\+range( begin( cnt ), end( cnt ) );\}\} \} \#endif \#endif \#ifndef CATCH\+\_\+\+INTERFACES\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+INTERFACES\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+INTERFACES\+\_\+\+REPORTER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+INTERFACES\+\_\+\+REPORTER\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$map$>$\#include $<$string$>$\#include $<$vector$>$namespace Catch \{    struct Reporter\+Description;    struct Listener\+Description;    struct Tag\+Info;    struct Test\+Case\+Info;    class Test\+Case\+Handle;    class IConfig;    class IStream;    enum class Colour\+Mode \+: std\+::uint8\+\_\+t;    struct Reporter\+Config \{        Reporter\+Config( IConfig const\texorpdfstring{$\ast$}{*} \+\_\+full\+Config,                        Detail\+::unique\+\_\+ptr$<$IStream$>$ \+\_\+stream,                        Colour\+Mode colour\+Mode,                        std\+::map$<$std\+::string, std\+::string$>$ custom\+Options );        Reporter\+Config( Reporter\+Config\&\& ) = default;        Reporter\+Config\& operator=( Reporter\+Config\&\& ) = default;        \texorpdfstring{$\sim$}{\string~}Reporter\+Config();         Detail\+::unique\+\_\+ptr$<$IStream$>$ take\+Stream() \&\&;        IConfig const\texorpdfstring{$\ast$}{*} full\+Config() const;        Colour\+Mode colour\+Mode() const;        std\+::map$<$std\+::string, std\+::string$>$ const\& custom\+Options() const;    private\+:        Detail\+::unique\+\_\+ptr$<$IStream$>$ m\+\_\+stream;        IConfig const\texorpdfstring{$\ast$}{*} m\+\_\+full\+Config;        Colour\+Mode m\+\_\+colour\+Mode;        std\+::map$<$std\+::string, std\+::string$>$ m\+\_\+custom\+Options;    \};    struct Assertion\+Stats \{        Assertion\+Stats( Assertion\+Result const\& \+\_\+assertion\+Result,                        std\+::vector$<$Message\+Info$>$ const\& \+\_\+info\+Messages,                        Totals const\& \+\_\+totals );        Assertion\+Stats( Assertion\+Stats const\& )              = default;        Assertion\+Stats( Assertion\+Stats \&\& )                  = default;        Assertion\+Stats\& operator = ( Assertion\+Stats const\& ) = delete;        Assertion\+Stats\& operator = ( Assertion\+Stats \&\& )     = delete;        Assertion\+Result assertion\+Result;        std\+::vector$<$Message\+Info$>$ info\+Messages;        Totals totals;    \};    struct Section\+Stats \{        Section\+Stats(   Section\+Info\&\& \+\_\+section\+Info,                        Counts const\& \+\_\+assertions,                        double \+\_\+duration\+In\+Seconds,                        bool \+\_\+missing\+Assertions );        Section\+Info section\+Info;        Counts assertions;        double duration\+In\+Seconds;        bool missing\+Assertions;    \};    struct Test\+Case\+Stats \{        Test\+Case\+Stats(  Test\+Case\+Info const\& \+\_\+test\+Info,                        Totals const\& \+\_\+totals,                        std\+::string\&\& \+\_\+std\+Out,                        std\+::string\&\& \+\_\+std\+Err,                        bool \+\_\+aborting );        Test\+Case\+Info const \texorpdfstring{$\ast$}{*} test\+Info;        Totals totals;        std\+::string std\+Out;        std\+::string std\+Err;        bool aborting;    \};    struct Test\+Run\+Stats \{        Test\+Run\+Stats(   Test\+Run\+Info const\& \+\_\+run\+Info,                        Totals const\& \+\_\+totals,                        bool \+\_\+aborting );        Test\+Run\+Info run\+Info;        Totals totals;        bool aborting;    \};                struct Reporter\+Preferences \{                        bool should\+Redirect\+Std\+Out = false;                        bool should\+Report\+All\+Assertions = false;                                        bool should\+Report\+All\+Assertion\+Starts = true;    \};        class IEvent\+Listener \{    protected\+:                Reporter\+Preferences m\+\_\+preferences;                IConfig const\texorpdfstring{$\ast$}{*} m\+\_\+config;    public\+:        IEvent\+Listener( IConfig const\texorpdfstring{$\ast$}{*} config )\+: m\+\_\+config( config ) \{\}        virtual \texorpdfstring{$\sim$}{\string~}IEvent\+Listener();                         Reporter\+Preferences const\& get\+Preferences() const \{            return m\+\_\+preferences;        \}                virtual void no\+Matching\+Test\+Cases( String\+Ref unmatched\+Spec ) = 0;                virtual void report\+Invalid\+Test\+Spec( String\+Ref invalid\+Argument ) = 0;                virtual void test\+Run\+Starting( Test\+Run\+Info const\& test\+Run\+Info ) = 0;                virtual void test\+Case\+Starting( Test\+Case\+Info const\& test\+Info ) = 0;                virtual void test\+Case\+Partial\+Starting( Test\+Case\+Info const\& test\+Info, uint64\+\_\+t part\+Number ) = 0;                virtual void section\+Starting( Section\+Info const\& section\+Info ) = 0;                virtual void benchmark\+Preparing( String\+Ref benchmark\+Name ) = 0;                virtual void benchmark\+Starting( Benchmark\+Info const\& benchmark\+Info ) = 0;                virtual void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& benchmark\+Stats ) = 0;                virtual void benchmark\+Failed( String\+Ref benchmark\+Name ) = 0;                virtual void assertion\+Starting( Assertion\+Info const\& assertion\+Info ) = 0;                virtual void assertion\+Ended( Assertion\+Stats const\& assertion\+Stats ) = 0;                virtual void section\+Ended( Section\+Stats const\& section\+Stats ) = 0;                virtual void test\+Case\+Partial\+Ended(Test\+Case\+Stats const\& test\+Case\+Stats, uint64\+\_\+t part\+Number ) = 0;                virtual void test\+Case\+Ended( Test\+Case\+Stats const\& test\+Case\+Stats ) = 0;                virtual void test\+Run\+Ended( Test\+Run\+Stats const\& test\+Run\+Stats ) = 0;                virtual void skip\+Test( Test\+Case\+Info const\& test\+Info ) = 0;                virtual void fatal\+Error\+Encountered( String\+Ref error ) = 0;                virtual void list\+Reporters(std\+::vector$<$Reporter\+Description$>$ const\& descriptions) = 0;                virtual void list\+Listeners(std\+::vector$<$Listener\+Description$>$ const\& descriptions) = 0;                virtual void list\+Tests(std\+::vector$<$Test\+Case\+Handle$>$ const\& tests) = 0;                virtual void list\+Tags(std\+::vector$<$Tag\+Info$>$ const\& tags) = 0;    \};    using IEvent\+Listener\+Ptr = Detail\+::unique\+\_\+ptr$<$IEvent\+Listener$>$;\} \#endif \#ifndef CATCH\+\_\+\+INTERFACES\+\_\+\+REPORTER\+\_\+\+FACTORY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+INTERFACES\+\_\+\+REPORTER\+\_\+\+FACTORY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{    struct Reporter\+Config;    class IConfig;    class IEvent\+Listener;    using IEvent\+Listener\+Ptr = Detail\+::unique\+\_\+ptr$<$IEvent\+Listener$>$;    class IReporter\+Factory \{    public\+:        virtual \texorpdfstring{$\sim$}{\string~}IReporter\+Factory();         virtual IEvent\+Listener\+Ptr        create( Reporter\+Config\&\& config ) const = 0;        virtual std\+::string get\+Description() const = 0;    \};    using IReporter\+Factory\+Ptr = Detail\+::unique\+\_\+ptr$<$IReporter\+Factory$>$;    class Event\+Listener\+Factory \{    public\+:        virtual \texorpdfstring{$\sim$}{\string~}Event\+Listener\+Factory();         virtual IEvent\+Listener\+Ptr create( IConfig const\texorpdfstring{$\ast$}{*} config ) const = 0;                virtual String\+Ref get\+Name() const = 0;                virtual std\+::string get\+Description() const = 0;    \};\} \#endif \#ifndef CATCH\+\_\+\+INTERFACES\+\_\+\+TAG\+\_\+\+ALIAS\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+INTERFACES\+\_\+\+TAG\+\_\+\+ALIAS\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{    struct Tag\+Alias;    class ITag\+Alias\+Registry \{    public\+:        virtual \texorpdfstring{$\sim$}{\string~}ITag\+Alias\+Registry();                 virtual Tag\+Alias const\texorpdfstring{$\ast$}{*} find( std\+::string const\& alias ) const = 0;        virtual std\+::string expand\+Aliases( std\+::string const\& unexpanded\+Test\+Spec ) const = 0;        static ITag\+Alias\+Registry const\& get();    \};\} \#endif \#ifndef CATCH\+\_\+\+INTERFACES\+\_\+\+TESTCASE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+INTERFACES\+\_\+\+TESTCASE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$vector$>$namespace Catch \{    struct Test\+Case\+Info;    class Test\+Case\+Handle;    class IConfig;    class ITest\+Case\+Registry \{    public\+:        virtual \texorpdfstring{$\sim$}{\string~}ITest\+Case\+Registry();                 virtual std\+::vector$<$Test\+Case\+Info\texorpdfstring{$\ast$}{*} $>$ const\& get\+All\+Infos() const = 0;        virtual std\+::vector$<$Test\+Case\+Handle$>$ const\& get\+All\+Tests() const = 0;        virtual std\+::vector$<$Test\+Case\+Handle$>$ const\& get\+All\+Tests\+Sorted( IConfig const\& config ) const = 0;    \};\}\#endif \#endif \#ifndef CATCH\+\_\+\+CASE\+\_\+\+INSENSITIVE\+\_\+\+COMPARISONS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+CASE\+\_\+\+INSENSITIVE\+\_\+\+COMPARISONS\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    namespace Detail \{                struct Case\+Insensitive\+Less \{            bool operator()( String\+Ref lhs,                             String\+Ref rhs ) const;        \};                struct Case\+Insensitive\+Equal\+To \{            bool operator()( String\+Ref lhs,                             String\+Ref rhs ) const;        \};    \} \} \#endif \#ifndef CATCH\+\_\+\+CONFIG\+\_\+\+ANDROID\+\_\+\+LOGWRITE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+CONFIG\+\_\+\+ANDROID\+\_\+\+LOGWRITE\+\_\+\+HPP\+\_\+\+INCLUDED\#if defined(\+\_\+\+\_\+\+ANDROID\+\_\+\+\_\+)\#    define CATCH\+\_\+\+INTERNAL\+\_\+\+CONFIG\+\_\+\+ANDROID\+\_\+\+LOGWRITE\#endif\#if defined( CATCH\+\_\+\+INTERNAL\+\_\+\+CONFIG\+\_\+\+ANDROID\+\_\+\+LOGWRITE ) \&\& \textbackslash{}    !defined( CATCH\+\_\+\+CONFIG\+\_\+\+NO\+\_\+\+ANDROID\+\_\+\+LOGWRITE ) \&\&      \textbackslash{}    !defined( CATCH\+\_\+\+CONFIG\+\_\+\+ANDROID\+\_\+\+LOGWRITE )\#    define CATCH\+\_\+\+CONFIG\+\_\+\+ANDROID\+\_\+\+LOGWRITE\#endif\#endif \#ifndef CATCH\+\_\+\+CONFIG\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+CONFIG\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\+\_\+\+HPP\+\_\+\+INCLUDED\#if defined(\+\_\+\+MSC\+\_\+\+VER)\#  if \+\_\+\+MSC\+\_\+\+VER $>$= 1900 \#    define CATCH\+\_\+\+INTERNAL\+\_\+\+CONFIG\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\#  endif\#endif\#include $<$exception$>$\#if defined(\+\_\+\+\_\+cpp\+\_\+lib\+\_\+uncaught\+\_\+exceptions) \textbackslash{}    \&\& !defined(CATCH\+\_\+\+INTERNAL\+\_\+\+CONFIG\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS)\#  define CATCH\+\_\+\+INTERNAL\+\_\+\+CONFIG\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\#endif \#if defined(CATCH\+\_\+\+INTERNAL\+\_\+\+CONFIG\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS) \textbackslash{}    \&\& !defined(CATCH\+\_\+\+CONFIG\+\_\+\+NO\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS) \textbackslash{}    \&\& !defined(CATCH\+\_\+\+CONFIG\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS)\#  define CATCH\+\_\+\+CONFIG\+\_\+\+CPP17\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\#endif\#endif \#ifndef CATCH\+\_\+\+CONSOLE\+\_\+\+COLOUR\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+CONSOLE\+\_\+\+COLOUR\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iosfwd$>$\#include $<$cstdint$>$namespace Catch \{    enum class Colour\+Mode \+: std\+::uint8\+\_\+t;    class IStream;    struct Colour \{        enum Code \{            None = 0,            White,            Red,            Green,            Blue,            Cyan,            Yellow,            Grey,            Bright = 0x10,            Bright\+Red = Bright \texorpdfstring{$\vert$}{|} Red,            Bright\+Green = Bright \texorpdfstring{$\vert$}{|} Green,            Light\+Grey = Bright \texorpdfstring{$\vert$}{|} Grey,            Bright\+White = Bright \texorpdfstring{$\vert$}{|} White,            Bright\+Yellow = Bright \texorpdfstring{$\vert$}{|} Yellow,                        File\+Name = Light\+Grey,            Warning = Bright\+Yellow,            Result\+Error = Bright\+Red,            Result\+Success = Bright\+Green,            Result\+Expected\+Failure = Warning,            Error = Bright\+Red,            Success = Green,            Skip = Light\+Grey,            Original\+Expression = Cyan,            Reconstructed\+Expression = Bright\+Yellow,            Secondary\+Text = Light\+Grey,            Headers = White        \};    \};    class Colour\+Impl \{    protected\+:                IStream\texorpdfstring{$\ast$}{*} m\+\_\+stream;    public\+:        Colour\+Impl( IStream\texorpdfstring{$\ast$}{*} stream )\+: m\+\_\+stream( stream ) \{\}                        class Colour\+Guard \{            Colour\+Impl const\texorpdfstring{$\ast$}{*} m\+\_\+colour\+Impl;            Colour\+::\+Code m\+\_\+code;            bool m\+\_\+engaged = false;        public\+:                        Colour\+Guard( Colour\+::\+Code code,                         Colour\+Impl const\texorpdfstring{$\ast$}{*} colour );            Colour\+Guard( Colour\+Guard const\& rhs ) = delete;            Colour\+Guard\& operator=( Colour\+Guard const\& rhs ) = delete;            Colour\+Guard( Colour\+Guard\&\& rhs ) noexcept;            Colour\+Guard\& operator=( Colour\+Guard\&\& rhs ) noexcept;                        \texorpdfstring{$\sim$}{\string~}Colour\+Guard();                        Colour\+Guard\& engage( std\+::ostream\& stream ) \&;                        Colour\+Guard\&\& engage( std\+::ostream\& stream ) \&\&;        private\+:                        friend std\+::ostream\& operator$<$$<$( std\+::ostream\& lhs,                                             Colour\+Guard\& guard ) \{                guard.\+engage\+Impl( lhs );                return lhs;            \}                        friend std\+::ostream\& operator$<$$<$( std\+::ostream\& lhs,                                            Colour\+Guard\&\& guard) \{                guard.\+engage\+Impl( lhs );                return lhs;            \}            void engage\+Impl( std\+::ostream\& stream );        \};        virtual \texorpdfstring{$\sim$}{\string~}Colour\+Impl();                 Colour\+Guard guard\+Colour( Colour\+::\+Code colour\+Code );    private\+:        virtual void use( Colour\+::\+Code colour\+Code ) const = 0;    \};        Detail\+::unique\+\_\+ptr$<$Colour\+Impl$>$ make\+Colour\+Impl( Colour\+Mode colour\+Selection,                                                   IStream\texorpdfstring{$\ast$}{*} stream );        bool is\+Colour\+Impl\+Available( Colour\+Mode colour\+Selection );\} \#endif \#ifndef CATCH\+\_\+\+CONSOLE\+\_\+\+WIDTH\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+CONSOLE\+\_\+\+WIDTH\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+CONFIG\+\_\+\+CONSOLE\+\_\+\+WIDTH\#define CATCH\+\_\+\+CONFIG\+\_\+\+CONSOLE\+\_\+\+WIDTH 80\#endif\#endif \#ifndef CATCH\+\_\+\+CONTAINER\+\_\+\+NONMEMBERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+CONTAINER\+\_\+\+NONMEMBERS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cstddef$>$\#include $<$initializer\+\_\+list$>$\#if defined(CATCH\+\_\+\+CPP17\+\_\+\+OR\+\_\+\+GREATER) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined(\+\_\+\+MSC\+\_\+\+VER)\#include $<$string$>$\#  if !defined(\+\_\+\+\_\+cpp\+\_\+lib\+\_\+nonmember\+\_\+container\+\_\+access)\#      define CATCH\+\_\+\+CONFIG\+\_\+\+POLYFILL\+\_\+\+NONMEMBER\+\_\+\+CONTAINER\+\_\+\+ACCESS\#  endif\#else\#define CATCH\+\_\+\+CONFIG\+\_\+\+POLYFILL\+\_\+\+NONMEMBER\+\_\+\+CONTAINER\+\_\+\+ACCESS\#endifnamespace Catch \{namespace Detail \{\#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+POLYFILL\+\_\+\+NONMEMBER\+\_\+\+CONTAINER\+\_\+\+ACCESS)    template $<$typename Container$>$    constexpr auto empty(Container const\& cont) -\/$>$ decltype(cont.\+empty()) \{        return cont.\+empty();    \}    template $<$typename T, std\+::size\+\_\+t N$>$    constexpr bool empty(const T (\&)\mbox{[}N\mbox{]}) noexcept \{                        (void)N;        return false;    \}    template $<$typename T$>$    constexpr bool empty(std\+::initializer\+\_\+list$<$T$>$ list) noexcept \{        return list.\+size() $>$ 0;    \}    template $<$typename Container$>$    constexpr auto size(Container const\& cont) -\/$>$ decltype(cont.\+size()) \{        return cont.\+size();    \}    template $<$typename T, std\+::size\+\_\+t N$>$    constexpr std\+::size\+\_\+t size(const T(\&)\mbox{[}N\mbox{]}) noexcept \{        return N;    \}\#endif \} \} \#endif \#ifndef CATCH\+\_\+\+DEBUG\+\_\+\+CONSOLE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+DEBUG\+\_\+\+CONSOLE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{    void write\+To\+Debug\+Console( std\+::string const\& text );\}\#endif \#ifndef CATCH\+\_\+\+DEBUGGER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+DEBUGGER\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    bool is\+Debugger\+Active();\}\#if !defined( CATCH\+\_\+\+TRAP ) \&\& defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ ) \&\& defined( \+\_\+\+\_\+has\+\_\+builtin )\#    if \+\_\+\+\_\+has\+\_\+builtin( \+\_\+\+\_\+builtin\+\_\+debugtrap )\#        define CATCH\+\_\+\+TRAP() \+\_\+\+\_\+builtin\+\_\+debugtrap()\#    endif\#endif\#if !defined( CATCH\+\_\+\+TRAP ) \&\& defined( \+\_\+\+MSC\+\_\+\+VER )\#    define CATCH\+\_\+\+TRAP() \+\_\+\+\_\+debugbreak()\#endif\#if !defined(CATCH\+\_\+\+TRAP) \#ifdef CATCH\+\_\+\+PLATFORM\+\_\+\+MAC    \#if defined(\+\_\+\+\_\+i386\+\_\+\+\_\+) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined(\+\_\+\+\_\+x86\+\_\+64\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP() \+\_\+\+\_\+asm\+\_\+\+\_\+("{}int \$3\textbackslash{}n"{} \+: \+: )     \#elif defined(\+\_\+\+\_\+aarch64\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP() \+\_\+\+\_\+asm\+\_\+\+\_\+("{}.inst 0xd43e0000"{})    \#elif defined(\+\_\+\+\_\+\+POWERPC\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP() \+\_\+\+\_\+asm\+\_\+\+\_\+("{}li r0, 20\textbackslash{}nsc\textbackslash{}nnop\textbackslash{}nli r0, 37\textbackslash{}nli r4, 2\textbackslash{}nsc\textbackslash{}nnop\textbackslash{}n"{} \textbackslash{}        \+: \+: \+: "{}memory"{},"{}r0"{},"{}r3"{},"{}r4"{} )     \#endif\#elif defined(CATCH\+\_\+\+PLATFORM\+\_\+\+IPHONE)        \#if defined(\+\_\+\+\_\+i386\+\_\+\+\_\+) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined(\+\_\+\+\_\+x86\+\_\+64\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP()  \+\_\+\+\_\+asm\+\_\+\+\_\+("{}int \$3"{})    \#elif defined(\+\_\+\+\_\+aarch64\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP()  \+\_\+\+\_\+asm\+\_\+\+\_\+("{}.inst 0xd4200000"{})    \#elif defined(\+\_\+\+\_\+arm\+\_\+\+\_\+) \&\& !defined(\+\_\+\+\_\+thumb\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP()  \+\_\+\+\_\+asm\+\_\+\+\_\+("{}.inst 0xe7f001f0"{})    \#elif defined(\+\_\+\+\_\+arm\+\_\+\+\_\+) \&\&  defined(\+\_\+\+\_\+thumb\+\_\+\+\_\+)        \#define CATCH\+\_\+\+TRAP()  \+\_\+\+\_\+asm\+\_\+\+\_\+("{}.inst 0xde01"{})    \#endif\#elif defined(CATCH\+\_\+\+PLATFORM\+\_\+\+LINUX)                \#if defined(\+\_\+\+\_\+\+GNUC\+\_\+\+\_\+) \&\& (defined(\+\_\+\+\_\+i386) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined(\+\_\+\+\_\+x86\+\_\+64))        \#define CATCH\+\_\+\+TRAP() asm volatile ("{}int \$3"{})     \#else         \#include $<$signal.\+h$>$        \#define CATCH\+\_\+\+TRAP() raise(SIGTRAP)    \#endif\#elif defined(\+\_\+\+\_\+\+MINGW32\+\_\+\+\_\+)    extern "{}C"{} \+\_\+\+\_\+declspec(dllimport) void \+\_\+\+\_\+stdcall Debug\+Break();    \#define CATCH\+\_\+\+TRAP() Debug\+Break()\#endif\#endif \#if !defined(CATCH\+\_\+\+BREAK\+\_\+\+INTO\+\_\+\+DEBUGGER)    \#if defined(CATCH\+\_\+\+TRAP)        \#define CATCH\+\_\+\+BREAK\+\_\+\+INTO\+\_\+\+DEBUGGER() \mbox{[}$\,$\mbox{]}\{ if( Catch\+::is\+Debugger\+Active() ) \{ CATCH\+\_\+\+TRAP(); \} \}()    \#else        \#define CATCH\+\_\+\+BREAK\+\_\+\+INTO\+\_\+\+DEBUGGER() \mbox{[}$\,$\mbox{]}\{\}()    \#endif\#endif\#endif \#ifndef CATCH\+\_\+\+ENFORCE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+ENFORCE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$exception$>$ namespace Catch \{\#if !defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE\+\_\+\+EXCEPTIONS)    template $<$typename Ex$>$    \mbox{[}\mbox{[}noreturn\mbox{]}\mbox{]}    void throw\+\_\+exception(Ex const\& e) \{        throw e;    \}\#else     \mbox{[}\mbox{[}noreturn\mbox{]}\mbox{]}    void throw\+\_\+exception(std\+::exception const\& e);\#endif    \mbox{[}\mbox{[}noreturn\mbox{]}\mbox{]}    void throw\+\_\+logic\+\_\+error(std\+::string const\& msg);    \mbox{[}\mbox{[}noreturn\mbox{]}\mbox{]}    void throw\+\_\+domain\+\_\+error(std\+::string const\& msg);    \mbox{[}\mbox{[}noreturn\mbox{]}\mbox{]}    void throw\+\_\+runtime\+\_\+error(std\+::string const\& msg);\} \#define CATCH\+\_\+\+MAKE\+\_\+\+MSG(...) \textbackslash{}    (Catch\+::\+Reusable\+String\+Stream() $<$$<$ \+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+).str()\#define CATCH\+\_\+\+INTERNAL\+\_\+\+ERROR(...) \textbackslash{}    Catch\+::throw\+\_\+logic\+\_\+error(CATCH\+\_\+\+MAKE\+\_\+\+MSG( CATCH\+\_\+\+INTERNAL\+\_\+\+LINEINFO $<$$<$ "{}\+: Internal Catch2 error\+: "{} $<$$<$ \+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+))\#define CATCH\+\_\+\+ERROR(...) \textbackslash{}    Catch\+::throw\+\_\+domain\+\_\+error(CATCH\+\_\+\+MAKE\+\_\+\+MSG( \+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+ ))\#define CATCH\+\_\+\+RUNTIME\+\_\+\+ERROR(...) \textbackslash{}    Catch\+::throw\+\_\+runtime\+\_\+error(CATCH\+\_\+\+MAKE\+\_\+\+MSG( \+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+ ))\#define CATCH\+\_\+\+ENFORCE( condition, ... ) \textbackslash{}    do\{ if( !(condition) ) CATCH\+\_\+\+ERROR( \+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+ ); \} while(false)\#endif \#ifndef CATCH\+\_\+\+ENUM\+\_\+\+VALUES\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+ENUM\+\_\+\+VALUES\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$vector$>$namespace Catch \{    namespace Detail \{        \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Catch\+::\+Detail\+::unique\+\_\+ptr}}$<$Enum\+Info$>$ make\+Enum\+Info( String\+Ref enum\+Name, String\+Ref all\+Value\+Names, std\+::vector$<$int$>$ const\& values );        class Enum\+Values\+Registry \+: public IMutable\+Enum\+Values\+Registry \{            std\+::vector$<$\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Catch\+::\+Detail\+::unique\+\_\+ptr}}$<$Enum\+Info$>$$>$ m\+\_\+enum\+Infos;            Enum\+Info const\& register\+Enum( String\+Ref enum\+Name, String\+Ref all\+Value\+Names, std\+::vector$<$int$>$ const\& values) override;        \};        std\+::vector$<$String\+Ref$>$ parse\+Enums( String\+Ref enums );    \} \} \#endif \#ifndef CATCH\+\_\+\+ERRNO\+\_\+\+GUARD\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+ERRNO\+\_\+\+GUARD\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{            class Errno\+Guard \{    public\+:                Errno\+Guard();        \texorpdfstring{$\sim$}{\string~}Errno\+Guard();    private\+:        int m\+\_\+old\+Errno;    \};\}\#endif \#ifndef CATCH\+\_\+\+EXCEPTION\+\_\+\+TRANSLATOR\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+EXCEPTION\+\_\+\+TRANSLATOR\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{    class Exception\+Translator\+Registry \+: public IException\+Translator\+Registry \{    public\+:        \texorpdfstring{$\sim$}{\string~}Exception\+Translator\+Registry() override;        void register\+Translator( Detail\+::unique\+\_\+ptr$<$IException\+Translator$>$\&\& translator );        std\+::string translate\+Active\+Exception() const override;    private\+:        Exception\+Translators m\+\_\+translators;    \};\}\#endif \#ifndef CATCH\+\_\+\+FATAL\+\_\+\+CONDITION\+\_\+\+HANDLER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+FATAL\+\_\+\+CONDITION\+\_\+\+HANDLER\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cassert$>$namespace Catch \{        class Fatal\+Condition\+Handler \{        bool m\+\_\+started = false;                                void engage\+\_\+platform();        void disengage\+\_\+platform() noexcept;    public\+:                Fatal\+Condition\+Handler();        \texorpdfstring{$\sim$}{\string~}Fatal\+Condition\+Handler();        void engage() \{            assert(!m\+\_\+started \&\& "{}Handler cannot be installed twice."{});            m\+\_\+started = true;            engage\+\_\+platform();        \}        void disengage() noexcept \{            assert(m\+\_\+started \&\& "{}Handler cannot be uninstalled without being installed first"{});            m\+\_\+started = false;            disengage\+\_\+platform();        \}    \};        class Fatal\+Condition\+Handler\+Guard \{        Fatal\+Condition\+Handler\texorpdfstring{$\ast$}{*} m\+\_\+handler;    public\+:        Fatal\+Condition\+Handler\+Guard(Fatal\+Condition\+Handler\texorpdfstring{$\ast$}{*} handler)\+:            m\+\_\+handler(handler) \{            m\+\_\+handler-\/$>$engage();        \}        \texorpdfstring{$\sim$}{\string~}Fatal\+Condition\+Handler\+Guard() \{            m\+\_\+handler-\/$>$disengage();        \}    \};\} \#endif \#ifndef CATCH\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cassert$>$\#include $<$cmath$>$\#include $<$cstdint$>$\#include $<$utility$>$\#include $<$limits$>$namespace Catch \{    namespace Detail \{        uint32\+\_\+t convert\+To\+Bits(float f);        uint64\+\_\+t convert\+To\+Bits(double d);                        bool direct\+Compare( float lhs, float rhs );        bool direct\+Compare( double lhs, double rhs );    \} \#if defined( \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+ ) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ )\#    pragma GCC diagnostic push            \#    pragma GCC diagnostic ignored "{}-\/Wfloat-\/equal"{}\#endif        template $<$typename FP$>$    uint64\+\_\+t ulp\+Distance( FP lhs, FP rhs ) \{        assert( std\+::numeric\+\_\+limits$<$FP$>$\+::is\+\_\+iec559 \&\&            "{}ulp\+Distance assumes IEEE-\/754 format for floating point types"{} );        assert( !Catch\+::isnan( lhs ) \&\&                "{}Distance between NaN and number is not meaningful"{} );        assert( !Catch\+::isnan( rhs ) \&\&                "{}Distance between NaN and number is not meaningful"{} );                        if ( lhs == rhs ) \{ return 0; \}                static constexpr FP positive\+\_\+zero\{\};                if ( lhs == positive\+\_\+zero ) \{ lhs = positive\+\_\+zero; \}        if ( rhs == positive\+\_\+zero ) \{ rhs = positive\+\_\+zero; \}                        if ( std\+::signbit( lhs ) != std\+::signbit( rhs ) ) \{            return ulp\+Distance( std\+::abs( lhs ), positive\+\_\+zero ) +                   ulp\+Distance( std\+::abs( rhs ), positive\+\_\+zero );        \}                                uint64\+\_\+t lc = Detail\+::convert\+To\+Bits( lhs );        uint64\+\_\+t rc = Detail\+::convert\+To\+Bits( rhs );                        if ( lc $<$ rc ) \{            std\+::swap( lc, rc );        \}        return lc -\/ rc;    \}\#if defined( \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+ ) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} defined( \+\_\+\+\_\+clang\+\_\+\+\_\+ )\#    pragma GCC diagnostic pop\#endif\} \#endif \#ifndef CATCH\+\_\+\+GETENV\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+GETENV\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{namespace Detail \{        char const\texorpdfstring{$\ast$}{*} get\+Env(char const\texorpdfstring{$\ast$}{*} var\+Name);\}\}\#endif \#ifndef CATCH\+\_\+\+IS\+\_\+\+PERMUTATION\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+IS\+\_\+\+PERMUTATION\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iterator$>$\#include $<$type\+\_\+traits$>$namespace Catch \{    namespace Detail \{        template $<$typename Forward\+Iter,                  typename Sentinel,                  typename T,                  typename Comparator$>$        constexpr        Forward\+Iter find\+\_\+sentinel( Forward\+Iter start,                                   Sentinel sentinel,                                   T const\& value,                                   Comparator cmp ) \{            while ( start != sentinel ) \{                if ( cmp( \texorpdfstring{$\ast$}{*}start, value ) ) \{ break; \}                ++start;            \}            return start;        \}        template $<$typename Forward\+Iter,                  typename Sentinel,                  typename T,                  typename Comparator$>$        constexpr        std\+::ptrdiff\+\_\+t count\+\_\+sentinel( Forward\+Iter start,                                       Sentinel sentinel,                                       T const\& value,                                       Comparator cmp ) \{            std\+::ptrdiff\+\_\+t count = 0;            while ( start != sentinel ) \{                if ( cmp( \texorpdfstring{$\ast$}{*}start, value ) ) \{ ++count; \}                ++start;            \}            return count;        \}        template $<$typename Forward\+Iter, typename Sentinel$>$        constexpr        std\+::enable\+\_\+if\+\_\+t$<$!std\+::is\+\_\+same$<$Forward\+Iter, Sentinel$>$\+::value,                         std\+::ptrdiff\+\_\+t$>$        sentinel\+\_\+distance( Forward\+Iter iter, const Sentinel sentinel ) \{            std\+::ptrdiff\+\_\+t dist = 0;            while ( iter != sentinel ) \{                ++iter;                ++dist;            \}            return dist;        \}        template $<$typename Forward\+Iter$>$        constexpr std\+::ptrdiff\+\_\+t sentinel\+\_\+distance( Forward\+Iter first,                                                    Forward\+Iter last ) \{            return std\+::distance( first, last );        \}        template $<$typename Forward\+Iter1,                  typename Sentinel1,                  typename Forward\+Iter2,                  typename Sentinel2,                  typename Comparator$>$        constexpr bool check\+\_\+element\+\_\+counts( Forward\+Iter1 first\+\_\+1,                                             const Sentinel1 end\+\_\+1,                                             Forward\+Iter2 first\+\_\+2,                                             const Sentinel2 end\+\_\+2,                                             Comparator cmp ) \{            auto cursor = first\+\_\+1;            while ( cursor != end\+\_\+1 ) \{                if ( find\+\_\+sentinel( first\+\_\+1, cursor, \texorpdfstring{$\ast$}{*}cursor, cmp ) ==                     cursor ) \{                                        const auto count\+\_\+in\+\_\+range\+\_\+2 =                        count\+\_\+sentinel( first\+\_\+2, end\+\_\+2, \texorpdfstring{$\ast$}{*}cursor, cmp );                                                            if ( count\+\_\+in\+\_\+range\+\_\+2 == 0 ) \{ return false; \}                    const auto count\+\_\+in\+\_\+range\+\_\+1 =                        count\+\_\+sentinel( cursor, end\+\_\+1, \texorpdfstring{$\ast$}{*}cursor, cmp );                    if ( count\+\_\+in\+\_\+range\+\_\+1 != count\+\_\+in\+\_\+range\+\_\+2 ) \{                        return false;                    \}                \}                ++cursor;            \}            return true;        \}        template $<$typename Forward\+Iter1,                  typename Sentinel1,                  typename Forward\+Iter2,                  typename Sentinel2,                  typename Comparator$>$        constexpr bool is\+\_\+permutation( Forward\+Iter1 first\+\_\+1,                                       const Sentinel1 end\+\_\+1,                                       Forward\+Iter2 first\+\_\+2,                                       const Sentinel2 end\+\_\+2,                                       Comparator cmp ) \{                                                while (first\+\_\+1 != end\+\_\+1 \&\& first\+\_\+2 != end\+\_\+2 \&\& cmp(\texorpdfstring{$\ast$}{*}first\+\_\+1, \texorpdfstring{$\ast$}{*}first\+\_\+2)) \{                ++first\+\_\+1;                ++first\+\_\+2;            \}                        if (first\+\_\+1 == end\+\_\+1 \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} first\+\_\+2 == end\+\_\+2) \{                return first\+\_\+1 == end\+\_\+1 \&\& first\+\_\+2 == end\+\_\+2;            \}                        auto dist\+\_\+1 = sentinel\+\_\+distance( first\+\_\+1, end\+\_\+1 );            auto dist\+\_\+2 = sentinel\+\_\+distance( first\+\_\+2, end\+\_\+2 );            if (dist\+\_\+1 != dist\+\_\+2) \{ return false; \}                                                return check\+\_\+element\+\_\+counts( first\+\_\+1, end\+\_\+1, first\+\_\+2, end\+\_\+2, cmp );        \}    \} \} \#endif \#ifndef CATCH\+\_\+\+ISTREAM\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+ISTREAM\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iosfwd$>$\#include $<$string$>$namespace Catch \{    class IStream \{    public\+:        virtual \texorpdfstring{$\sim$}{\string~}IStream();         virtual std\+::ostream\& stream() = 0;                virtual bool is\+Console() const \{ return false; \}    \};        auto make\+Stream( std\+::string const\& filename ) -\/$>$ Detail\+::unique\+\_\+ptr$<$IStream$>$;\}\#endif \#ifndef CATCH\+\_\+\+JSONWRITER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+JSONWRITER\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cstdint$>$\#include $<$sstream$>$namespace Catch \{    class Json\+Object\+Writer;    class Json\+Array\+Writer;    struct Json\+Utils \{        static void indent( std\+::ostream\& os, std\+::uint64\+\_\+t level );        static void append\+Comma\+Newline( std\+::ostream\& os,                                        bool\& should\+\_\+comma,                                        std\+::uint64\+\_\+t level );    \};    class Json\+Value\+Writer \{    public\+:        Json\+Value\+Writer( std\+::ostream\& os );        Json\+Value\+Writer( std\+::ostream\& os, std\+::uint64\+\_\+t indent\+\_\+level );        Json\+Object\+Writer write\+Object() \&\&;        Json\+Array\+Writer write\+Array() \&\&;        template $<$typename T$>$        void write( T const\& value ) \&\& \{            write\+Impl( value, !std\+::is\+\_\+arithmetic$<$T$>$\+::value );        \}        void write( String\+Ref value ) \&\&;        void write( bool value ) \&\&;    private\+:        void write\+Impl( String\+Ref value, bool quote );                                        template $<$typename T,                  typename = typename std\+::enable\+\_\+if\+\_\+t$<$                      !std\+::is\+\_\+convertible$<$T, String\+Ref$>$\+::value$>$$>$        void write\+Impl( T const\& value, bool quote\+\_\+value ) \{            m\+\_\+sstream $<$$<$ value;            write\+Impl( m\+\_\+sstream.\+str(), quote\+\_\+value );        \}        std\+::ostream\& m\+\_\+os;        std\+::stringstream m\+\_\+sstream;        std\+::uint64\+\_\+t m\+\_\+indent\+\_\+level;    \};    class Json\+Object\+Writer \{    public\+:        Json\+Object\+Writer( std\+::ostream\& os );        Json\+Object\+Writer( std\+::ostream\& os, std\+::uint64\+\_\+t indent\+\_\+level );        Json\+Object\+Writer( Json\+Object\+Writer\&\& source ) noexcept;        Json\+Object\+Writer\& operator=( Json\+Object\+Writer\&\& source ) = delete;        \texorpdfstring{$\sim$}{\string~}Json\+Object\+Writer();        Json\+Value\+Writer write( String\+Ref key );    private\+:        std\+::ostream\& m\+\_\+os;        std\+::uint64\+\_\+t m\+\_\+indent\+\_\+level;        bool m\+\_\+should\+\_\+comma = false;        bool m\+\_\+active = true;    \};    class Json\+Array\+Writer \{    public\+:        Json\+Array\+Writer( std\+::ostream\& os );        Json\+Array\+Writer( std\+::ostream\& os, std\+::uint64\+\_\+t indent\+\_\+level );        Json\+Array\+Writer( Json\+Array\+Writer\&\& source ) noexcept;        Json\+Array\+Writer\& operator=( Json\+Array\+Writer\&\& source ) = delete;        \texorpdfstring{$\sim$}{\string~}Json\+Array\+Writer();        Json\+Object\+Writer write\+Object();        Json\+Array\+Writer write\+Array();        template $<$typename T$>$        Json\+Array\+Writer\& write( T const\& value ) \{            return write\+Impl( value );        \}        Json\+Array\+Writer\& write( bool value );    private\+:        template $<$typename T$>$        Json\+Array\+Writer\& write\+Impl( T const\& value ) \{            Json\+Utils\+::append\+Comma\+Newline(                m\+\_\+os, m\+\_\+should\+\_\+comma, m\+\_\+indent\+\_\+level + 1 );            Json\+Value\+Writer\{ m\+\_\+os \}.write( value );            return \texorpdfstring{$\ast$}{*}this;        \}        std\+::ostream\& m\+\_\+os;        std\+::uint64\+\_\+t m\+\_\+indent\+\_\+level;        bool m\+\_\+should\+\_\+comma = false;        bool m\+\_\+active = true;    \};\} \#endif \#ifndef CATCH\+\_\+\+LEAK\+\_\+\+DETECTOR\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+LEAK\+\_\+\+DETECTOR\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    struct Leak\+Detector \{        Leak\+Detector();        \texorpdfstring{$\sim$}{\string~}Leak\+Detector();    \};\}\#endif \#ifndef CATCH\+\_\+\+LIST\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+LIST\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$set$>$\#include $<$string$>$namespace Catch \{    class IEvent\+Listener;    class Config;    struct Reporter\+Description \{        std\+::string name, description;    \};    struct Listener\+Description \{        String\+Ref name;        std\+::string description;    \};    struct Tag\+Info \{        void add(String\+Ref spelling);        std\+::string all() const;        std\+::set$<$String\+Ref$>$ spellings;        std\+::size\+\_\+t count = 0;    \};    bool list( IEvent\+Listener\& reporter, Config const\& config );\} \#endif \#ifndef CATCH\+\_\+\+OUTPUT\+\_\+\+REDIRECT\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+OUTPUT\+\_\+\+REDIRECT\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cassert$>$\#include $<$string$>$namespace Catch \{    class Output\+Redirect \{        bool m\+\_\+redirect\+Active = false;        virtual void activate\+Impl() = 0;        virtual void deactivate\+Impl() = 0;    public\+:        enum Kind \{                        None,                        Streams,                        File\+Descriptors,        \};        virtual \texorpdfstring{$\sim$}{\string~}Output\+Redirect();                 virtual std\+::string get\+Stdout() = 0;        virtual std\+::string get\+Stderr() = 0;        virtual void clear\+Buffers() = 0;        bool is\+Active() const \{ return m\+\_\+redirect\+Active; \}        void activate() \{            assert( !m\+\_\+redirect\+Active \&\& "{}redirect is already active"{} );            activate\+Impl();            m\+\_\+redirect\+Active = true;        \}        void deactivate() \{            assert( m\+\_\+redirect\+Active \&\& "{}redirect is not active"{} );            deactivate\+Impl();            m\+\_\+redirect\+Active = false;        \}    \};    bool is\+Redirect\+Available( Output\+Redirect\+::\+Kind kind);    Detail\+::unique\+\_\+ptr$<$Output\+Redirect$>$ make\+Output\+Redirect( bool actual );    class Redirect\+Guard \{        Output\+Redirect\texorpdfstring{$\ast$}{*} m\+\_\+redirect;        bool m\+\_\+activate;        bool m\+\_\+previously\+Active;        bool m\+\_\+moved = false;    public\+:        Redirect\+Guard( bool activate, Output\+Redirect\& redirect\+Impl );        \texorpdfstring{$\sim$}{\string~}Redirect\+Guard() noexcept( false );        Redirect\+Guard( Redirect\+Guard const\& ) = delete;        Redirect\+Guard\& operator=( Redirect\+Guard const\& ) = delete;                Redirect\+Guard( Redirect\+Guard\&\& rhs ) noexcept;        Redirect\+Guard\& operator=( Redirect\+Guard\&\& rhs ) noexcept;    \};    Redirect\+Guard scoped\+Activate( Output\+Redirect\& redirect\+Impl );    Redirect\+Guard scoped\+Deactivate( Output\+Redirect\& redirect\+Impl );\} \#endif \#ifndef CATCH\+\_\+\+PARSE\+\_\+\+NUMBERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+PARSE\+\_\+\+NUMBERS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{        Optional$<$unsigned int$>$ parse\+UInt(std\+::string const\& input, int base = 10);\}\#endif \#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$map$>$\#include $<$string$>$\#include $<$vector$>$namespace Catch \{    class IEvent\+Listener;    using IEvent\+Listener\+Ptr = Detail\+::unique\+\_\+ptr$<$IEvent\+Listener$>$;    class IReporter\+Factory;    using IReporter\+Factory\+Ptr = Detail\+::unique\+\_\+ptr$<$IReporter\+Factory$>$;    struct Reporter\+Config;    class Event\+Listener\+Factory;    class Reporter\+Registry \{        struct Reporter\+Registry\+Impl;        Detail\+::unique\+\_\+ptr$<$Reporter\+Registry\+Impl$>$ m\+\_\+impl;    public\+:        Reporter\+Registry();        \texorpdfstring{$\sim$}{\string~}Reporter\+Registry();         IEvent\+Listener\+Ptr create( std\+::string const\& name,                                  Reporter\+Config\&\& config ) const;        void register\+Reporter( std\+::string const\& name,                               IReporter\+Factory\+Ptr factory );        void        register\+Listener( Detail\+::unique\+\_\+ptr$<$Event\+Listener\+Factory$>$ factory );        std\+::map$<$std\+::string,                 IReporter\+Factory\+Ptr,                 Detail\+::\+Case\+Insensitive\+Less$>$ const\&        get\+Factories() const;        std\+::vector$<$Detail\+::unique\+\_\+ptr$<$Event\+Listener\+Factory$>$$>$ const\&        get\+Listeners() const;    \};\} \#endif \#ifndef CATCH\+\_\+\+RUN\+\_\+\+CONTEXT\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+RUN\+\_\+\+CONTEXT\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+TEST\+\_\+\+CASE\+\_\+\+TRACKER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TEST\+\_\+\+CASE\+\_\+\+TRACKER\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$\#include $<$vector$>$namespace Catch \{namespace Test\+Case\+Tracking \{    struct Name\+And\+Location \{        std\+::string name;        Source\+Line\+Info location;        Name\+And\+Location( std\+::string\&\& \+\_\+name, Source\+Line\+Info const\& \+\_\+location );        friend bool operator==(Name\+And\+Location const\& lhs, Name\+And\+Location const\& rhs) \{                                                            if ( lhs.\+location.\+line != rhs.\+location.\+line ) \{ return false; \}            return lhs.\+name == rhs.\+name \&\& lhs.\+location == rhs.\+location;        \}        friend bool operator!=(Name\+And\+Location const\& lhs,                               Name\+And\+Location const\& rhs) \{            return !( lhs == rhs );        \}    \};        struct Name\+And\+Location\+Ref \{        String\+Ref name;        Source\+Line\+Info location;        constexpr Name\+And\+Location\+Ref( String\+Ref name\+\_\+,                                      Source\+Line\+Info location\+\_\+ )\+:            name( name\+\_\+ ), location( location\+\_\+ ) \{\}        friend bool operator==( Name\+And\+Location const\& lhs,                                Name\+And\+Location\+Ref const\& rhs ) \{                                                            if ( lhs.\+location.\+line != rhs.\+location.\+line ) \{ return false; \}            return String\+Ref( lhs.\+name ) == rhs.\+name \&\&                   lhs.\+location == rhs.\+location;        \}        friend bool operator==( Name\+And\+Location\+Ref const\& lhs,                                Name\+And\+Location const\& rhs ) \{            return rhs == lhs;        \}    \};    class ITracker;    using ITracker\+Ptr = \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Catch\+::\+Detail\+::unique\+\_\+ptr}}$<$ITracker$>$;    class ITracker \{        Name\+And\+Location m\+\_\+name\+And\+Location;        using Children = std\+::vector$<$ITracker\+Ptr$>$;    protected\+:        enum Cycle\+State \{            Not\+Started,            Executing,            Executing\+Children,            Needs\+Another\+Run,            Completed\+Successfully,            Failed        \};        ITracker\texorpdfstring{$\ast$}{*} m\+\_\+parent = nullptr;        Children m\+\_\+children;        Cycle\+State m\+\_\+run\+State = Not\+Started;    public\+:        ITracker( Name\+And\+Location\&\& name\+And\+Loc, ITracker\texorpdfstring{$\ast$}{*} parent )\+:            m\+\_\+name\+And\+Location( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(name\+And\+Loc) ),            m\+\_\+parent( parent )        \{\}                Name\+And\+Location const\& name\+And\+Location() const \{            return m\+\_\+name\+And\+Location;        \}        ITracker\texorpdfstring{$\ast$}{*} parent() const \{            return m\+\_\+parent;        \}        virtual \texorpdfstring{$\sim$}{\string~}ITracker();                         virtual bool is\+Complete() const = 0;                bool is\+Successfully\+Completed() const \{            return m\+\_\+run\+State == Completed\+Successfully;        \}                bool is\+Open() const;                bool has\+Started() const;                virtual void close() = 0;         virtual void fail() = 0;        void mark\+As\+Needing\+Another\+Run();                void add\+Child( ITracker\+Ptr\&\& child );                ITracker\texorpdfstring{$\ast$}{*} find\+Child( Name\+And\+Location\+Ref const\& name\+And\+Location );                bool has\+Children() const \{            return !m\+\_\+children.\+empty();        \}                void open\+Child();                virtual bool is\+Section\+Tracker() const;                virtual bool is\+Generator\+Tracker() const;    \};    class Tracker\+Context \{        enum Run\+State \{            Not\+Started,            Executing,            Completed\+Cycle        \};        ITracker\+Ptr m\+\_\+root\+Tracker;        ITracker\texorpdfstring{$\ast$}{*} m\+\_\+current\+Tracker = nullptr;        Run\+State m\+\_\+run\+State = Not\+Started;    public\+:        ITracker\& start\+Run();        void start\+Cycle() \{            m\+\_\+current\+Tracker = m\+\_\+root\+Tracker.\+get();            m\+\_\+run\+State = Executing;        \}        void complete\+Cycle();        bool completed\+Cycle() const;        ITracker\& current\+Tracker() \{ return \texorpdfstring{$\ast$}{*}m\+\_\+current\+Tracker; \}        void set\+Current\+Tracker( ITracker\texorpdfstring{$\ast$}{*} tracker );    \};    class Tracker\+Base \+: public ITracker \{    protected\+:        Tracker\+Context\& m\+\_\+ctx;    public\+:        Tracker\+Base( Name\+And\+Location\&\& name\+And\+Location, Tracker\+Context\& ctx, ITracker\texorpdfstring{$\ast$}{*} parent );        bool is\+Complete() const override;        void open();        void close() override;        void fail() override;    private\+:        void move\+To\+Parent();        void move\+To\+This();    \};    class Section\+Tracker \+: public Tracker\+Base \{        std\+::vector$<$String\+Ref$>$ m\+\_\+filters;                                        String\+Ref m\+\_\+trimmed\+\_\+name;    public\+:        Section\+Tracker( Name\+And\+Location\&\& name\+And\+Location, Tracker\+Context\& ctx, ITracker\texorpdfstring{$\ast$}{*} parent );        bool is\+Section\+Tracker() const override;        bool is\+Complete() const override;        static Section\+Tracker\& acquire( Tracker\+Context\& ctx, Name\+And\+Location\+Ref const\& name\+And\+Location );        void try\+Open();        void add\+Initial\+Filters( std\+::vector$<$std\+::string$>$ const\& filters );        void add\+Next\+Filters( std\+::vector$<$String\+Ref$>$ const\& filters );                std\+::vector$<$String\+Ref$>$ const\& get\+Filters() const \{ return m\+\_\+filters; \}                String\+Ref trimmed\+Name() const;    \};\} using Test\+Case\+Tracking\+::\+ITracker;using Test\+Case\+Tracking\+::\+Tracker\+Context;using Test\+Case\+Tracking\+::\+Section\+Tracker;\} \#endif \#ifndef CATCH\+\_\+\+THREAD\+\_\+\+SUPPORT\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+THREAD\+\_\+\+SUPPORT\+\_\+\+HPP\+\_\+\+INCLUDED\#if defined( CATCH\+\_\+\+CONFIG\+\_\+\+EXPERIMENTAL\+\_\+\+THREAD\+\_\+\+SAFE\+\_\+\+ASSERTIONS )\#    include $<$atomic$>$\#    include $<$mutex$>$\#endifnamespace Catch \{    namespace Detail \{\#if defined( CATCH\+\_\+\+CONFIG\+\_\+\+EXPERIMENTAL\+\_\+\+THREAD\+\_\+\+SAFE\+\_\+\+ASSERTIONS )        using Mutex = std\+::mutex;        using Lock\+Guard = std\+::lock\+\_\+guard$<$std\+::mutex$>$;        struct Atomic\+Counts \{            std\+::atomic$<$std\+::uint64\+\_\+t$>$ passed = 0;            std\+::atomic$<$std\+::uint64\+\_\+t$>$ failed = 0;            std\+::atomic$<$std\+::uint64\+\_\+t$>$ failed\+But\+Ok = 0;            std\+::atomic$<$std\+::uint64\+\_\+t$>$ skipped = 0;        \};\#else               struct Mutex \{            void lock() \{\}            void unlock() \{\}        \};        struct Lock\+Guard \{            Lock\+Guard( Mutex ) \{\}        \};        using Atomic\+Counts = Counts;\#endif    \} \} \#endif \#include $<$string$>$namespace Catch \{    class IGenerator\+Tracker;    class IConfig;    class IEvent\+Listener;    using IEvent\+Listener\+Ptr = Detail\+::unique\+\_\+ptr$<$IEvent\+Listener$>$;    class Output\+Redirect;        class Run\+Context final \+: public IResult\+Capture \{    public\+:        Run\+Context( Run\+Context const\& ) = delete;        Run\+Context\& operator =( Run\+Context const\& ) = delete;        explicit Run\+Context( IConfig const\texorpdfstring{$\ast$}{*} \+\_\+config, IEvent\+Listener\+Ptr\&\& reporter );        \texorpdfstring{$\sim$}{\string~}Run\+Context() override;        Totals run\+Test(Test\+Case\+Handle const\& test\+Case);    public\+:                 void handle\+Expr                (   Assertion\+Info const\& info,                    ITransient\+Expression const\& expr,                    Assertion\+Reaction\& reaction ) override;        void handle\+Message                (   Assertion\+Info const\& info,                    Result\+Was\+::\+Of\+Type result\+Type,                    std\+::string\&\& message,                    Assertion\+Reaction\& reaction ) override;        void handle\+Unexpected\+Exception\+Not\+Thrown                (   Assertion\+Info const\& info,                    Assertion\+Reaction\& reaction ) override;        void handle\+Unexpected\+Inflight\+Exception                (   Assertion\+Info const\& info,                    std\+::string\&\& message,                    Assertion\+Reaction\& reaction ) override;        void handle\+Incomplete                (   Assertion\+Info const\& info ) override;        void handle\+Non\+Expr                (   Assertion\+Info const \&info,                    Result\+Was\+::\+Of\+Type result\+Type,                    Assertion\+Reaction \&reaction ) override;        void notify\+Assertion\+Started( Assertion\+Info const\& info ) override;        bool section\+Started( String\+Ref section\+Name,                             Source\+Line\+Info const\& section\+Line\+Info,                             Counts\& assertions ) override;        void section\+Ended( Section\+End\+Info\&\& end\+Info ) override;        void section\+Ended\+Early( Section\+End\+Info\&\& end\+Info ) override;        IGenerator\+Tracker\texorpdfstring{$\ast$}{*}        acquire\+Generator\+Tracker( String\+Ref generator\+Name,                                 Source\+Line\+Info const\& line\+Info ) override;        IGenerator\+Tracker\texorpdfstring{$\ast$}{*} create\+Generator\+Tracker(            String\+Ref generator\+Name,            Source\+Line\+Info line\+Info,            Generators\+::\+Generator\+Base\+Ptr\&\& generator ) override;        void benchmark\+Preparing( String\+Ref name ) override;        void benchmark\+Starting( Benchmark\+Info const\& info ) override;        void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& stats ) override;        void benchmark\+Failed( String\+Ref error ) override;        void push\+Scoped\+Message( Message\+Info const\& message ) override;        void pop\+Scoped\+Message( Message\+Info const\& message ) override;        void emplace\+Unscoped\+Message( Message\+Builder\&\& builder ) override;        std\+::string get\+Current\+Test\+Name() const override;        const Assertion\+Result\texorpdfstring{$\ast$}{*} get\+Last\+Result() const override;        void exception\+Early\+Reported() override;        void handle\+Fatal\+Error\+Condition( String\+Ref message ) override;        bool last\+Assertion\+Passed() override;    public\+:                bool aborting() const;    private\+:        void assertion\+Passed\+Fast\+Path( Source\+Line\+Info line\+Info );                void update\+Totals\+From\+Atomics();        void run\+Current\+Test();        void invoke\+Active\+Test\+Case();        bool test\+For\+Missing\+Assertions( Counts\& assertions );        void assertion\+Ended( Assertion\+Result\&\& result );        void report\+Expr                (   Assertion\+Info const \&info,                    Result\+Was\+::\+Of\+Type result\+Type,                    ITransient\+Expression const \texorpdfstring{$\ast$}{*}expr,                    bool negated );        void populate\+Reaction( Assertion\+Reaction\& reaction, bool has\+\_\+normal\+\_\+disposition );                                Assertion\+Info make\+Dummy\+Assertion\+Info();    private\+:        void handle\+Unfinished\+Sections();        mutable Detail\+::\+Mutex m\+\_\+assertion\+Mutex;        Test\+Run\+Info m\+\_\+run\+Info;        Test\+Case\+Handle const\texorpdfstring{$\ast$}{*} m\+\_\+active\+Test\+Case = nullptr;        ITracker\texorpdfstring{$\ast$}{*} m\+\_\+test\+Case\+Tracker = nullptr;        Optional$<$Assertion\+Result$>$ m\+\_\+last\+Result;        IConfig const\texorpdfstring{$\ast$}{*} m\+\_\+config;        Totals m\+\_\+totals;        Detail\+::\+Atomic\+Counts m\+\_\+atomic\+Assertion\+Count;        IEvent\+Listener\+Ptr m\+\_\+reporter;        std\+::vector$<$Section\+End\+Info$>$ m\+\_\+unfinished\+Sections;        std\+::vector$<$ITracker\texorpdfstring{$\ast$}{*}$>$ m\+\_\+active\+Sections;        Tracker\+Context m\+\_\+tracker\+Context;        Detail\+::unique\+\_\+ptr$<$Output\+Redirect$>$ m\+\_\+output\+Redirect;        Fatal\+Condition\+Handler m\+\_\+fatal\+Conditionhandler;                size\+\_\+t m\+\_\+abort\+After\+XFailed\+Assertions;        bool m\+\_\+should\+Report\+Unexpected = true;                bool m\+\_\+report\+Assertion\+Starting;                bool m\+\_\+include\+Successful\+Results;                bool m\+\_\+should\+Debug\+Break;    \};    void seed\+Rng(IConfig const\& config);    unsigned int rng\+Seed();\} \#endif \#ifndef CATCH\+\_\+\+SHARDING\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+SHARDING\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cassert$>$\#include $<$algorithm$>$namespace Catch \{    template$<$typename Container$>$    Container create\+Shard(Container const\& container, std\+::size\+\_\+t const shard\+Count, std\+::size\+\_\+t const shard\+Index) \{        assert(shard\+Count $>$ shard\+Index);        if (shard\+Count == 1) \{            return container;        \}        const std\+::size\+\_\+t total\+Test\+Count = container.\+size();        const std\+::size\+\_\+t shard\+Size = total\+Test\+Count / shard\+Count;        const std\+::size\+\_\+t leftover\+Tests = total\+Test\+Count \% shard\+Count;        const std\+::size\+\_\+t start\+Index = shard\+Index \texorpdfstring{$\ast$}{*} shard\+Size + (std\+::min)(shard\+Index, leftover\+Tests);        const std\+::size\+\_\+t end\+Index = (shard\+Index + 1) \texorpdfstring{$\ast$}{*} shard\+Size + (std\+::min)(shard\+Index + 1, leftover\+Tests);        auto start\+Iterator = std\+::next(container.\+begin(), static\+\_\+cast$<$std\+::ptrdiff\+\_\+t$>$(start\+Index));        auto end\+Iterator = std\+::next(container.\+begin(), static\+\_\+cast$<$std\+::ptrdiff\+\_\+t$>$(end\+Index));        return Container(start\+Iterator, end\+Iterator);    \}\}\#endif \#ifndef CATCH\+\_\+\+SINGLETONS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+SINGLETONS\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    struct ISingleton \{        virtual \texorpdfstring{$\sim$}{\string~}ISingleton();     \};    void add\+Singleton( ISingleton\texorpdfstring{$\ast$}{*} singleton );    void cleanup\+Singletons();    template$<$typename Singleton\+ImplT, typename InterfaceT = Singleton\+ImplT, typename Mutable\+InterfaceT = InterfaceT$>$    class Singleton \+: Singleton\+ImplT, public ISingleton \{        static auto get\+Internal() -\/$>$ Singleton\texorpdfstring{$\ast$}{*} \{            static Singleton\texorpdfstring{$\ast$}{*} s\+\_\+instance = nullptr;            if( !s\+\_\+instance ) \{                s\+\_\+instance = new Singleton;                add\+Singleton( s\+\_\+instance );            \}            return s\+\_\+instance;        \}    public\+:        static auto get() -\/$>$ InterfaceT const\& \{            return \texorpdfstring{$\ast$}{*}get\+Internal();        \}        static auto get\+Mutable() -\/$>$ Mutable\+InterfaceT\& \{            return \texorpdfstring{$\ast$}{*}get\+Internal();        \}    \};\} \#endif \#ifndef CATCH\+\_\+\+STARTUP\+\_\+\+EXCEPTION\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+STARTUP\+\_\+\+EXCEPTION\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$vector$>$\#include $<$exception$>$namespace Catch \{    class Startup\+Exception\+Registry \{\#if !defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE\+\_\+\+EXCEPTIONS)    public\+:        void add(std\+::exception\+\_\+ptr const\& exception) noexcept;        std\+::vector$<$std\+::exception\+\_\+ptr$>$ const\& get\+Exceptions() const noexcept;    private\+:        std\+::vector$<$std\+::exception\+\_\+ptr$>$ m\+\_\+exceptions;\#endif    \};\} \#endif \#ifndef CATCH\+\_\+\+STDSTREAMS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+STDSTREAMS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iosfwd$>$namespace Catch \{    std\+::ostream\& cout();    std\+::ostream\& cerr();    std\+::ostream\& clog();\} \#endif\#ifndef CATCH\+\_\+\+STRING\+\_\+\+MANIP\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+STRING\+\_\+\+MANIP\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cstdint$>$\#include $<$string$>$\#include $<$iosfwd$>$\#include $<$vector$>$namespace Catch \{    bool starts\+With( std\+::string const\& s, std\+::string const\& prefix );    bool starts\+With( String\+Ref s, char prefix );    bool ends\+With( std\+::string const\& s, std\+::string const\& suffix );    bool ends\+With( std\+::string const\& s, char suffix );    bool contains( std\+::string const\& s, std\+::string const\& infix );    void to\+Lower\+In\+Place( std\+::string\& s );    std\+::string to\+Lower( std\+::string const\& s );    char to\+Lower( char c );        std\+::string trim( std\+::string const\& str );        String\+Ref trim(String\+Ref ref);        std\+::vector$<$String\+Ref$>$ split\+String\+Ref( String\+Ref str, char delimiter );    bool replace\+In\+Place( std\+::string\& str, std\+::string const\& replace\+This, std\+::string const\& with\+This );        class pluralise \{        std\+::uint64\+\_\+t m\+\_\+count;        String\+Ref m\+\_\+label;    public\+:        constexpr pluralise(std\+::uint64\+\_\+t count, String\+Ref label)\+:            m\+\_\+count(count),            m\+\_\+label(label)        \{\}        friend std\+::ostream\& operator $<$$<$ ( std\+::ostream\& os, pluralise const\& pluraliser );    \};\}\#endif \#ifndef CATCH\+\_\+\+TAG\+\_\+\+ALIAS\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TAG\+\_\+\+ALIAS\+\_\+\+REGISTRY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$map$>$\#include $<$string$>$namespace Catch \{    struct Source\+Line\+Info;    class Tag\+Alias\+Registry \+: public ITag\+Alias\+Registry \{    public\+:        \texorpdfstring{$\sim$}{\string~}Tag\+Alias\+Registry() override;        Tag\+Alias const\texorpdfstring{$\ast$}{*} find( std\+::string const\& alias ) const override;        std\+::string expand\+Aliases( std\+::string const\& unexpanded\+Test\+Spec ) const override;        void add( std\+::string const\& alias, std\+::string const\& tag, Source\+Line\+Info const\& line\+Info );    private\+:        std\+::map$<$std\+::string, Tag\+Alias$>$ m\+\_\+registry;    \};\} \#endif \#ifndef CATCH\+\_\+\+TEST\+\_\+\+CASE\+\_\+\+INFO\+\_\+\+HASHER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TEST\+\_\+\+CASE\+\_\+\+INFO\+\_\+\+HASHER\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cstdint$>$namespace Catch \{    struct Test\+Case\+Info;    class Test\+Case\+Info\+Hasher \{    public\+:        using hash\+\_\+t = std\+::uint64\+\_\+t;        Test\+Case\+Info\+Hasher( hash\+\_\+t seed );        uint32\+\_\+t operator()( Test\+Case\+Info const\& t ) const;    private\+:        hash\+\_\+t m\+\_\+seed;    \};\} \#endif \#ifndef CATCH\+\_\+\+TEST\+\_\+\+CASE\+\_\+\+REGISTRY\+\_\+\+IMPL\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TEST\+\_\+\+CASE\+\_\+\+REGISTRY\+\_\+\+IMPL\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$vector$>$namespace Catch \{    class IConfig;    class ITest\+Invoker;    class Test\+Case\+Handle;    class Test\+Spec;    std\+::vector$<$Test\+Case\+Handle$>$ sort\+Tests( IConfig const\& config, std\+::vector$<$Test\+Case\+Handle$>$ const\& unsorted\+Test\+Cases );    bool is\+Throw\+Safe( Test\+Case\+Handle const\& test\+Case, IConfig const\& config );    std\+::vector$<$Test\+Case\+Handle$>$ filter\+Tests( std\+::vector$<$Test\+Case\+Handle$>$ const\& test\+Cases, Test\+Spec const\& test\+Spec, IConfig const\& config );    std\+::vector$<$Test\+Case\+Handle$>$ const\& get\+All\+Test\+Cases\+Sorted( IConfig const\& config );    class Test\+Registry \+: public ITest\+Case\+Registry \{    public\+:        void register\+Test( Detail\+::unique\+\_\+ptr$<$Test\+Case\+Info$>$ test\+Info, Detail\+::unique\+\_\+ptr$<$ITest\+Invoker$>$ test\+Invoker );        std\+::vector$<$Test\+Case\+Info\texorpdfstring{$\ast$}{*}$>$ const\& get\+All\+Infos() const override;        std\+::vector$<$Test\+Case\+Handle$>$ const\& get\+All\+Tests() const override;        std\+::vector$<$Test\+Case\+Handle$>$ const\& get\+All\+Tests\+Sorted( IConfig const\& config ) const override;        \texorpdfstring{$\sim$}{\string~}Test\+Registry() override;     private\+:        std\+::vector$<$Detail\+::unique\+\_\+ptr$<$Test\+Case\+Info$>$$>$ m\+\_\+owned\+\_\+test\+\_\+infos;                        std\+::vector$<$Test\+Case\+Info\texorpdfstring{$\ast$}{*}$>$ m\+\_\+viewed\+\_\+test\+\_\+infos;        std\+::vector$<$Detail\+::unique\+\_\+ptr$<$ITest\+Invoker$>$$>$ m\+\_\+invokers;        std\+::vector$<$Test\+Case\+Handle$>$ m\+\_\+handles;        mutable Test\+Run\+Order m\+\_\+current\+Sort\+Order = Test\+Run\+Order\+::\+Declared;        mutable std\+::vector$<$Test\+Case\+Handle$>$ m\+\_\+sorted\+Functions;    \};    \} \#endif \#ifndef CATCH\+\_\+\+TEST\+\_\+\+SPEC\+\_\+\+PARSER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TEST\+\_\+\+SPEC\+\_\+\+PARSER\+\_\+\+HPP\+\_\+\+INCLUDED\#ifdef \+\_\+\+\_\+clang\+\_\+\+\_\+\#pragma clang diagnostic push\#pragma clang diagnostic ignored "{}-\/Wpadded"{}\#endif\#include $<$vector$>$\#include $<$string$>$namespace Catch \{    class ITag\+Alias\+Registry;    class Test\+Spec\+Parser \{        enum Mode\{ None, Name, Quoted\+Name, Tag, Escaped\+Name \};        Mode m\+\_\+mode = None;        Mode last\+Mode = None;        bool m\+\_\+exclusion = false;        std\+::size\+\_\+t m\+\_\+pos = 0;        std\+::size\+\_\+t m\+\_\+real\+Pattern\+Pos = 0;        std\+::string m\+\_\+arg;        std\+::string m\+\_\+substring;        std\+::string m\+\_\+pattern\+Name;        std\+::vector$<$std\+::size\+\_\+t$>$ m\+\_\+escape\+Chars;        Test\+Spec\+::\+Filter m\+\_\+current\+Filter;        Test\+Spec m\+\_\+test\+Spec;        ITag\+Alias\+Registry const\texorpdfstring{$\ast$}{*} m\+\_\+tag\+Aliases = nullptr;    public\+:        Test\+Spec\+Parser( ITag\+Alias\+Registry const\& tag\+Aliases );        Test\+Spec\+Parser\& parse( std\+::string const\& arg );        Test\+Spec test\+Spec();    private\+:        bool visit\+Char( char c );        void start\+New\+Mode( Mode mode );        bool process\+None\+Char( char c );        void process\+Name\+Char( char c );        bool process\+Other\+Char( char c );        void end\+Mode();        void escape();        bool is\+Control\+Char( char c ) const;        void save\+Last\+Mode();        void revert\+Back\+To\+Last\+Mode();        void add\+Filter();        bool separate();                std\+::string preprocess\+Pattern();                void add\+Name\+Pattern();                void add\+Tag\+Pattern();        inline void add\+Char\+To\+Pattern(char c) \{            m\+\_\+substring += c;            m\+\_\+pattern\+Name += c;            m\+\_\+real\+Pattern\+Pos++;        \}    \};\} \#ifdef \+\_\+\+\_\+clang\+\_\+\+\_\+\#pragma clang diagnostic pop\#endif\#endif \#ifndef CATCH\+\_\+\+TEXTFLOW\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TEXTFLOW\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cassert$>$\#include $<$string$>$\#include $<$vector$>$namespace Catch \{    namespace Text\+Flow \{        class Columns;                class Ansi\+Skipping\+String \{            std\+::string m\+\_\+string;            std\+::size\+\_\+t m\+\_\+size = 0;                        void preprocess\+String();        public\+:            class const\+\_\+iterator;            using iterator = const\+\_\+iterator;                                    static constexpr char sentinel = static\+\_\+cast$<$char$>$( 0xffu );            explicit Ansi\+Skipping\+String( std\+::string const\& text );            explicit Ansi\+Skipping\+String( std\+::string\&\& text );            const\+\_\+iterator begin() const;            const\+\_\+iterator end() const;            size\+\_\+t size() const \{ return m\+\_\+size; \}            std\+::string substring( const\+\_\+iterator begin,                                   const\+\_\+iterator end ) const;        \};        class Ansi\+Skipping\+String\+::const\+\_\+iterator \{            friend Ansi\+Skipping\+String;            struct End\+Tag \{\};            const std\+::string\texorpdfstring{$\ast$}{*} m\+\_\+string;            std\+::string\+::const\+\_\+iterator m\+\_\+it;            explicit const\+\_\+iterator( const std\+::string\& string, End\+Tag )\+:                m\+\_\+string( \&string ), m\+\_\+it( string.\+end() ) \{\}            void try\+Parse\+Ansi\+Escapes();            void advance();            void unadvance();        public\+:            using difference\+\_\+type = std\+::ptrdiff\+\_\+t;            using value\+\_\+type = char;            using pointer = value\+\_\+type\texorpdfstring{$\ast$}{*};            using reference = value\+\_\+type\&;            using iterator\+\_\+category = std\+::bidirectional\+\_\+iterator\+\_\+tag;            explicit const\+\_\+iterator( const std\+::string\& string )\+:                m\+\_\+string( \&string ), m\+\_\+it( string.\+begin() ) \{                try\+Parse\+Ansi\+Escapes();            \}            char operator\texorpdfstring{$\ast$}{*}() const \{ return \texorpdfstring{$\ast$}{*}m\+\_\+it; \}            const\+\_\+iterator\& operator++() \{                advance();                return \texorpdfstring{$\ast$}{*}this;            \}            const\+\_\+iterator operator++( int ) \{                iterator prev( \texorpdfstring{$\ast$}{*}this );                operator++();                return prev;            \}            const\+\_\+iterator\& operator-\/-\/() \{                unadvance();                return \texorpdfstring{$\ast$}{*}this;            \}            const\+\_\+iterator operator-\/-\/( int ) \{                iterator prev( \texorpdfstring{$\ast$}{*}this );                operator-\/-\/();                return prev;            \}            bool operator==( const\+\_\+iterator const\& other ) const \{                return m\+\_\+it == other.\+m\+\_\+it;            \}            bool operator!=( const\+\_\+iterator const\& other ) const \{                return !operator==( other );            \}            bool operator$<$=( const\+\_\+iterator const\& other ) const \{                return m\+\_\+it $<$= other.\+m\+\_\+it;            \}            const\+\_\+iterator one\+Before() const \{                auto it = \texorpdfstring{$\ast$}{*}this;                return -\/-\/it;            \}        \};                class Column \{                        Ansi\+Skipping\+String m\+\_\+string;                        size\+\_\+t m\+\_\+width = CATCH\+\_\+\+CONFIG\+\_\+\+CONSOLE\+\_\+\+WIDTH -\/ 1;                                    size\+\_\+t m\+\_\+indent = 0;                        size\+\_\+t m\+\_\+initial\+Indent = std\+::string\+::npos;        public\+:                        class const\+\_\+iterator \{                friend Column;                struct End\+Tag \{\};                Column const\& m\+\_\+column;                                Ansi\+Skipping\+String\+::const\+\_\+iterator m\+\_\+line\+Start;                                Ansi\+Skipping\+String\+::const\+\_\+iterator m\+\_\+line\+End;                                Ansi\+Skipping\+String\+::const\+\_\+iterator m\+\_\+parsed\+To;                                bool m\+\_\+add\+Hyphen = false;                const\+\_\+iterator( Column const\& column, End\+Tag )\+:                    m\+\_\+column( column ),                    m\+\_\+line\+Start( m\+\_\+column.\+m\+\_\+string.\+end() ),                    m\+\_\+line\+End( column.\+m\+\_\+string.\+end() ),                    m\+\_\+parsed\+To( column.\+m\+\_\+string.\+end() ) \{\}                                void calc\+Length();                                size\+\_\+t indent\+Size() const;                                                std\+::string add\+Indent\+And\+Suffix(                    Ansi\+Skipping\+String\+::const\+\_\+iterator start,                    Ansi\+Skipping\+String\+::const\+\_\+iterator end ) const;            public\+:                using difference\+\_\+type = std\+::ptrdiff\+\_\+t;                using value\+\_\+type = std\+::string;                using pointer = value\+\_\+type\texorpdfstring{$\ast$}{*};                using reference = value\+\_\+type\&;                using iterator\+\_\+category = std\+::forward\+\_\+iterator\+\_\+tag;                explicit const\+\_\+iterator( Column const\& column );                std\+::string operator\texorpdfstring{$\ast$}{*}() const;                const\+\_\+iterator\& operator++();                const\+\_\+iterator operator++( int );                bool operator==( const\+\_\+iterator const\& other ) const \{                    return m\+\_\+line\+Start == other.\+m\+\_\+line\+Start \&\&                           \&m\+\_\+column == \&other.\+m\+\_\+column;                \}                bool operator!=( const\+\_\+iterator const\& other ) const \{                    return !operator==( other );                \}            \};            using iterator = const\+\_\+iterator;            explicit Column( std\+::string const\& text )\+: m\+\_\+string( text ) \{\}            explicit Column( std\+::string\&\& text )\+:                m\+\_\+string( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( text ) ) \{\}            Column\& width( size\+\_\+t new\+Width ) \& \{                assert( new\+Width $>$ 0 );                m\+\_\+width = new\+Width;                return \texorpdfstring{$\ast$}{*}this;            \}            Column\&\& width( size\+\_\+t new\+Width ) \&\& \{                assert( new\+Width $>$ 0 );                m\+\_\+width = new\+Width;                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( \texorpdfstring{$\ast$}{*}this );            \}            Column\& indent( size\+\_\+t new\+Indent ) \& \{                m\+\_\+indent = new\+Indent;                return \texorpdfstring{$\ast$}{*}this;            \}            Column\&\& indent( size\+\_\+t new\+Indent ) \&\& \{                m\+\_\+indent = new\+Indent;                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( \texorpdfstring{$\ast$}{*}this );            \}            Column\& initial\+Indent( size\+\_\+t new\+Indent ) \& \{                m\+\_\+initial\+Indent = new\+Indent;                return \texorpdfstring{$\ast$}{*}this;            \}            Column\&\& initial\+Indent( size\+\_\+t new\+Indent ) \&\& \{                m\+\_\+initial\+Indent = new\+Indent;                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( \texorpdfstring{$\ast$}{*}this );            \}            size\+\_\+t width() const \{ return m\+\_\+width; \}            const\+\_\+iterator begin() const \{ return const\+\_\+iterator( \texorpdfstring{$\ast$}{*}this ); \}            const\+\_\+iterator end() const \{                return \{ \texorpdfstring{$\ast$}{*}this, const\+\_\+iterator\+::\+End\+Tag\{\} \};            \}            friend std\+::ostream\& operator$<$$<$( std\+::ostream\& os,                                             Column const\& col );            friend Columns operator+( Column const\& lhs, Column const\& rhs );            friend Columns operator+( Column\&\& lhs, Column\&\& rhs );        \};                Column Spacer( size\+\_\+t space\+Width );        class Columns \{            std\+::vector$<$Column$>$ m\+\_\+columns;        public\+:            class iterator \{                friend Columns;                struct End\+Tag \{\};                std\+::vector$<$Column$>$ const\& m\+\_\+columns;                std\+::vector$<$Column\+::const\+\_\+iterator$>$ m\+\_\+iterators;                size\+\_\+t m\+\_\+active\+Iterators;                iterator( Columns const\& columns, End\+Tag );            public\+:                using difference\+\_\+type = std\+::ptrdiff\+\_\+t;                using value\+\_\+type = std\+::string;                using pointer = value\+\_\+type\texorpdfstring{$\ast$}{*};                using reference = value\+\_\+type\&;                using iterator\+\_\+category = std\+::forward\+\_\+iterator\+\_\+tag;                explicit iterator( Columns const\& columns );                auto operator==( iterator const\& other ) const -\/$>$ bool \{                    return m\+\_\+iterators == other.\+m\+\_\+iterators;                \}                auto operator!=( iterator const\& other ) const -\/$>$ bool \{                    return m\+\_\+iterators != other.\+m\+\_\+iterators;                \}                std\+::string operator\texorpdfstring{$\ast$}{*}() const;                iterator\& operator++();                iterator operator++( int );            \};            using const\+\_\+iterator = iterator;            iterator begin() const \{ return iterator( \texorpdfstring{$\ast$}{*}this ); \}            iterator end() const \{ return \{ \texorpdfstring{$\ast$}{*}this, iterator\+::\+End\+Tag() \}; \}            friend Columns\& operator+=( Columns\& lhs, Column const\& rhs );            friend Columns\& operator+=( Columns\& lhs, Column\&\& rhs );            friend Columns operator+( Columns const\& lhs, Column const\& rhs );            friend Columns operator+( Columns\&\& lhs, Column\&\& rhs );            friend std\+::ostream\& operator$<$$<$( std\+::ostream\& os,                                             Columns const\& cols );        \};    \} \} \#endif \#ifndef CATCH\+\_\+\+TO\+\_\+\+STRING\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+TO\+\_\+\+STRING\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{    template $<$typename T$>$    std\+::string to\+\_\+string(T const\& t) \{\#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+CPP11\+\_\+\+TO\+\_\+\+STRING)        return std\+::to\+\_\+string(t);\#else        Reusable\+String\+Stream rss;        rss $<$$<$ t;        return rss.\+str();\#endif    \}\} \#endif \#ifndef CATCH\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+UNCAUGHT\+\_\+\+EXCEPTIONS\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    bool uncaught\+\_\+exceptions();\} \#endif \#ifndef CATCH\+\_\+\+XMLWRITER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+XMLWRITER\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iosfwd$>$\#include $<$vector$>$\#include $<$cstdint$>$namespace Catch \{    enum class Xml\+Formatting \+: std\+::uint8\+\_\+t \{        None = 0x00,        Indent = 0x01,        Newline = 0x02,    \};    constexpr Xml\+Formatting operator\texorpdfstring{$\vert$}{|}( Xml\+Formatting lhs, Xml\+Formatting rhs ) \{        return static\+\_\+cast$<$Xml\+Formatting$>$( static\+\_\+cast$<$std\+::uint8\+\_\+t$>$( lhs ) \texorpdfstring{$\vert$}{|}                                           static\+\_\+cast$<$std\+::uint8\+\_\+t$>$( rhs ) );    \}    constexpr Xml\+Formatting operator\&( Xml\+Formatting lhs, Xml\+Formatting rhs ) \{        return static\+\_\+cast$<$Xml\+Formatting$>$( static\+\_\+cast$<$std\+::uint8\+\_\+t$>$( lhs ) \&                                           static\+\_\+cast$<$std\+::uint8\+\_\+t$>$( rhs ) );    \}        class Xml\+Encode \{    public\+:        enum For\+What \{ For\+Text\+Nodes, For\+Attributes \};        constexpr Xml\+Encode( String\+Ref str, For\+What for\+What = For\+Text\+Nodes )\+:            m\+\_\+str( str ), m\+\_\+for\+What( for\+What ) \{\}        void encode\+To( std\+::ostream\& os ) const;        friend std\+::ostream\& operator $<$$<$ ( std\+::ostream\& os, Xml\+Encode const\& xml\+Encode );    private\+:        String\+Ref m\+\_\+str;        For\+What m\+\_\+for\+What;    \};    class Xml\+Writer \{    public\+:        class Scoped\+Element \{        public\+:            Scoped\+Element( Xml\+Writer\texorpdfstring{$\ast$}{*} writer, Xml\+Formatting fmt );            Scoped\+Element( Scoped\+Element\&\& other ) noexcept;            Scoped\+Element\& operator=( Scoped\+Element\&\& other ) noexcept;            \texorpdfstring{$\sim$}{\string~}Scoped\+Element();            Scoped\+Element\&            write\+Text( String\+Ref text,                       Xml\+Formatting fmt = Xml\+Formatting\+::\+Newline \texorpdfstring{$\vert$}{|}                                           Xml\+Formatting\+::\+Indent );            Scoped\+Element\& write\+Attribute( String\+Ref name,                                           String\+Ref attribute );            template $<$typename T,                                                                                                              typename = typename std\+::enable\+\_\+if\+\_\+t$<$                          !std\+::is\+\_\+convertible$<$T, String\+Ref$>$\+::value$>$$>$            Scoped\+Element\& write\+Attribute( String\+Ref name,                                           T const\& attribute ) \{                m\+\_\+writer-\/$>$write\+Attribute( name, attribute );                return \texorpdfstring{$\ast$}{*}this;            \}        private\+:            Xml\+Writer\texorpdfstring{$\ast$}{*} m\+\_\+writer = nullptr;            Xml\+Formatting m\+\_\+fmt;        \};        Xml\+Writer( std\+::ostream\& os );        \texorpdfstring{$\sim$}{\string~}Xml\+Writer();        Xml\+Writer( Xml\+Writer const\& ) = delete;        Xml\+Writer\& operator=( Xml\+Writer const\& ) = delete;        Xml\+Writer\& start\+Element( std\+::string const\& name, Xml\+Formatting fmt = Xml\+Formatting\+::\+Newline \texorpdfstring{$\vert$}{|} Xml\+Formatting\+::\+Indent);        Scoped\+Element scoped\+Element( std\+::string const\& name, Xml\+Formatting fmt = Xml\+Formatting\+::\+Newline \texorpdfstring{$\vert$}{|} Xml\+Formatting\+::\+Indent);        Xml\+Writer\& end\+Element(Xml\+Formatting fmt = Xml\+Formatting\+::\+Newline \texorpdfstring{$\vert$}{|} Xml\+Formatting\+::\+Indent);                Xml\+Writer\& write\+Attribute( String\+Ref name, String\+Ref attribute );                Xml\+Writer\& write\+Attribute( String\+Ref name, bool attribute );                Xml\+Writer\& write\+Attribute( String\+Ref name, char const\texorpdfstring{$\ast$}{*} attribute );                        template $<$typename T,                                                                                          typename = typename std\+::enable\+\_\+if\+\_\+t$<$                      !std\+::is\+\_\+convertible$<$T, String\+Ref$>$\+::value$>$$>$        Xml\+Writer\& write\+Attribute( String\+Ref name, T const\& attribute ) \{            Reusable\+String\+Stream rss;            rss $<$$<$ attribute;            return write\+Attribute( name, rss.\+str() );        \}                Xml\+Writer\& write\+Text( String\+Ref text,                              Xml\+Formatting fmt = Xml\+Formatting\+::\+Newline \texorpdfstring{$\vert$}{|}                                                  Xml\+Formatting\+::\+Indent );                Xml\+Writer\& write\+Comment( String\+Ref text,                                 Xml\+Formatting fmt = Xml\+Formatting\+::\+Newline \texorpdfstring{$\vert$}{|}                                                     Xml\+Formatting\+::\+Indent );        void write\+Stylesheet\+Ref( String\+Ref url );        void ensure\+Tag\+Closed();    private\+:        void apply\+Formatting(Xml\+Formatting fmt);        void write\+Declaration();        void newline\+If\+Necessary();        bool m\+\_\+tag\+Is\+Open = false;        bool m\+\_\+needs\+Newline = false;        std\+::vector$<$std\+::string$>$ m\+\_\+tags;        std\+::string m\+\_\+indent;        std\+::ostream\& m\+\_\+os;    \};\}\#endif \#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+IMPL\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+IMPL\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{\#ifdef \+\_\+\+\_\+clang\+\_\+\+\_\+\#    pragma clang diagnostic push\#    pragma clang diagnostic ignored "{}-\/Wsign-\/compare"{}\#    pragma clang diagnostic ignored "{}-\/Wnon-\/virtual-\/dtor"{}\#elif defined \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+\#    pragma GCC diagnostic push\#    pragma GCC diagnostic ignored "{}-\/Wsign-\/compare"{}\#    pragma GCC diagnostic ignored "{}-\/Wnon-\/virtual-\/dtor"{}\#endif    template$<$typename ArgT, typename MatcherT$>$    class Match\+Expr \+: public ITransient\+Expression \{        ArgT \&\& m\+\_\+arg;        MatcherT const\& m\+\_\+matcher;    public\+:        constexpr Match\+Expr( ArgT \&\& arg, MatcherT const\& matcher )        \+:   ITransient\+Expression\{ true, matcher.\+match( arg ) \},             m\+\_\+arg( \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(arg) ),            m\+\_\+matcher( matcher )        \{\}        void stream\+Reconstructed\+Expression( std\+::ostream\& os ) const override \{            os $<$$<$ Catch\+::\+Detail\+::stringify( m\+\_\+arg )               $<$$<$ \textquotesingle{} \textquotesingle{}               $<$$<$ m\+\_\+matcher.\+to\+String();        \}    \};\#ifdef \+\_\+\+\_\+clang\+\_\+\+\_\+\#    pragma clang diagnostic pop\#elif defined \+\_\+\+\_\+\+GNUC\+\_\+\+\_\+\#    pragma GCC diagnostic pop\#endif    namespace Matchers \{        template $<$typename ArgT$>$        class Matcher\+Base;    \}    using String\+Matcher = Matchers\+::\+Matcher\+Base$<$std\+::string$>$;    void handle\+Exception\+Match\+Expr( Assertion\+Handler\& handler, String\+Matcher const\& matcher );    template$<$typename ArgT, typename MatcherT$>$    constexpr Match\+Expr$<$ArgT, MatcherT$>$    make\+Match\+Expr( ArgT\&\& arg, MatcherT const\& matcher ) \{        return Match\+Expr$<$ArgT, MatcherT$>$( \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(arg), matcher );    \}\} \#define INTERNAL\+\_\+\+CHECK\+\_\+\+THAT( macro\+Name, matcher, result\+Disposition, arg ) \textbackslash{}    do \{ \textbackslash{}        \mbox{\hyperlink{classCatch_1_1AssertionHandler}{Catch\+::\+Assertion\+Handler}} catch\+Assertion\+Handler( macro\+Name\#\#\+\_\+catch\+\_\+sr, CATCH\+\_\+\+INTERNAL\+\_\+\+LINEINFO, CATCH\+\_\+\+INTERNAL\+\_\+\+STRINGIFY(arg) "{}, "{} CATCH\+\_\+\+INTERNAL\+\_\+\+STRINGIFY(matcher), result\+Disposition ); \textbackslash{}        INTERNAL\+\_\+\+CATCH\+\_\+\+TRY \{ \textbackslash{}            catch\+Assertion\+Handler.\+handle\+Expr( Catch\+::make\+Match\+Expr( arg, matcher ) ); \textbackslash{}        \} INTERNAL\+\_\+\+CATCH\+\_\+\+CATCH( catch\+Assertion\+Handler ) \textbackslash{}        catch\+Assertion\+Handler.\+complete(); \textbackslash{}    \} while( false )\#define INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+MATCHES( macro\+Name, exception\+Type, result\+Disposition, matcher, ... ) \textbackslash{}    do \{ \textbackslash{}        \mbox{\hyperlink{classCatch_1_1AssertionHandler}{Catch\+::\+Assertion\+Handler}} catch\+Assertion\+Handler( macro\+Name\#\#\+\_\+catch\+\_\+sr, CATCH\+\_\+\+INTERNAL\+\_\+\+LINEINFO, CATCH\+\_\+\+INTERNAL\+\_\+\+STRINGIFY(\+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+) "{}, "{} CATCH\+\_\+\+INTERNAL\+\_\+\+STRINGIFY(exception\+Type) "{}, "{} CATCH\+\_\+\+INTERNAL\+\_\+\+STRINGIFY(matcher), result\+Disposition ); \textbackslash{}        if( catch\+Assertion\+Handler.\+allow\+Throws() ) \textbackslash{}            try \{ \textbackslash{}                CATCH\+\_\+\+INTERNAL\+\_\+\+START\+\_\+\+WARNINGS\+\_\+\+SUPPRESSION \textbackslash{}                CATCH\+\_\+\+INTERNAL\+\_\+\+SUPPRESS\+\_\+\+USELESS\+\_\+\+CAST\+\_\+\+WARNINGS \textbackslash{}                static\+\_\+cast$<$void$>$(\+\_\+\+\_\+\+VA\+\_\+\+ARGS\+\_\+\+\_\+ ); \textbackslash{}                CATCH\+\_\+\+INTERNAL\+\_\+\+STOP\+\_\+\+WARNINGS\+\_\+\+SUPPRESSION \textbackslash{}                catch\+Assertion\+Handler.\+handle\+Unexpected\+Exception\+Not\+Thrown(); \textbackslash{}            \} \textbackslash{}            catch( exception\+Type const\& ex ) \{ \textbackslash{}                catch\+Assertion\+Handler.\+handle\+Expr( Catch\+::make\+Match\+Expr( ex, matcher ) ); \textbackslash{}            \} \textbackslash{}            catch( ... ) \{ \textbackslash{}                catch\+Assertion\+Handler.\+handle\+Unexpected\+Inflight\+Exception(); \textbackslash{}            \} \textbackslash{}        else \textbackslash{}            catch\+Assertion\+Handler.\+handle\+Throwing\+Call\+Skipped(); \textbackslash{}        catch\+Assertion\+Handler.\+complete(); \textbackslash{}    \} while( false )\#endif \#include $<$string$>$\#include $<$vector$>$namespace Catch \{namespace Matchers \{    class Matcher\+Untyped\+Base \{    public\+:        Matcher\+Untyped\+Base() = default;        Matcher\+Untyped\+Base(Matcher\+Untyped\+Base const\&) = default;        Matcher\+Untyped\+Base(Matcher\+Untyped\+Base\&\&) = default;        Matcher\+Untyped\+Base\& operator = (Matcher\+Untyped\+Base const\&) = delete;        Matcher\+Untyped\+Base\& operator = (Matcher\+Untyped\+Base\&\&) = delete;        std\+::string to\+String() const;    protected\+:        virtual \texorpdfstring{$\sim$}{\string~}Matcher\+Untyped\+Base();         virtual std\+::string describe() const = 0;        mutable std\+::string m\+\_\+cached\+To\+String;    \};    template$<$typename T$>$    class Matcher\+Base \+: public Matcher\+Untyped\+Base \{    public\+:        virtual bool match( T const\& arg ) const = 0;    \};    namespace Detail \{        template$<$typename ArgT$>$        class Match\+All\+Of final \+: public Matcher\+Base$<$ArgT$>$ \{            std\+::vector$<$Matcher\+Base$<$ArgT$>$ const\texorpdfstring{$\ast$}{*}$>$ m\+\_\+matchers;        public\+:            Match\+All\+Of() = default;            Match\+All\+Of(Match\+All\+Of const\&) = delete;            Match\+All\+Of\& operator=(Match\+All\+Of const\&) = delete;            Match\+All\+Of(Match\+All\+Of\&\&) = default;            Match\+All\+Of\& operator=(Match\+All\+Of\&\&) = default;            bool match( ArgT const\& arg ) const override \{                for( auto matcher \+: m\+\_\+matchers ) \{                    if (!matcher-\/$>$match(arg))                        return false;                \}                return true;            \}            std\+::string describe() const override \{                std\+::string description;                description.\+reserve( 4 + m\+\_\+matchers.\+size()\texorpdfstring{$\ast$}{*}32 );                description += "{}( "{};                bool first = true;                for( auto matcher \+: m\+\_\+matchers ) \{                    if( first )                        first = false;                    else                        description += "{} and "{};                    description += matcher-\/$>$to\+String();                \}                description += "{} )"{};                return description;            \}            friend Match\+All\+Of operator\&\& (Match\+All\+Of\&\& lhs, Matcher\+Base$<$ArgT$>$ const\& rhs) \{                lhs.\+m\+\_\+matchers.\+push\+\_\+back(\&rhs);                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(lhs);            \}            friend Match\+All\+Of operator\&\& (Matcher\+Base$<$ArgT$>$ const\& lhs, Match\+All\+Of\&\& rhs) \{                rhs.\+m\+\_\+matchers.\+insert(rhs.\+m\+\_\+matchers.\+begin(), \&lhs);                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(rhs);            \}        \};                        template$<$typename ArgT$>$        Match\+All\+Of$<$ArgT$>$ operator\&\& (Match\+All\+Of$<$ArgT$>$ const\& lhs, Matcher\+Base$<$ArgT$>$ const\& rhs) = delete;                        template$<$typename ArgT$>$        Match\+All\+Of$<$ArgT$>$ operator\&\& (Matcher\+Base$<$ArgT$>$ const\& lhs, Match\+All\+Of$<$ArgT$>$ const\& rhs) = delete;        template$<$typename ArgT$>$        class Match\+Any\+Of final \+: public Matcher\+Base$<$ArgT$>$ \{            std\+::vector$<$Matcher\+Base$<$ArgT$>$ const\texorpdfstring{$\ast$}{*}$>$ m\+\_\+matchers;        public\+:            Match\+Any\+Of() = default;            Match\+Any\+Of(Match\+Any\+Of const\&) = delete;            Match\+Any\+Of\& operator=(Match\+Any\+Of const\&) = delete;            Match\+Any\+Of(Match\+Any\+Of\&\&) = default;            Match\+Any\+Of\& operator=(Match\+Any\+Of\&\&) = default;            bool match( ArgT const\& arg ) const override \{                for( auto matcher \+: m\+\_\+matchers ) \{                    if (matcher-\/$>$match(arg))                        return true;                \}                return false;            \}            std\+::string describe() const override \{                std\+::string description;                description.\+reserve( 4 + m\+\_\+matchers.\+size()\texorpdfstring{$\ast$}{*}32 );                description += "{}( "{};                bool first = true;                for( auto matcher \+: m\+\_\+matchers ) \{                    if( first )                        first = false;                    else                        description += "{} or "{};                    description += matcher-\/$>$to\+String();                \}                description += "{} )"{};                return description;            \}            friend Match\+Any\+Of operator\texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Match\+Any\+Of\&\& lhs, Matcher\+Base$<$ArgT$>$ const\& rhs) \{                lhs.\+m\+\_\+matchers.\+push\+\_\+back(\&rhs);                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(lhs);            \}            friend Match\+Any\+Of operator\texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Matcher\+Base$<$ArgT$>$ const\& lhs, Match\+Any\+Of\&\& rhs) \{                rhs.\+m\+\_\+matchers.\+insert(rhs.\+m\+\_\+matchers.\+begin(), \&lhs);                return \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(rhs);            \}        \};                        template$<$typename ArgT$>$        Match\+Any\+Of$<$ArgT$>$ operator\texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Match\+Any\+Of$<$ArgT$>$ const\& lhs, Matcher\+Base$<$ArgT$>$ const\& rhs) = delete;                        template$<$typename ArgT$>$        Match\+Any\+Of$<$ArgT$>$ operator\texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Matcher\+Base$<$ArgT$>$ const\& lhs, Match\+Any\+Of$<$ArgT$>$ const\& rhs) = delete;        template$<$typename ArgT$>$        class Match\+Not\+Of final \+: public Matcher\+Base$<$ArgT$>$ \{            Matcher\+Base$<$ArgT$>$ const\& m\+\_\+underlying\+Matcher;        public\+:            explicit Match\+Not\+Of( Matcher\+Base$<$ArgT$>$ const\& underlying\+Matcher )\+:                m\+\_\+underlying\+Matcher( underlying\+Matcher )            \{\}            bool match( ArgT const\& arg ) const override \{                return !m\+\_\+underlying\+Matcher.\+match( arg );            \}            std\+::string describe() const override \{                return "{}not "{} + m\+\_\+underlying\+Matcher.\+to\+String();            \}        \};    \}     template $<$typename T$>$    Detail\+::\+Match\+All\+Of$<$T$>$ operator\&\& (Matcher\+Base$<$T$>$ const\& lhs, Matcher\+Base$<$T$>$ const\& rhs) \{        return Detail\+::\+Match\+All\+Of$<$T$>$\{\} \&\& lhs \&\& rhs;    \}    template $<$typename T$>$    Detail\+::\+Match\+Any\+Of$<$T$>$ operator\texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Matcher\+Base$<$T$>$ const\& lhs, Matcher\+Base$<$T$>$ const\& rhs) \{        return Detail\+::\+Match\+Any\+Of$<$T$>$\{\} \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} lhs \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} rhs;    \}    template $<$typename T$>$    Detail\+::\+Match\+Not\+Of$<$T$>$ operator! (Matcher\+Base$<$T$>$ const\& matcher) \{        return Detail\+::\+Match\+Not\+Of$<$T$>$\{ matcher \};    \}\} \} \#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+PREFIX\+\_\+\+ALL) \&\& !defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE)  \#define CATCH\+\_\+\+REQUIRE\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+STR\+\_\+\+MATCHES( "{}CATCH\+\_\+\+REQUIRE\+\_\+\+THROWS\+\_\+\+WITH"{}, Catch\+::\+Result\+Disposition\+::\+Normal, matcher, expr )  \#define CATCH\+\_\+\+REQUIRE\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+MATCHES( "{}CATCH\+\_\+\+REQUIRE\+\_\+\+THROWS\+\_\+\+MATCHES"{}, exception\+Type, Catch\+::\+Result\+Disposition\+::\+Normal, matcher, expr )  \#define CATCH\+\_\+\+CHECK\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+STR\+\_\+\+MATCHES( "{}CATCH\+\_\+\+CHECK\+\_\+\+THROWS\+\_\+\+WITH"{}, Catch\+::\+Result\+Disposition\+::\+Continue\+On\+Failure, matcher, expr )  \#define CATCH\+\_\+\+CHECK\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+MATCHES( "{}CATCH\+\_\+\+CHECK\+\_\+\+THROWS\+\_\+\+MATCHES"{}, exception\+Type, Catch\+::\+Result\+Disposition\+::\+Continue\+On\+Failure, matcher, expr )  \#define CATCH\+\_\+\+CHECK\+\_\+\+THAT( arg, matcher ) INTERNAL\+\_\+\+CHECK\+\_\+\+THAT( "{}CATCH\+\_\+\+CHECK\+\_\+\+THAT"{}, matcher, Catch\+::\+Result\+Disposition\+::\+Continue\+On\+Failure, arg )  \#define CATCH\+\_\+\+REQUIRE\+\_\+\+THAT( arg, matcher ) INTERNAL\+\_\+\+CHECK\+\_\+\+THAT( "{}CATCH\+\_\+\+REQUIRE\+\_\+\+THAT"{}, matcher, Catch\+::\+Result\+Disposition\+::\+Normal, arg )\#elif defined(CATCH\+\_\+\+CONFIG\+\_\+\+PREFIX\+\_\+\+ALL) \&\& defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE)  \#define CATCH\+\_\+\+REQUIRE\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher )                   (void)(0)  \#define CATCH\+\_\+\+REQUIRE\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher ) (void)(0)  \#define CATCH\+\_\+\+CHECK\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher )                     (void)(0)  \#define CATCH\+\_\+\+CHECK\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher )   (void)(0)  \#define CATCH\+\_\+\+CHECK\+\_\+\+THAT( arg, matcher )                             (void)(0)  \#define CATCH\+\_\+\+REQUIRE\+\_\+\+THAT( arg, matcher )                           (void)(0)\#elif !defined(CATCH\+\_\+\+CONFIG\+\_\+\+PREFIX\+\_\+\+ALL) \&\& !defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE)  \#define REQUIRE\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+STR\+\_\+\+MATCHES( "{}REQUIRE\+\_\+\+THROWS\+\_\+\+WITH"{}, Catch\+::\+Result\+Disposition\+::\+Normal, matcher, expr )  \#define REQUIRE\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+MATCHES( "{}REQUIRE\+\_\+\+THROWS\+\_\+\+MATCHES"{}, exception\+Type, Catch\+::\+Result\+Disposition\+::\+Normal, matcher, expr )  \#define CHECK\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+STR\+\_\+\+MATCHES( "{}CHECK\+\_\+\+THROWS\+\_\+\+WITH"{}, Catch\+::\+Result\+Disposition\+::\+Continue\+On\+Failure, matcher, expr )  \#define CHECK\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher ) INTERNAL\+\_\+\+CATCH\+\_\+\+THROWS\+\_\+\+MATCHES( "{}CHECK\+\_\+\+THROWS\+\_\+\+MATCHES"{}, exception\+Type, Catch\+::\+Result\+Disposition\+::\+Continue\+On\+Failure, matcher, expr )  \#define CHECK\+\_\+\+THAT( arg, matcher ) INTERNAL\+\_\+\+CHECK\+\_\+\+THAT( "{}CHECK\+\_\+\+THAT"{}, matcher, Catch\+::\+Result\+Disposition\+::\+Continue\+On\+Failure, arg )  \#define REQUIRE\+\_\+\+THAT( arg, matcher ) INTERNAL\+\_\+\+CHECK\+\_\+\+THAT( "{}REQUIRE\+\_\+\+THAT"{}, matcher, Catch\+::\+Result\+Disposition\+::\+Normal, arg )\#elif !defined(CATCH\+\_\+\+CONFIG\+\_\+\+PREFIX\+\_\+\+ALL) \&\& defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE)  \#define REQUIRE\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher )                   (void)(0)  \#define REQUIRE\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher ) (void)(0)  \#define CHECK\+\_\+\+THROWS\+\_\+\+WITH( expr, matcher )                     (void)(0)  \#define CHECK\+\_\+\+THROWS\+\_\+\+MATCHES( expr, exception\+Type, matcher )   (void)(0)  \#define CHECK\+\_\+\+THAT( arg, matcher )                             (void)(0)  \#define REQUIRE\+\_\+\+THAT( arg, matcher )                           (void)(0)\#endif \#endif \#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+CONTAINER\+\_\+\+PROPERTIES\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+CONTAINER\+\_\+\+PROPERTIES\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+TEMPLATED\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+TEMPLATED\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$array$>$\#include $<$algorithm$>$\#include $<$string$>$\#include $<$type\+\_\+traits$>$namespace Catch \{namespace Matchers \{    class Matcher\+Generic\+Base \+: public Matcher\+Untyped\+Base \{    public\+:        Matcher\+Generic\+Base() = default;        \texorpdfstring{$\sim$}{\string~}Matcher\+Generic\+Base() override;         Matcher\+Generic\+Base(Matcher\+Generic\+Base const\&) = default;        Matcher\+Generic\+Base(Matcher\+Generic\+Base\&\&) = default;        Matcher\+Generic\+Base\& operator=(Matcher\+Generic\+Base const\&) = delete;        Matcher\+Generic\+Base\& operator=(Matcher\+Generic\+Base\&\&) = delete;    \};    namespace Detail \{        template$<$std\+::size\+\_\+t N, std\+::size\+\_\+t M$>$        std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N + M$>$ array\+\_\+cat(std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ \&\& lhs, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, M$>$ \&\& rhs) \{            std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N + M$>$ arr\{\};            std\+::copy\+\_\+n(lhs.\+begin(), N, arr.\+begin());            std\+::copy\+\_\+n(rhs.\+begin(), M, arr.\+begin() + N);            return arr;        \}        template$<$std\+::size\+\_\+t N$>$        std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N+1$>$ array\+\_\+cat(std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ \&\& lhs, void const\texorpdfstring{$\ast$}{*} rhs) \{            std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N+1$>$ arr\{\};            std\+::copy\+\_\+n(lhs.\+begin(), N, arr.\+begin());            arr\mbox{[}N\mbox{]} = rhs;            return arr;        \}        template$<$std\+::size\+\_\+t N$>$        std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N+1$>$ array\+\_\+cat(void const\texorpdfstring{$\ast$}{*} lhs, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ \&\& rhs) \{            std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N + 1$>$ arr\{ \{lhs\} \};            std\+::copy\+\_\+n(rhs.\+begin(), N, arr.\+begin() + 1);            return arr;        \}        template$<$typename T$>$        static constexpr bool is\+\_\+generic\+\_\+matcher\+\_\+v = std\+::is\+\_\+base\+\_\+of$<$            Catch\+::\+Matchers\+::\+Matcher\+Generic\+Base,            std\+::remove\+\_\+cv\+\_\+t$<$std\+::remove\+\_\+reference\+\_\+t$<$T$>$$>$        $>$\+::value;        template$<$typename... Ts$>$        static constexpr bool are\+\_\+generic\+\_\+matchers\+\_\+v = \mbox{\hyperlink{structCatch_1_1Detail_1_1conjunction}{Catch\+::\+Detail\+::conjunction}}$<$std\+::integral\+\_\+constant$<$bool,is\+\_\+generic\+\_\+matcher\+\_\+v$<$Ts$>$$>$...$>$\+::value;        template$<$typename T$>$        static constexpr bool is\+\_\+matcher\+\_\+v = std\+::is\+\_\+base\+\_\+of$<$            Catch\+::\+Matchers\+::\+Matcher\+Untyped\+Base,            std\+::remove\+\_\+cv\+\_\+t$<$std\+::remove\+\_\+reference\+\_\+t$<$T$>$$>$        $>$\+::value;        template$<$std\+::size\+\_\+t N, typename Arg$>$        bool match\+\_\+all\+\_\+of(Arg\&\&, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ const\&, std\+::index\+\_\+sequence$<$$>$) \{            return true;        \}        template$<$typename T, typename... Matcher\+Ts, std\+::size\+\_\+t N, typename Arg, std\+::size\+\_\+t Idx, std\+::size\+\_\+t... Indices$>$        bool match\+\_\+all\+\_\+of(Arg\&\& arg, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ const\& matchers, std\+::index\+\_\+sequence$<$Idx, Indices...$>$) \{            return static\+\_\+cast$<$T const\texorpdfstring{$\ast$}{*}$>$(matchers\mbox{[}Idx\mbox{]})-\/$>$match(arg) \&\& match\+\_\+all\+\_\+of$<$Matcher\+Ts...$>$(arg, matchers, std\+::index\+\_\+sequence$<$Indices...$>$\{\});        \}        template$<$std\+::size\+\_\+t N, typename Arg$>$        bool match\+\_\+any\+\_\+of(Arg\&\&, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ const\&, std\+::index\+\_\+sequence$<$$>$) \{            return false;        \}        template$<$typename T, typename... Matcher\+Ts, std\+::size\+\_\+t N, typename Arg, std\+::size\+\_\+t Idx, std\+::size\+\_\+t... Indices$>$        bool match\+\_\+any\+\_\+of(Arg\&\& arg, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, N$>$ const\& matchers, std\+::index\+\_\+sequence$<$Idx, Indices...$>$) \{            return static\+\_\+cast$<$T const\texorpdfstring{$\ast$}{*}$>$(matchers\mbox{[}Idx\mbox{]})-\/$>$match(arg) \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} match\+\_\+any\+\_\+of$<$Matcher\+Ts...$>$(arg, matchers, std\+::index\+\_\+sequence$<$Indices...$>$\{\});        \}        std\+::string describe\+\_\+multi\+\_\+matcher(String\+Ref combine, std\+::string const\texorpdfstring{$\ast$}{*} descriptions\+\_\+begin, std\+::string const\texorpdfstring{$\ast$}{*} descriptions\+\_\+end);        template$<$typename... Matcher\+Ts, std\+::size\+\_\+t... Idx$>$        std\+::string describe\+\_\+multi\+\_\+matcher(String\+Ref combine, std\+::array$<$void const\texorpdfstring{$\ast$}{*}, sizeof...(Matcher\+Ts)$>$ const\& matchers, std\+::index\+\_\+sequence$<$Idx...$>$) \{            std\+::array$<$std\+::string, sizeof...(Matcher\+Ts)$>$ descriptions \{\{                static\+\_\+cast$<$Matcher\+Ts const\texorpdfstring{$\ast$}{*}$>$(matchers\mbox{[}Idx\mbox{]})-\/$>$to\+String()...            \}\};            return describe\+\_\+multi\+\_\+matcher(combine, descriptions.\+data(), descriptions.\+data() + descriptions.\+size());        \}        template$<$typename... Matcher\+Ts$>$        class Match\+All\+Of\+Generic final \+: public Matcher\+Generic\+Base \{        public\+:            Match\+All\+Of\+Generic(Match\+All\+Of\+Generic const\&) = delete;            Match\+All\+Of\+Generic\& operator=(Match\+All\+Of\+Generic const\&) = delete;            Match\+All\+Of\+Generic(Match\+All\+Of\+Generic\&\&) = default;            Match\+All\+Of\+Generic\& operator=(Match\+All\+Of\+Generic\&\&) = default;            Match\+All\+Of\+Generic(Matcher\+Ts const\&... matchers) \+: m\+\_\+matchers\{ \{std\+::addressof(matchers)...\} \} \{\}            explicit Match\+All\+Of\+Generic(std\+::array$<$void const\texorpdfstring{$\ast$}{*}, sizeof...(Matcher\+Ts)$>$ matchers) \+: m\+\_\+matchers\{matchers\} \{\}            template$<$typename Arg$>$            bool match(Arg\&\& arg) const \{                return match\+\_\+all\+\_\+of$<$Matcher\+Ts...$>$(arg, m\+\_\+matchers, std\+::index\+\_\+sequence\+\_\+for$<$Matcher\+Ts...$>$\{\});            \}            std\+::string describe() const override \{                return describe\+\_\+multi\+\_\+matcher$<$Matcher\+Ts...$>$("{} and "{}\+\_\+sr, m\+\_\+matchers, std\+::index\+\_\+sequence\+\_\+for$<$Matcher\+Ts...$>$\{\});            \}                                                std\+::array$<$void const\texorpdfstring{$\ast$}{*}, sizeof...( Matcher\+Ts )$>$ m\+\_\+matchers;                        template$<$typename... Matchers\+RHS$>$            friend            Match\+All\+Of\+Generic$<$Matcher\+Ts..., Matchers\+RHS...$>$ operator \&\& (                    Match\+All\+Of\+Generic$<$Matcher\+Ts...$>$\&\& lhs,                    Match\+All\+Of\+Generic$<$Matchers\+RHS...$>$\&\& rhs) \{                return Match\+All\+Of\+Generic$<$Matcher\+Ts..., Matchers\+RHS...$>$\{array\+\_\+cat(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(lhs.\+m\+\_\+matchers), \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(rhs.\+m\+\_\+matchers))\};            \}                        template$<$typename Matcher\+RHS$>$            friend std\+::enable\+\_\+if\+\_\+t$<$is\+\_\+matcher\+\_\+v$<$Matcher\+RHS$>$,            Match\+All\+Of\+Generic$<$Matcher\+Ts..., Matcher\+RHS$>$$>$ operator \&\& (                    Match\+All\+Of\+Generic$<$Matcher\+Ts...$>$\&\& lhs,                    Matcher\+RHS const\& rhs) \{                return Match\+All\+Of\+Generic$<$Matcher\+Ts..., Matcher\+RHS$>$\{array\+\_\+cat(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(lhs.\+m\+\_\+matchers), static\+\_\+cast$<$void const\texorpdfstring{$\ast$}{*}$>$(\&rhs))\};            \}                        template$<$typename Matcher\+LHS$>$            friend std\+::enable\+\_\+if\+\_\+t$<$is\+\_\+matcher\+\_\+v$<$Matcher\+LHS$>$,            Match\+All\+Of\+Generic$<$Matcher\+LHS, Matcher\+Ts...$>$$>$ operator \&\& (                    Matcher\+LHS const\& lhs,                    Match\+All\+Of\+Generic$<$Matcher\+Ts...$>$\&\& rhs) \{                return Match\+All\+Of\+Generic$<$Matcher\+LHS, Matcher\+Ts...$>$\{array\+\_\+cat(static\+\_\+cast$<$void const\texorpdfstring{$\ast$}{*}$>$(std\+::addressof(lhs)), \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(rhs.\+m\+\_\+matchers))\};            \}        \};        template$<$typename... Matcher\+Ts$>$        class Match\+Any\+Of\+Generic final \+: public Matcher\+Generic\+Base \{        public\+:            Match\+Any\+Of\+Generic(Match\+Any\+Of\+Generic const\&) = delete;            Match\+Any\+Of\+Generic\& operator=(Match\+Any\+Of\+Generic const\&) = delete;            Match\+Any\+Of\+Generic(Match\+Any\+Of\+Generic\&\&) = default;            Match\+Any\+Of\+Generic\& operator=(Match\+Any\+Of\+Generic\&\&) = default;            Match\+Any\+Of\+Generic(Matcher\+Ts const\&... matchers) \+: m\+\_\+matchers\{ \{std\+::addressof(matchers)...\} \} \{\}            explicit Match\+Any\+Of\+Generic(std\+::array$<$void const\texorpdfstring{$\ast$}{*}, sizeof...(Matcher\+Ts)$>$ matchers) \+: m\+\_\+matchers\{matchers\} \{\}            template$<$typename Arg$>$            bool match(Arg\&\& arg) const \{                return match\+\_\+any\+\_\+of$<$Matcher\+Ts...$>$(arg, m\+\_\+matchers, std\+::index\+\_\+sequence\+\_\+for$<$Matcher\+Ts...$>$\{\});            \}            std\+::string describe() const override \{                return describe\+\_\+multi\+\_\+matcher$<$Matcher\+Ts...$>$("{} or "{}\+\_\+sr, m\+\_\+matchers, std\+::index\+\_\+sequence\+\_\+for$<$Matcher\+Ts...$>$\{\});            \}                                                std\+::array$<$void const\texorpdfstring{$\ast$}{*}, sizeof...( Matcher\+Ts )$>$ m\+\_\+matchers;                        template$<$typename... Matchers\+RHS$>$            friend Match\+Any\+Of\+Generic$<$Matcher\+Ts..., Matchers\+RHS...$>$ operator \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (                    Match\+Any\+Of\+Generic$<$Matcher\+Ts...$>$\&\& lhs,                    Match\+Any\+Of\+Generic$<$Matchers\+RHS...$>$\&\& rhs) \{                return Match\+Any\+Of\+Generic$<$Matcher\+Ts..., Matchers\+RHS...$>$\{array\+\_\+cat(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(lhs.\+m\+\_\+matchers), \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(rhs.\+m\+\_\+matchers))\};            \}                        template$<$typename Matcher\+RHS$>$            friend std\+::enable\+\_\+if\+\_\+t$<$is\+\_\+matcher\+\_\+v$<$Matcher\+RHS$>$,            Match\+Any\+Of\+Generic$<$Matcher\+Ts..., Matcher\+RHS$>$$>$ operator \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (                    Match\+Any\+Of\+Generic$<$Matcher\+Ts...$>$\&\& lhs,                    Matcher\+RHS const\& rhs) \{                return Match\+Any\+Of\+Generic$<$Matcher\+Ts..., Matcher\+RHS$>$\{array\+\_\+cat(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(lhs.\+m\+\_\+matchers), static\+\_\+cast$<$void const\texorpdfstring{$\ast$}{*}$>$(std\+::addressof(rhs)))\};            \}                        template$<$typename Matcher\+LHS$>$            friend std\+::enable\+\_\+if\+\_\+t$<$is\+\_\+matcher\+\_\+v$<$Matcher\+LHS$>$,            Match\+Any\+Of\+Generic$<$Matcher\+LHS, Matcher\+Ts...$>$$>$ operator \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (                Matcher\+LHS const\& lhs,                Match\+Any\+Of\+Generic$<$Matcher\+Ts...$>$\&\& rhs) \{                return Match\+Any\+Of\+Generic$<$Matcher\+LHS, Matcher\+Ts...$>$\{array\+\_\+cat(static\+\_\+cast$<$void const\texorpdfstring{$\ast$}{*}$>$(std\+::addressof(lhs)), \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(rhs.\+m\+\_\+matchers))\};            \}        \};        template$<$typename MatcherT$>$        class Match\+Not\+Of\+Generic final \+: public Matcher\+Generic\+Base \{            MatcherT const\& m\+\_\+matcher;        public\+:            Match\+Not\+Of\+Generic(Match\+Not\+Of\+Generic const\&) = delete;            Match\+Not\+Of\+Generic\& operator=(Match\+Not\+Of\+Generic const\&) = delete;            Match\+Not\+Of\+Generic(Match\+Not\+Of\+Generic\&\&) = default;            Match\+Not\+Of\+Generic\& operator=(Match\+Not\+Of\+Generic\&\&) = default;            explicit Match\+Not\+Of\+Generic(MatcherT const\& matcher) \+: m\+\_\+matcher\{matcher\} \{\}            template$<$typename Arg$>$            bool match(Arg\&\& arg) const \{                return !m\+\_\+matcher.\+match(arg);            \}            std\+::string describe() const override \{                return "{}not "{} + m\+\_\+matcher.\+to\+String();            \}                        friend MatcherT const\& operator ! (Match\+Not\+Of\+Generic$<$MatcherT$>$ const\& matcher) \{                return matcher.\+m\+\_\+matcher;            \}        \};    \}         template$<$typename Matcher\+LHS, typename Matcher\+RHS$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::are\+\_\+generic\+\_\+matchers\+\_\+v$<$Matcher\+LHS, Matcher\+RHS$>$, Detail\+::\+Match\+All\+Of\+Generic$<$Matcher\+LHS, Matcher\+RHS$>$$>$        operator \&\& (Matcher\+LHS const\& lhs, Matcher\+RHS const\& rhs) \{        return \{ lhs, rhs \};    \}    template$<$typename Matcher\+LHS, typename Matcher\+RHS$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::are\+\_\+generic\+\_\+matchers\+\_\+v$<$Matcher\+LHS, Matcher\+RHS$>$, Detail\+::\+Match\+Any\+Of\+Generic$<$Matcher\+LHS, Matcher\+RHS$>$$>$        operator \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Matcher\+LHS const\& lhs, Matcher\+RHS const\& rhs) \{        return \{ lhs, rhs \};    \}        template$<$typename MatcherT$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+generic\+\_\+matcher\+\_\+v$<$MatcherT$>$, Detail\+::\+Match\+Not\+Of\+Generic$<$MatcherT$>$$>$        operator ! (MatcherT const\& matcher) \{        return Detail\+::\+Match\+Not\+Of\+Generic$<$MatcherT$>$\{matcher\};    \}        template$<$typename Matcher\+LHS, typename Arg\+RHS$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+generic\+\_\+matcher\+\_\+v$<$Matcher\+LHS$>$, Detail\+::\+Match\+All\+Of\+Generic$<$Matcher\+LHS, Matcher\+Base$<$Arg\+RHS$>$$>$$>$        operator \&\& (Matcher\+LHS const\& lhs, Matcher\+Base$<$Arg\+RHS$>$ const\& rhs) \{        return \{ lhs, rhs \};    \}    template$<$typename Arg\+LHS, typename Matcher\+RHS$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+generic\+\_\+matcher\+\_\+v$<$Matcher\+RHS$>$, Detail\+::\+Match\+All\+Of\+Generic$<$Matcher\+Base$<$Arg\+LHS$>$, Matcher\+RHS$>$$>$        operator \&\& (Matcher\+Base$<$Arg\+LHS$>$ const\& lhs, Matcher\+RHS const\& rhs) \{        return \{ lhs, rhs \};    \}    template$<$typename Matcher\+LHS, typename Arg\+RHS$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+generic\+\_\+matcher\+\_\+v$<$Matcher\+LHS$>$, Detail\+::\+Match\+Any\+Of\+Generic$<$Matcher\+LHS, Matcher\+Base$<$Arg\+RHS$>$$>$$>$        operator \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Matcher\+LHS const\& lhs, Matcher\+Base$<$Arg\+RHS$>$ const\& rhs) \{        return \{ lhs, rhs \};    \}    template$<$typename Arg\+LHS, typename Matcher\+RHS$>$    std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+generic\+\_\+matcher\+\_\+v$<$Matcher\+RHS$>$, Detail\+::\+Match\+Any\+Of\+Generic$<$Matcher\+Base$<$Arg\+LHS$>$, Matcher\+RHS$>$$>$        operator \texorpdfstring{$\vert$}{|}\texorpdfstring{$\vert$}{|} (Matcher\+Base$<$Arg\+LHS$>$ const\& lhs, Matcher\+RHS const\& rhs) \{        return \{ lhs, rhs \};    \}\} \} \#endif namespace Catch \{    namespace Matchers \{        class Is\+Empty\+Matcher final \+: public Matcher\+Generic\+Base \{        public\+:            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{\#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+POLYFILL\+\_\+\+NONMEMBER\+\_\+\+CONTAINER\+\_\+\+ACCESS)                using Catch\+::\+Detail\+::empty;\#else                using std\+::empty;\#endif                return empty(rng);            \}            std\+::string describe() const override;        \};        class Has\+Size\+Matcher final \+: public Matcher\+Generic\+Base \{            std\+::size\+\_\+t m\+\_\+target\+\_\+size;        public\+:            explicit Has\+Size\+Matcher(std\+::size\+\_\+t target\+\_\+size)\+:                m\+\_\+target\+\_\+size(target\+\_\+size)            \{\}            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{\#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+POLYFILL\+\_\+\+NONMEMBER\+\_\+\+CONTAINER\+\_\+\+ACCESS)                using Catch\+::\+Detail\+::size;\#else                using std\+::size;\#endif                return size(rng) == m\+\_\+target\+\_\+size;            \}            std\+::string describe() const override;        \};        template $<$typename Matcher$>$        class Size\+Matches\+Matcher final \+: public Matcher\+Generic\+Base \{            Matcher m\+\_\+matcher;        public\+:            explicit Size\+Matches\+Matcher(Matcher m)\+:                m\+\_\+matcher(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(m))            \{\}            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{\#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+POLYFILL\+\_\+\+NONMEMBER\+\_\+\+CONTAINER\+\_\+\+ACCESS)                using Catch\+::\+Detail\+::size;\#else                using std\+::size;\#endif                return m\+\_\+matcher.\+match(size(rng));            \}            std\+::string describe() const override \{                return "{}size matches "{} + m\+\_\+matcher.\+describe();            \}        \};                Is\+Empty\+Matcher Is\+Empty();                Has\+Size\+Matcher Size\+Is(std\+::size\+\_\+t sz);        template $<$typename Matcher$>$        std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+matcher\+\_\+v$<$Matcher$>$,        Size\+Matches\+Matcher$<$Matcher$>$$>$ Size\+Is(Matcher\&\& m) \{            return Size\+Matches\+Matcher$<$Matcher$>$\{\mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(m)\};        \}    \} \} \#endif \#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+CONTAINS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+CONTAINS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$functional$>$\#include $<$type\+\_\+traits$>$namespace Catch \{    namespace Matchers \{                template $<$typename T, typename Equality$>$        class Contains\+Element\+Matcher final \+: public Matcher\+Generic\+Base \{            T m\+\_\+desired;            Equality m\+\_\+eq;        public\+:            template $<$typename T2, typename Equality2$>$            Contains\+Element\+Matcher(T2\&\& target, Equality2\&\& predicate)\+:                m\+\_\+desired(\mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(target)),                m\+\_\+eq(\mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(predicate))            \{\}            std\+::string describe() const override \{                return "{}contains element "{} + Catch\+::\+Detail\+::stringify(m\+\_\+desired);            \}            template $<$typename Range\+Like$>$            bool match( Range\+Like\&\& rng ) const \{                for ( auto\&\& elem \+: rng ) \{                    if ( m\+\_\+eq( elem, m\+\_\+desired ) ) \{ return true; \}                \}                return false;            \}        \};                template $<$typename Matcher$>$        class Contains\+Matcher\+Matcher final \+: public Matcher\+Generic\+Base \{            Matcher m\+\_\+matcher;        public\+:                                                Contains\+Matcher\+Matcher(Matcher matcher)\+:                m\+\_\+matcher(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(matcher))            \{\}            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (m\+\_\+matcher.\+match(elem)) \{                        return true;                    \}                \}                return false;            \}            std\+::string describe() const override \{                return "{}contains element matching "{} + m\+\_\+matcher.\+describe();            \}        \};                template $<$typename T$>$        std\+::enable\+\_\+if\+\_\+t$<$!Detail\+::is\+\_\+matcher\+\_\+v$<$T$>$,        Contains\+Element\+Matcher$<$T, std\+::equal\+\_\+to$<$$>$$>$$>$ Contains(T\&\& elem) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(elem), std\+::equal\+\_\+to$<$$>$\{\} \};        \}                template $<$typename Matcher$>$        std\+::enable\+\_\+if\+\_\+t$<$Detail\+::is\+\_\+matcher\+\_\+v$<$Matcher$>$,        Contains\+Matcher\+Matcher$<$Matcher$>$$>$ Contains(Matcher\&\& matcher) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(matcher) \};        \}                template $<$typename T, typename Equality$>$        Contains\+Element\+Matcher$<$T, Equality$>$ Contains(T\&\& elem, Equality\&\& eq) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(elem), \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(eq) \};        \}    \}\}\#endif \#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+EXCEPTION\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+EXCEPTION\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{namespace Matchers \{class Exception\+Message\+Matcher final \+: public Matcher\+Base$<$std\+::exception$>$ \{    std\+::string m\+\_\+message;public\+:    Exception\+Message\+Matcher(std\+::string const\& message)\+:        m\+\_\+message(message)    \{\}    bool match(std\+::exception const\& ex) const override;    std\+::string describe() const override;\};Exception\+Message\+Matcher Message(std\+::string const\& message);template $<$typename String\+Matcher\+Type$>$class Exception\+Message\+Matches\+Matcher final    \+: public Matcher\+Base$<$std\+::exception$>$ \{    String\+Matcher\+Type m\+\_\+matcher;public\+:    Exception\+Message\+Matches\+Matcher( String\+Matcher\+Type matcher )\+:        m\+\_\+matcher( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( matcher ) ) \{\}    bool match( std\+::exception const\& ex ) const override \{        return m\+\_\+matcher.\+match( ex.\+what() );    \}    std\+::string describe() const override \{        return "{} matches \textbackslash{}"{}"{} + m\+\_\+matcher.\+describe() + \textquotesingle{}"{}\textquotesingle{};    \}\};template $<$typename String\+Matcher\+Type$>$Exception\+Message\+Matches\+Matcher$<$String\+Matcher\+Type$>$Message\+Matches( String\+Matcher\+Type\&\& matcher ) \{    return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( matcher ) \};\}\} // namespace Matchers\} // namespace Catch\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+EXCEPTION\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{namespace Matchers \{    namespace Detail \{        enum class Floating\+Point\+Kind \+: uint8\+\_\+t;    \}    class  Within\+Abs\+Matcher final \+: public Matcher\+Base$<$double$>$ \{    public\+:        Within\+Abs\+Matcher(double target, double margin);        bool match(double const\& matchee) const override;        std\+::string describe() const override;    private\+:        double m\+\_\+target;        double m\+\_\+margin;    \};        Within\+Abs\+Matcher Within\+Abs( double target, double margin );    class Within\+Ulps\+Matcher final \+: public Matcher\+Base$<$double$>$ \{    public\+:        Within\+Ulps\+Matcher( double target,                           uint64\+\_\+t ulps,                           Detail\+::\+Floating\+Point\+Kind base\+Type );        bool match(double const\& matchee) const override;        std\+::string describe() const override;    private\+:        double m\+\_\+target;        uint64\+\_\+t m\+\_\+ulps;        Detail\+::\+Floating\+Point\+Kind m\+\_\+type;    \};        Within\+Ulps\+Matcher Within\+ULP(double target, uint64\+\_\+t max\+Ulp\+Diff);        Within\+Ulps\+Matcher Within\+ULP(float target, uint64\+\_\+t max\+Ulp\+Diff);    // Given IEEE-\/754 format for floats and doubles, we can assume    // that float -\/$>$ double promotion is lossless. Given this, we can    // assume that if we do the standard relative comparison of    // \texorpdfstring{$\vert$}{|}lhs -\/ rhs\texorpdfstring{$\vert$}{|} $<$= epsilon \texorpdfstring{$\ast$}{*} max(fabs(lhs), fabs(rhs)), then we get    // the same result if we do this for floats, as if we do this for    // doubles that were promoted from floats.    class Within\+Rel\+Matcher final \+: public Matcher\+Base$<$double$>$ \{    public\+:        Within\+Rel\+Matcher( double target, double epsilon );        bool match(double const\& matchee) const override;        std\+::string describe() const override;    private\+:        double m\+\_\+target;        double m\+\_\+epsilon;    \};        Within\+Rel\+Matcher Within\+Rel(double target, double eps);        Within\+Rel\+Matcher Within\+Rel(double target);        Within\+Rel\+Matcher Within\+Rel(float target, float eps);        Within\+Rel\+Matcher Within\+Rel(float target);    class Is\+Na\+NMatcher final \+: public Matcher\+Base$<$double$>$ \{    public\+:        Is\+Na\+NMatcher() = default;        bool match( double const\& matchee ) const override;        std\+::string describe() const override;    \};    Is\+Na\+NMatcher Is\+NaN();\} // namespace Matchers\} // namespace Catch\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+FLOATING\+\_\+\+POINT\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+PREDICATE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+PREDICATE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{namespace Matchers \{namespace Detail \{    std\+::string finalize\+Description(const std\+::string\& desc);\} // namespace Detailtemplate $<$typename T, typename Predicate$>$class Predicate\+Matcher final \+: public Matcher\+Base$<$T$>$ \{    Predicate m\+\_\+predicate;    std\+::string m\+\_\+description;public\+:    Predicate\+Matcher(Predicate\&\& elem, std\+::string const\& descr)        \+:m\+\_\+predicate(\mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(elem)),        m\+\_\+description(Detail\+::finalize\+Description(descr))    \{\}    bool match( T const\& item ) const override \{        return m\+\_\+predicate(item);    \}    std\+::string describe() const override \{        return m\+\_\+description;    \}\};    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Creates a matcher that calls delegates \`{}match\`{} to the provided predicate.     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} The user has to explicitly specify the argument type to the matcher     \texorpdfstring{$\ast$}{*}/    template$<$typename T, typename Pred$>$    Predicate\+Matcher$<$T, Pred$>$ Predicate(Pred\&\& predicate, std\+::string const\& description = "{}"{}) \{        static\+\_\+assert(is\+\_\+callable$<$Pred(T)$>$\+::value, "{}Predicate not callable with argument T"{});        static\+\_\+assert(std\+::is\+\_\+same$<$bool, Function\+Return\+Type$<$Pred, T$>$$>$\+::value, "{}Predicate does not return bool"{});        return Predicate\+Matcher$<$T, Pred$>$(\mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(predicate), description);    \}\} // namespace Matchers\} // namespace Catch\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+PREDICATE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+QUANTIFIERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+QUANTIFIERS\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    namespace Matchers \{        // Matcher for checking that all elements in range matches a given matcher.        template $<$typename Matcher$>$        class All\+Match\+Matcher final \+: public Matcher\+Generic\+Base \{            Matcher m\+\_\+matcher;        public\+:            All\+Match\+Matcher(Matcher matcher)\+:                m\+\_\+matcher(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(matcher))            \{\}            std\+::string describe() const override \{                return "{}all match "{} + m\+\_\+matcher.\+describe();            \}            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (!m\+\_\+matcher.\+match(elem)) \{                        return false;                    \}                \}                return true;            \}        \};        // Matcher for checking that no element in range matches a given matcher.        template $<$typename Matcher$>$        class None\+Match\+Matcher final \+: public Matcher\+Generic\+Base \{            Matcher m\+\_\+matcher;        public\+:            None\+Match\+Matcher(Matcher matcher)\+:                m\+\_\+matcher(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(matcher))            \{\}            std\+::string describe() const override \{                return "{}none match "{} + m\+\_\+matcher.\+describe();            \}            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (m\+\_\+matcher.\+match(elem)) \{                        return false;                    \}                \}                return true;            \}        \};        // Matcher for checking that at least one element in range matches a given matcher.        template $<$typename Matcher$>$        class Any\+Match\+Matcher final \+: public Matcher\+Generic\+Base \{            Matcher m\+\_\+matcher;        public\+:            Any\+Match\+Matcher(Matcher matcher)\+:                m\+\_\+matcher(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(matcher))            \{\}            std\+::string describe() const override \{                return "{}any match "{} + m\+\_\+matcher.\+describe();            \}            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (m\+\_\+matcher.\+match(elem)) \{                        return true;                    \}                \}                return false;            \}        \};        // Matcher for checking that all elements in range are true.        class All\+True\+Matcher final \+: public Matcher\+Generic\+Base \{        public\+:            std\+::string describe() const override;            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (!elem) \{                        return false;                    \}                \}                return true;            \}        \};        // Matcher for checking that no element in range is true.        class None\+True\+Matcher final \+: public Matcher\+Generic\+Base \{        public\+:            std\+::string describe() const override;            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (elem) \{                        return false;                    \}                \}                return true;            \}        \};        // Matcher for checking that any element in range is true.        class Any\+True\+Matcher final \+: public Matcher\+Generic\+Base \{        public\+:            std\+::string describe() const override;            template $<$typename Range\+Like$>$            bool match(Range\+Like\&\& rng) const \{                for (auto\&\& elem \+: rng) \{                    if (elem) \{                        return true;                    \}                \}                return false;            \}        \};        // Creates a matcher that checks whether all elements in a range match a matcher        template $<$typename Matcher$>$        All\+Match\+Matcher$<$Matcher$>$ All\+Match(Matcher\&\& matcher) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(matcher) \};        \}        // Creates a matcher that checks whether no element in a range matches a matcher.        template $<$typename Matcher$>$        None\+Match\+Matcher$<$Matcher$>$ None\+Match(Matcher\&\& matcher) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(matcher) \};        \}        // Creates a matcher that checks whether any element in a range matches a matcher.        template $<$typename Matcher$>$        Any\+Match\+Matcher$<$Matcher$>$ Any\+Match(Matcher\&\& matcher) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}(matcher) \};        \}        // Creates a matcher that checks whether all elements in a range are true        All\+True\+Matcher All\+True();        // Creates a matcher that checks whether no element in a range is true        None\+True\+Matcher None\+True();        // Creates a matcher that checks whether any element in a range is true        Any\+True\+Matcher Any\+True();    \}\}\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+QUANTIFIERS\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+RANGE\+\_\+\+EQUALS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+RANGE\+\_\+\+EQUALS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$functional$>$namespace Catch \{    namespace Matchers \{        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Matcher for checking that an element contains the same         \texorpdfstring{$\ast$}{*} elements in the same order         \texorpdfstring{$\ast$}{*}/        template $<$typename Target\+Range\+Like, typename Equality$>$        class Range\+Equals\+Matcher final \+: public Matcher\+Generic\+Base \{            Target\+Range\+Like m\+\_\+desired;            Equality m\+\_\+predicate;        public\+:            template $<$typename Target\+Range\+Like2, typename Equality2$>$            constexpr            Range\+Equals\+Matcher( Target\+Range\+Like2\&\& range,                                Equality2\&\& predicate )\+:                m\+\_\+desired( \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( range ) ),                m\+\_\+predicate( \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( predicate ) ) \{\}            template $<$typename Range\+Like$>$            constexpr            bool match( Range\+Like\&\& rng ) const \{                auto rng\+\_\+start = begin( rng );                const auto rng\+\_\+end = end( rng );                auto target\+\_\+start = begin( m\+\_\+desired );                const auto target\+\_\+end = end( m\+\_\+desired );                while (rng\+\_\+start != rng\+\_\+end \&\& target\+\_\+start != target\+\_\+end) \{                    if (!m\+\_\+predicate(\texorpdfstring{$\ast$}{*}rng\+\_\+start, \texorpdfstring{$\ast$}{*}target\+\_\+start)) \{                        return false;                    \}                    ++rng\+\_\+start;                    ++target\+\_\+start;                \}                return rng\+\_\+start == rng\+\_\+end \&\& target\+\_\+start == target\+\_\+end;            \}            std\+::string describe() const override \{                return "{}elements are "{} + Catch\+::\+Detail\+::stringify( m\+\_\+desired );            \}        \};        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Matcher for checking that an element contains the same         \texorpdfstring{$\ast$}{*} elements (but not necessarily in the same order)         \texorpdfstring{$\ast$}{*}/        template $<$typename Target\+Range\+Like, typename Equality$>$        class Unordered\+Range\+Equals\+Matcher final \+: public Matcher\+Generic\+Base \{            Target\+Range\+Like m\+\_\+desired;            Equality m\+\_\+predicate;        public\+:            template $<$typename Target\+Range\+Like2, typename Equality2$>$            constexpr            Unordered\+Range\+Equals\+Matcher( Target\+Range\+Like2\&\& range,                                         Equality2\&\& predicate )\+:                m\+\_\+desired( \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( range ) ),                m\+\_\+predicate( \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( predicate ) ) \{\}            template $<$typename Range\+Like$>$            constexpr            bool match( Range\+Like\&\& rng ) const \{                using std\+::begin;                using std\+::end;                return \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Catch\+::\+Detail\+::is\+\_\+permutation}}( begin( m\+\_\+desired ),                                                      end( m\+\_\+desired ),                                                      begin( rng ),                                                      end( rng ),                                                      m\+\_\+predicate );            \}            std\+::string describe() const override \{                return "{}unordered elements are "{} +                       \+::\+Catch\+::\+Detail\+::stringify( m\+\_\+desired );            \}        \};        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Creates a matcher that checks if all elements in a range are equal         \texorpdfstring{$\ast$}{*} to all elements in another range.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Uses the provided predicate \`{}predicate\`{} to do the comparisons         \texorpdfstring{$\ast$}{*} (defaulting to \`{}std\+::equal\+\_\+to\`{})         \texorpdfstring{$\ast$}{*}/        template $<$typename Range\+Like,                  typename Equality = decltype( std\+::equal\+\_\+to$<$$>$\{\} )$>$        constexpr        Range\+Equals\+Matcher$<$Range\+Like, Equality$>$        Range\+Equals( Range\+Like\&\& range,                     Equality\&\& predicate = std\+::equal\+\_\+to$<$$>$\{\} ) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( range ), \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( predicate ) \};        \}        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Creates a matcher that checks if all elements in a range are equal         \texorpdfstring{$\ast$}{*} to all elements in an initializer list.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Uses the provided predicate \`{}predicate\`{} to do the comparisons         \texorpdfstring{$\ast$}{*} (defaulting to \`{}std\+::equal\+\_\+to\`{})         \texorpdfstring{$\ast$}{*}/        template $<$typename T,                  typename Equality = decltype( std\+::equal\+\_\+to$<$$>$\{\} )$>$        constexpr        Range\+Equals\+Matcher$<$std\+::initializer\+\_\+list$<$T$>$, Equality$>$        Range\+Equals( std\+::initializer\+\_\+list$<$T$>$ range,                     Equality\&\& predicate = std\+::equal\+\_\+to$<$$>$\{\} ) \{            return \{ range, \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( predicate ) \};        \}        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Creates a matcher that checks if all elements in a range are equal         \texorpdfstring{$\ast$}{*} to all elements in another range, in some permutation.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Uses the provided predicate \`{}predicate\`{} to do the comparisons         \texorpdfstring{$\ast$}{*} (defaulting to \`{}std\+::equal\+\_\+to\`{})         \texorpdfstring{$\ast$}{*}/        template $<$typename Range\+Like,                  typename Equality = decltype( std\+::equal\+\_\+to$<$$>$\{\} )$>$        constexpr        Unordered\+Range\+Equals\+Matcher$<$Range\+Like, Equality$>$        Unordered\+Range\+Equals( Range\+Like\&\& range,                              Equality\&\& predicate = std\+::equal\+\_\+to$<$$>$\{\} ) \{            return \{ \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( range ), \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( predicate ) \};        \}        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Creates a matcher that checks if all elements in a range are equal         \texorpdfstring{$\ast$}{*} to all elements in an initializer list, in some permutation.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Uses the provided predicate \`{}predicate\`{} to do the comparisons         \texorpdfstring{$\ast$}{*} (defaulting to \`{}std\+::equal\+\_\+to\`{})         \texorpdfstring{$\ast$}{*}/        template $<$typename T,                  typename Equality = decltype( std\+::equal\+\_\+to$<$$>$\{\} )$>$        constexpr        Unordered\+Range\+Equals\+Matcher$<$std\+::initializer\+\_\+list$<$T$>$, Equality$>$        Unordered\+Range\+Equals( std\+::initializer\+\_\+list$<$T$>$ range,                              Equality\&\& predicate = std\+::equal\+\_\+to$<$$>$\{\} ) \{            return \{ range, \mbox{\hyperlink{catch__amalgamated_8hpp_acedf14a4dca7fdf78bd48b59bc4d954a}{CATCH\+\_\+\+FORWARD}}( predicate ) \};        \}    \} // namespace Matchers\} // namespace Catch\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+RANGE\+\_\+\+EQUALS\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+STRING\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+STRING\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{namespace Matchers \{    struct Cased\+String \{        Cased\+String( std\+::string const\& str, Case\+Sensitive case\+Sensitivity );        std\+::string adjust\+String( std\+::string const\& str ) const;        String\+Ref case\+Sensitivity\+Suffix() const;        Case\+Sensitive m\+\_\+case\+Sensitivity;        std\+::string m\+\_\+str;    \};    class String\+Matcher\+Base \+: public Matcher\+Base$<$std\+::string$>$ \{    protected\+:        Cased\+String m\+\_\+comparator;        String\+Ref m\+\_\+operation;    public\+:        String\+Matcher\+Base( String\+Ref operation,                           Cased\+String const\& comparator );        std\+::string describe() const override;    \};    class String\+Equals\+Matcher final \+: public String\+Matcher\+Base \{    public\+:        String\+Equals\+Matcher( Cased\+String const\& comparator );        bool match( std\+::string const\& source ) const override;    \};    class String\+Contains\+Matcher final \+: public String\+Matcher\+Base \{    public\+:        String\+Contains\+Matcher( Cased\+String const\& comparator );        bool match( std\+::string const\& source ) const override;    \};    class Starts\+With\+Matcher final \+: public String\+Matcher\+Base \{    public\+:        Starts\+With\+Matcher( Cased\+String const\& comparator );        bool match( std\+::string const\& source ) const override;    \};    class Ends\+With\+Matcher final \+: public String\+Matcher\+Base \{    public\+:        Ends\+With\+Matcher( Cased\+String const\& comparator );        bool match( std\+::string const\& source ) const override;    \};    class Regex\+Matcher final \+: public Matcher\+Base$<$std\+::string$>$ \{        std\+::string m\+\_\+regex;        Case\+Sensitive m\+\_\+case\+Sensitivity;    public\+:        Regex\+Matcher( std\+::string regex, Case\+Sensitive case\+Sensitivity );        bool match( std\+::string const\& matchee ) const override;        std\+::string describe() const override;    \};        String\+Equals\+Matcher Equals( std\+::string const\& str, Case\+Sensitive case\+Sensitivity = Case\+Sensitive\+::\+Yes );        String\+Contains\+Matcher Contains\+Substring( std\+::string const\& str, Case\+Sensitive case\+Sensitivity = Case\+Sensitive\+::\+Yes );        Ends\+With\+Matcher Ends\+With( std\+::string const\& str, Case\+Sensitive case\+Sensitivity = Case\+Sensitive\+::\+Yes );        Starts\+With\+Matcher Starts\+With( std\+::string const\& str, Case\+Sensitive case\+Sensitivity = Case\+Sensitive\+::\+Yes );        Regex\+Matcher Matches( std\+::string const\& regex, Case\+Sensitive case\+Sensitivity = Case\+Sensitive\+::\+Yes );\} // namespace Matchers\} // namespace Catch\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+STRING\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+MATCHERS\+\_\+\+VECTOR\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+MATCHERS\+\_\+\+VECTOR\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$algorithm$>$namespace Catch \{namespace Matchers \{    template$<$typename T, typename Alloc$>$    class Vector\+Contains\+Element\+Matcher final \+: public Matcher\+Base$<$std\+::vector$<$T, Alloc$>$$>$ \{        T const\& m\+\_\+comparator;    public\+:        Vector\+Contains\+Element\+Matcher(T const\& comparator)\+:            m\+\_\+comparator(comparator)        \{\}        bool match(std\+::vector$<$T, Alloc$>$ const\& v) const override \{            for (auto const\& el \+: v) \{                if (el == m\+\_\+comparator) \{                    return true;                \}            \}            return false;        \}        std\+::string describe() const override \{            return "{}Contains\+: "{} + \+::\+Catch\+::\+Detail\+::stringify( m\+\_\+comparator );        \}    \};    template$<$typename T, typename Alloc\+Comp, typename Alloc\+Match$>$    class Contains\+Matcher final \+: public Matcher\+Base$<$std\+::vector$<$T, Alloc\+Match$>$$>$ \{        std\+::vector$<$T, Alloc\+Comp$>$ const\& m\+\_\+comparator;    public\+:        Contains\+Matcher(std\+::vector$<$T, Alloc\+Comp$>$ const\& comparator)\+:            m\+\_\+comparator( comparator )        \{\}        bool match(std\+::vector$<$T, Alloc\+Match$>$ const\& v) const override \{            // !TBD\+: see note in Equals\+Matcher            if (m\+\_\+comparator.\+size() $>$ v.\+size())                return false;            for (auto const\& comparator \+: m\+\_\+comparator) \{                auto present = false;                for (const auto\& el \+: v) \{                    if (el == comparator) \{                        present = true;                        break;                    \}                \}                if (!present) \{                    return false;                \}            \}            return true;        \}        std\+::string describe() const override \{            return "{}Contains\+: "{} + \+::\+Catch\+::\+Detail\+::stringify( m\+\_\+comparator );        \}    \};    template$<$typename T, typename Alloc\+Comp, typename Alloc\+Match$>$    class Equals\+Matcher final \+: public Matcher\+Base$<$std\+::vector$<$T, Alloc\+Match$>$$>$ \{        std\+::vector$<$T, Alloc\+Comp$>$ const\& m\+\_\+comparator;    public\+:        Equals\+Matcher(std\+::vector$<$T, Alloc\+Comp$>$ const\& comparator)\+:            m\+\_\+comparator( comparator )        \{\}        bool match(std\+::vector$<$T, Alloc\+Match$>$ const\& v) const override \{            // !TBD\+: This currently works if all elements can be compared using !=            // -\/ a more general approach would be via a compare template that defaults            // to using !=. but could be specialised for, e.\+g. std\+::vector$<$T$>$ etc            // -\/ then just call that directly            if ( m\+\_\+comparator.\+size() != v.\+size() ) \{ return false; \}            for ( std\+::size\+\_\+t i = 0; i $<$ v.\+size(); ++i ) \{                if ( !( m\+\_\+comparator\mbox{[}i\mbox{]} == v\mbox{[}i\mbox{]} ) ) \{ return false; \}            \}            return true;        \}        std\+::string describe() const override \{            return "{}Equals\+: "{} + \+::\+Catch\+::\+Detail\+::stringify( m\+\_\+comparator );        \}    \};    template$<$typename T, typename Alloc\+Comp, typename Alloc\+Match$>$    class Approx\+Matcher final \+: public Matcher\+Base$<$std\+::vector$<$T, Alloc\+Match$>$$>$ \{        std\+::vector$<$T, Alloc\+Comp$>$ const\& m\+\_\+comparator;        mutable \mbox{\hyperlink{classCatch_1_1Approx}{Catch\+::\+Approx}} approx = Catch\+::\+Approx\+::custom();    public\+:        Approx\+Matcher(std\+::vector$<$T, Alloc\+Comp$>$ const\& comparator)\+:            m\+\_\+comparator( comparator )        \{\}        bool match(std\+::vector$<$T, Alloc\+Match$>$ const\& v) const override \{            if (m\+\_\+comparator.\+size() != v.\+size())                return false;            for (std\+::size\+\_\+t i = 0; i $<$ v.\+size(); ++i)                if (m\+\_\+comparator\mbox{[}i\mbox{]} != approx(v\mbox{[}i\mbox{]}))                    return false;            return true;        \}        std\+::string describe() const override \{            return "{}is approx\+: "{} + \+::\+Catch\+::\+Detail\+::stringify( m\+\_\+comparator );        \}        template $<$typename = std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+constructible$<$double, T$>$\+::value$>$$>$        Approx\+Matcher\& epsilon( T const\& new\+Epsilon ) \{            approx.\+epsilon(static\+\_\+cast$<$double$>$(new\+Epsilon));            return \texorpdfstring{$\ast$}{*}this;        \}        template $<$typename = std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+constructible$<$double, T$>$\+::value$>$$>$        Approx\+Matcher\& margin( T const\& new\+Margin ) \{            approx.\+margin(static\+\_\+cast$<$double$>$(new\+Margin));            return \texorpdfstring{$\ast$}{*}this;        \}        template $<$typename = std\+::enable\+\_\+if\+\_\+t$<$std\+::is\+\_\+constructible$<$double, T$>$\+::value$>$$>$        Approx\+Matcher\& scale( T const\& new\+Scale ) \{            approx.\+scale(static\+\_\+cast$<$double$>$(new\+Scale));            return \texorpdfstring{$\ast$}{*}this;        \}    \};    template$<$typename T, typename Alloc\+Comp, typename Alloc\+Match$>$    class Unordered\+Equals\+Matcher final \+: public Matcher\+Base$<$std\+::vector$<$T, Alloc\+Match$>$$>$ \{        std\+::vector$<$T, Alloc\+Comp$>$ const\& m\+\_\+target;    public\+:        Unordered\+Equals\+Matcher(std\+::vector$<$T, Alloc\+Comp$>$ const\& target)\+:            m\+\_\+target(target)        \{\}        bool match(std\+::vector$<$T, Alloc\+Match$>$ const\& vec) const override \{            if (m\+\_\+target.\+size() != vec.\+size()) \{                return false;            \}            return std\+::is\+\_\+permutation(m\+\_\+target.\+begin(), m\+\_\+target.\+end(), vec.\+begin());        \}        std\+::string describe() const override \{            return "{}Unordered\+Equals\+: "{} + \+::\+Catch\+::\+Detail\+::stringify(m\+\_\+target);        \}    \};    // The following functions create the actual matcher objects.    // This allows the types to be inferred        template$<$typename T, typename Alloc\+Comp = std\+::allocator$<$T$>$, typename Alloc\+Match = Alloc\+Comp$>$    Contains\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$ Contains( std\+::vector$<$T, Alloc\+Comp$>$ const\& comparator ) \{        return Contains\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$(comparator);    \}        template$<$typename T, typename Alloc = std\+::allocator$<$T$>$$>$    Vector\+Contains\+Element\+Matcher$<$T, Alloc$>$ Vector\+Contains( T const\& comparator ) \{        return Vector\+Contains\+Element\+Matcher$<$T, Alloc$>$(comparator);    \}        template$<$typename T, typename Alloc\+Comp = std\+::allocator$<$T$>$, typename Alloc\+Match = Alloc\+Comp$>$    Equals\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$ Equals( std\+::vector$<$T, Alloc\+Comp$>$ const\& comparator ) \{        return Equals\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$(comparator);    \}        template$<$typename T, typename Alloc\+Comp = std\+::allocator$<$T$>$, typename Alloc\+Match = Alloc\+Comp$>$    Approx\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$ Approx( std\+::vector$<$T, Alloc\+Comp$>$ const\& comparator ) \{        return Approx\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$(comparator);    \}        template$<$typename T, typename Alloc\+Comp = std\+::allocator$<$T$>$, typename Alloc\+Match = Alloc\+Comp$>$    Unordered\+Equals\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$ Unordered\+Equals(std\+::vector$<$T, Alloc\+Comp$>$ const\& target) \{        return Unordered\+Equals\+Matcher$<$T, Alloc\+Comp, Alloc\+Match$>$(target);    \}\} // namespace Matchers\} // namespace Catch\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+VECTOR\+\_\+\+HPP\+\_\+\+INCLUDED\#endif // CATCH\+\_\+\+MATCHERS\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED/\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*} \textbackslash{}file \texorpdfstring{$\ast$}{*} This is a convenience header for Catch2\textquotesingle{}s Reporter support. It includes \texorpdfstring{$\ast$}{*} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}all\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*} of Catch2 headers related to reporters, including all reporters. \texorpdfstring{$\ast$}{*} \texorpdfstring{$\ast$}{*} Generally the Catch2 users should use specific includes they need, \texorpdfstring{$\ast$}{*} but this header can be used instead for ease-\/of-\/experimentation, or \texorpdfstring{$\ast$}{*} just plain convenience, at the cost of (significantly) increased \texorpdfstring{$\ast$}{*} compilation times. \texorpdfstring{$\ast$}{*} \texorpdfstring{$\ast$}{*} When a new header (reporter) is added to either the \`{}reporter\`{} folder, \texorpdfstring{$\ast$}{*} or to the corresponding internal subfolder, it should be added here. \texorpdfstring{$\ast$}{*}/\#ifndef CATCH\+\_\+\+REPORTERS\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTERS\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+AUTOMAKE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+AUTOMAKE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+STREAMING\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+STREAMING\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+COMMON\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+COMMON\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$map$>$\#include $<$string$>$namespace Catch \{    class Colour\+Impl;    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} This is the base class for all reporters.     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} If are writing a reporter, you must derive from this type, or one     \texorpdfstring{$\ast$}{*} of the helper reporter bases that are derived from this type.     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Reporter\+Base centralizes handling of various common tasks in reporters,     \texorpdfstring{$\ast$}{*} like storing the right stream for the reporters to write to, and     \texorpdfstring{$\ast$}{*} providing the default implementation of the different listing events.     \texorpdfstring{$\ast$}{*}/    class Reporter\+Base \+: public IEvent\+Listener \{    protected\+:                Detail\+::unique\+\_\+ptr$<$IStream$>$ m\+\_\+wrapped\+\_\+stream;                        std\+::ostream\& m\+\_\+stream;                Detail\+::unique\+\_\+ptr$<$Colour\+Impl$>$ m\+\_\+colour;                std\+::map$<$std\+::string, std\+::string$>$ m\+\_\+custom\+Options;    public\+:        Reporter\+Base( Reporter\+Config\&\& config );        \texorpdfstring{$\sim$}{\string~}Reporter\+Base() override; // = default;        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Provides a simple default listing of reporters.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Should look roughly like the reporter listing in v2 and earlier         \texorpdfstring{$\ast$}{*} versions of Catch2.         \texorpdfstring{$\ast$}{*}/        void list\+Reporters(            std\+::vector$<$Reporter\+Description$>$ const\& descriptions ) override;        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Provides a simple default listing of listeners         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Looks similarly to listing of reporters, but with listener type         \texorpdfstring{$\ast$}{*} instead of reporter name.         \texorpdfstring{$\ast$}{*}/        void list\+Listeners(            std\+::vector$<$Listener\+Description$>$ const\& descriptions ) override;        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Provides a simple default listing of tests.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Should look roughly like the test listing in v2 and earlier versions         \texorpdfstring{$\ast$}{*} of Catch2. Especially supports low-\/verbosity listing that mimics the         \texorpdfstring{$\ast$}{*} old \`{}-\/-\/list-\/test-\/names-\/only\`{} output.         \texorpdfstring{$\ast$}{*}/        void list\+Tests( std\+::vector$<$Test\+Case\+Handle$>$ const\& tests ) override;        /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Provides a simple default listing of tags.         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Should look roughly like the tag listing in v2 and earlier versions         \texorpdfstring{$\ast$}{*} of Catch2.         \texorpdfstring{$\ast$}{*}/        void list\+Tags( std\+::vector$<$Tag\+Info$>$ const\& tags ) override;    \};\} // namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+COMMON\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$vector$>$namespace Catch \{    class Streaming\+Reporter\+Base \+: public Reporter\+Base \{    public\+:        // GCC5 compat\+: we cannot use inherited constructor, because it        //              doesn\textquotesingle{}t implement backport of P0136        Streaming\+Reporter\+Base(Reporter\+Config\&\& \+\_\+config)\+:            Reporter\+Base(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(\+\_\+config))        \{\}        \texorpdfstring{$\sim$}{\string~}Streaming\+Reporter\+Base() override;        void benchmark\+Preparing( String\+Ref ) override \{\}        void benchmark\+Starting( Benchmark\+Info const\& ) override \{\}        void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& ) override \{\}        void benchmark\+Failed( String\+Ref ) override \{\}        void fatal\+Error\+Encountered( String\+Ref /\texorpdfstring{$\ast$}{*}error\texorpdfstring{$\ast$}{*}/ ) override \{\}        void no\+Matching\+Test\+Cases( String\+Ref /\texorpdfstring{$\ast$}{*}unmatched\+Spec\texorpdfstring{$\ast$}{*}/ ) override \{\}        void report\+Invalid\+Test\+Spec( String\+Ref /\texorpdfstring{$\ast$}{*}invalid\+Argument\texorpdfstring{$\ast$}{*}/ ) override \{\}        void test\+Run\+Starting( Test\+Run\+Info const\& \+\_\+test\+Run\+Info ) override;        void test\+Case\+Starting(Test\+Case\+Info const\& \+\_\+test\+Info) override  \{            current\+Test\+Case\+Info = \&\+\_\+test\+Info;        \}        void test\+Case\+Partial\+Starting( Test\+Case\+Info const\&, uint64\+\_\+t ) override \{\}        void section\+Starting(Section\+Info const\& \+\_\+section\+Info) override \{            m\+\_\+section\+Stack.\+push\+\_\+back(\+\_\+section\+Info);        \}        void assertion\+Starting( Assertion\+Info const\& ) override \{\}        void assertion\+Ended( Assertion\+Stats const\& ) override \{\}        void section\+Ended(Section\+Stats const\& /\texorpdfstring{$\ast$}{*} \+\_\+section\+Stats \texorpdfstring{$\ast$}{*}/) override \{            m\+\_\+section\+Stack.\+pop\+\_\+back();        \}        void test\+Case\+Partial\+Ended( Test\+Case\+Stats const\&, uint64\+\_\+t ) override \{\}        void test\+Case\+Ended(Test\+Case\+Stats const\& /\texorpdfstring{$\ast$}{*} \+\_\+test\+Case\+Stats \texorpdfstring{$\ast$}{*}/) override \{            current\+Test\+Case\+Info = nullptr;        \}        void test\+Run\+Ended( Test\+Run\+Stats const\& /\texorpdfstring{$\ast$}{*} \+\_\+test\+Run\+Stats \texorpdfstring{$\ast$}{*}/ ) override;        void skip\+Test(Test\+Case\+Info const\&) override \{            // Don\textquotesingle{}t do anything with this by default.            // It can optionally be overridden in the derived class.        \}    protected\+:        Test\+Run\+Info current\+Test\+Run\+Info\{ "{}test run has not started yet"{}\+\_\+sr \};        Test\+Case\+Info const\texorpdfstring{$\ast$}{*} current\+Test\+Case\+Info = nullptr;                std\+::vector$<$Section\+Info$>$ m\+\_\+section\+Stack;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+STREAMING\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$namespace Catch \{    class Automake\+Reporter final \+: public Streaming\+Reporter\+Base \{    public\+:        // GCC5 compat\+: we cannot use inherited constructor, because it        //              doesn\textquotesingle{}t implement backport of P0136        Automake\+Reporter( Reporter\+Config\&\& \+\_\+config )\+:            Streaming\+Reporter\+Base( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( \+\_\+config ) ) \{            m\+\_\+preferences.\+should\+Report\+All\+Assertion\+Starts = false;        \}        \texorpdfstring{$\sim$}{\string~}Automake\+Reporter() override;        static std\+::string get\+Description() \{            using namespace std\+::string\+\_\+literals;            return "{}Reports test results in the format of Automake .trs files"{}s;        \}        void test\+Case\+Ended(Test\+Case\+Stats const\& \+\_\+test\+Case\+Stats) override;        void skip\+Test(Test\+Case\+Info const\& test\+Info) override;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+AUTOMAKE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+COMPACT\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+COMPACT\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    class Compact\+Reporter final \+: public Streaming\+Reporter\+Base \{    public\+:        Compact\+Reporter( Reporter\+Config\&\& \+\_\+config )\+:            Streaming\+Reporter\+Base( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}( \+\_\+config ) ) \{            m\+\_\+preferences.\+should\+Report\+All\+Assertion\+Starts = false;        \}        \texorpdfstring{$\sim$}{\string~}Compact\+Reporter() override;        static std\+::string get\+Description();        void no\+Matching\+Test\+Cases( String\+Ref unmatched\+Spec ) override;        void test\+Run\+Starting( Test\+Run\+Info const\& \+\_\+test\+Info ) override;        void assertion\+Ended(Assertion\+Stats const\& \+\_\+assertion\+Stats) override;        void section\+Ended(Section\+Stats const\& \+\_\+section\+Stats) override;        void test\+Run\+Ended(Test\+Run\+Stats const\& \+\_\+test\+Run\+Stats) override;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+COMPACT\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+CONSOLE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+CONSOLE\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    // Fwd decls    class Table\+Printer;    class Console\+Reporter final \+: public Streaming\+Reporter\+Base \{        Detail\+::unique\+\_\+ptr$<$Table\+Printer$>$ m\+\_\+table\+Printer;    public\+:        Console\+Reporter(Reporter\+Config\&\& config);        \texorpdfstring{$\sim$}{\string~}Console\+Reporter() override;        static std\+::string get\+Description();        void no\+Matching\+Test\+Cases( String\+Ref unmatched\+Spec ) override;        void report\+Invalid\+Test\+Spec( String\+Ref arg ) override;        void assertion\+Ended(Assertion\+Stats const\& \+\_\+assertion\+Stats) override;        void section\+Starting(Section\+Info const\& \+\_\+section\+Info) override;        void section\+Ended(Section\+Stats const\& \+\_\+section\+Stats) override;        void benchmark\+Preparing( String\+Ref name ) override;        void benchmark\+Starting(Benchmark\+Info const\& info) override;        void benchmark\+Ended(Benchmark\+Stats$<$$>$ const\& stats) override;        void benchmark\+Failed( String\+Ref error ) override;        void test\+Case\+Ended(Test\+Case\+Stats const\& \+\_\+test\+Case\+Stats) override;        void test\+Run\+Ended(Test\+Run\+Stats const\& \+\_\+test\+Run\+Stats) override;        void test\+Run\+Starting(Test\+Run\+Info const\& \+\_\+test\+Run\+Info) override;    private\+:        void lazy\+Print();        void lazy\+Print\+Without\+Closing\+Benchmark\+Table();        void lazy\+Print\+Run\+Info();        void print\+Test\+Case\+And\+Section\+Header();        void print\+Closed\+Header(std\+::string const\& \+\_\+name);        void print\+Open\+Header(std\+::string const\& \+\_\+name);        // if string has a \+: in first line will set indent to follow it on        // subsequent lines        void print\+Header\+String(std\+::string const\& \+\_\+string, std\+::size\+\_\+t indent = 0);        void print\+Totals\+Divider(Totals const\& totals);        bool m\+\_\+header\+Printed = false;        bool m\+\_\+test\+Run\+Info\+Printed = false;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+CONSOLE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+CUMULATIVE\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+CUMULATIVE\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$string$>$\#include $<$vector$>$namespace Catch \{    namespace Detail \{                class Assertion\+Or\+Benchmark\+Result \{            // This should really be a variant, but this is much faster            // to write and the data layout here is already terrible            // enough that we do not have to care about the object size.            Optional$<$Assertion\+Stats$>$ m\+\_\+assertion;            Optional$<$Benchmark\+Stats$<$$>$$>$ m\+\_\+benchmark;        public\+:            Assertion\+Or\+Benchmark\+Result(Assertion\+Stats const\& assertion);            Assertion\+Or\+Benchmark\+Result(Benchmark\+Stats$<$$>$ const\& benchmark);            bool is\+Assertion() const;            bool is\+Benchmark() const;            Assertion\+Stats const\& as\+Assertion() const;            Benchmark\+Stats$<$$>$ const\& as\+Benchmark() const;        \};    \}    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Utility base for reporters that need to handle all results at once     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} It stores tree of all test cases, sections and assertions, and after the     \texorpdfstring{$\ast$}{*} test run is finished, calls into \`{}test\+Run\+Ended\+Cumulative\`{} to pass the     \texorpdfstring{$\ast$}{*} control to the deriving class.     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} If you are deriving from this class and override any testing related     \texorpdfstring{$\ast$}{*} member functions, you should first call into the base\textquotesingle{}s implementation to     \texorpdfstring{$\ast$}{*} avoid breaking the tree construction.     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Due to the way this base functions, it has to expand assertions up-\/front,     \texorpdfstring{$\ast$}{*} even if they are later unused (e.\+g. because the deriving reporter does     \texorpdfstring{$\ast$}{*} not report successful assertions, or because the deriving reporter does     \texorpdfstring{$\ast$}{*} not use assertion expansion at all). Derived classes can use two     \texorpdfstring{$\ast$}{*} customization points, \`{}m\+\_\+should\+Store\+Succesful\+Assertions\`{} and     \texorpdfstring{$\ast$}{*} \`{}m\+\_\+should\+Store\+Failed\+Assertions\`{}, to disable the expansion and gain extra     \texorpdfstring{$\ast$}{*} performance. \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}Accessing the assertion expansions if it wasn\textquotesingle{}t stored is     \texorpdfstring{$\ast$}{*} UB.\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*}/    class Cumulative\+Reporter\+Base \+: public Reporter\+Base \{    public\+:        template$<$typename T, typename Child\+NodeT$>$        struct Node \{            explicit Node( T const\& \+\_\+value ) \+: value( \+\_\+value ) \{\}            using Child\+Nodes = std\+::vector$<$Detail\+::unique\+\_\+ptr$<$Child\+NodeT$>$$>$;            T value;            Child\+Nodes children;        \};        struct Section\+Node \{            explicit Section\+Node(Section\+Stats const\& \+\_\+stats) \+: stats(\+\_\+stats) \{\}            bool operator == (Section\+Node const\& other) const \{                return stats.\+section\+Info.\+line\+Info == other.\+stats.\+section\+Info.\+line\+Info;            \}            bool has\+Any\+Assertions() const;            Section\+Stats stats;            std\+::vector$<$Detail\+::unique\+\_\+ptr$<$Section\+Node$>$$>$ child\+Sections;            std\+::vector$<$Detail\+::\+Assertion\+Or\+Benchmark\+Result$>$ assertions\+And\+Benchmarks;            std\+::string std\+Out;            std\+::string std\+Err;        \};        using Test\+Case\+Node = Node$<$Test\+Case\+Stats, Section\+Node$>$;        using Test\+Run\+Node = Node$<$Test\+Run\+Stats, Test\+Case\+Node$>$;        // GCC5 compat\+: we cannot use inherited constructor, because it        //              doesn\textquotesingle{}t implement backport of P0136        Cumulative\+Reporter\+Base(Reporter\+Config\&\& \+\_\+config)\+:            Reporter\+Base(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(\+\_\+config))        \{\}        \texorpdfstring{$\sim$}{\string~}Cumulative\+Reporter\+Base() override;        void benchmark\+Preparing( String\+Ref ) override \{\}        void benchmark\+Starting( Benchmark\+Info const\& ) override \{\}        void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& benchmark\+Stats ) override;        void benchmark\+Failed( String\+Ref ) override \{\}        void no\+Matching\+Test\+Cases( String\+Ref ) override \{\}        void report\+Invalid\+Test\+Spec( String\+Ref ) override \{\}        void fatal\+Error\+Encountered( String\+Ref /\texorpdfstring{$\ast$}{*}error\texorpdfstring{$\ast$}{*}/ ) override \{\}        void test\+Run\+Starting( Test\+Run\+Info const\& ) override \{\}        void test\+Case\+Starting( Test\+Case\+Info const\& ) override \{\}        void test\+Case\+Partial\+Starting( Test\+Case\+Info const\&, uint64\+\_\+t ) override \{\}        void section\+Starting( Section\+Info const\& section\+Info ) override;        void assertion\+Starting( Assertion\+Info const\& ) override \{\}        void assertion\+Ended( Assertion\+Stats const\& assertion\+Stats ) override;        void section\+Ended( Section\+Stats const\& section\+Stats ) override;        void test\+Case\+Partial\+Ended( Test\+Case\+Stats const\&, uint64\+\_\+t ) override \{\}        void test\+Case\+Ended( Test\+Case\+Stats const\& test\+Case\+Stats ) override;        void test\+Run\+Ended( Test\+Run\+Stats const\& test\+Run\+Stats ) override;                virtual void test\+Run\+Ended\+Cumulative() = 0;        void skip\+Test(Test\+Case\+Info const\&) override \{\}    protected\+:                bool m\+\_\+should\+Store\+Succesful\+Assertions = true;                bool m\+\_\+should\+Store\+Failed\+Assertions = true;        // We need lazy construction here. We should probably refactor it        // later, after the events are redone.                Detail\+::unique\+\_\+ptr$<$Test\+Run\+Node$>$ m\+\_\+test\+Run;    private\+:        // Note\+: We rely on pointer identity being stable, which is why        //       we store pointers to the nodes rather than the values.        std\+::vector$<$Detail\+::unique\+\_\+ptr$<$Test\+Case\+Node$>$$>$ m\+\_\+test\+Cases;        // Root section of the \+\_\+current\+\_\+ test case        Detail\+::unique\+\_\+ptr$<$Section\+Node$>$ m\+\_\+root\+Section;        // Deepest section of the \+\_\+current\+\_\+ test case        Section\+Node\texorpdfstring{$\ast$}{*} m\+\_\+deepest\+Section = nullptr;        // Stack of \+\_\+active\+\_\+ sections in the \+\_\+current\+\_\+ test case        std\+::vector$<$Section\+Node\texorpdfstring{$\ast$}{*}$>$ m\+\_\+section\+Stack;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+CUMULATIVE\+\_\+\+BASE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+EVENT\+\_\+\+LISTENER\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+EVENT\+\_\+\+LISTENER\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Base class to simplify implementing listeners.     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Provides empty default implementation for all IEvent\+Listener member     \texorpdfstring{$\ast$}{*} functions, so that a listener implementation can pick which     \texorpdfstring{$\ast$}{*} member functions it actually cares about.     \texorpdfstring{$\ast$}{*}/    class Event\+Listener\+Base \+: public IEvent\+Listener \{    public\+:        using IEvent\+Listener\+::\+IEvent\+Listener;        void report\+Invalid\+Test\+Spec( String\+Ref unmatched\+Spec ) override;        void fatal\+Error\+Encountered( String\+Ref error ) override;        void benchmark\+Preparing( String\+Ref name ) override;        void benchmark\+Starting( Benchmark\+Info const\& benchmark\+Info ) override;        void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& benchmark\+Stats ) override;        void benchmark\+Failed( String\+Ref error ) override;        void assertion\+Starting( Assertion\+Info const\& assertion\+Info ) override;        void assertion\+Ended( Assertion\+Stats const\& assertion\+Stats ) override;        void list\+Reporters(            std\+::vector$<$Reporter\+Description$>$ const\& descriptions ) override;        void list\+Listeners(            std\+::vector$<$Listener\+Description$>$ const\& descriptions ) override;        void list\+Tests( std\+::vector$<$Test\+Case\+Handle$>$ const\& tests ) override;        void list\+Tags( std\+::vector$<$Tag\+Info$>$ const\& tag\+Infos ) override;        void no\+Matching\+Test\+Cases( String\+Ref unmatched\+Spec ) override;        void test\+Run\+Starting( Test\+Run\+Info const\& test\+Run\+Info ) override;        void test\+Case\+Starting( Test\+Case\+Info const\& test\+Info ) override;        void test\+Case\+Partial\+Starting( Test\+Case\+Info const\& test\+Info,                                      uint64\+\_\+t part\+Number ) override;        void section\+Starting( Section\+Info const\& section\+Info ) override;        void section\+Ended( Section\+Stats const\& section\+Stats ) override;        void test\+Case\+Partial\+Ended( Test\+Case\+Stats const\& test\+Case\+Stats,                                   uint64\+\_\+t part\+Number ) override;        void test\+Case\+Ended( Test\+Case\+Stats const\& test\+Case\+Stats ) override;        void test\+Run\+Ended( Test\+Run\+Stats const\& test\+Run\+Stats ) override;        void skip\+Test( Test\+Case\+Info const\& test\+Info ) override;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+EVENT\+\_\+\+LISTENER\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$iosfwd$>$\#include $<$string$>$\#include $<$vector$>$namespace Catch \{    class IConfig;    class Test\+Case\+Handle;    class Colour\+Impl;    // Returns double formatted as \%.\+3f (format expected on output)    std\+::string get\+Formatted\+Duration( double duration );        bool should\+Show\+Duration( IConfig const\& config, double duration );    std\+::string serialize\+Filters( std\+::vector$<$std\+::string$>$ const\& filters );    struct line\+Of\+Chars \{        char c;        constexpr line\+Of\+Chars( char c\+\_\+ )\+: c( c\+\_\+ ) \{\}        friend std\+::ostream\& operator$<$$<$( std\+::ostream\& out, line\+Of\+Chars value );    \};    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Lists reporter descriptions to the provided stream in user-\/friendly     \texorpdfstring{$\ast$}{*} format     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Used as the default listing implementation by the first party reporter     \texorpdfstring{$\ast$}{*} bases. The output should be backwards compatible with the output of     \texorpdfstring{$\ast$}{*} Catch2 v2 binaries.     \texorpdfstring{$\ast$}{*}/    void    default\+List\+Reporters( std\+::ostream\& out,                          std\+::vector$<$Reporter\+Description$>$ const\& descriptions,                          Verbosity verbosity );    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Lists listeners descriptions to the provided stream in user-\/friendly     \texorpdfstring{$\ast$}{*} format     \texorpdfstring{$\ast$}{*}/    void default\+List\+Listeners( std\+::ostream\& out,                               std\+::vector$<$Listener\+Description$>$ const\& descriptions );    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Lists tag information to the provided stream in user-\/friendly format     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Used as the default listing implementation by the first party reporter     \texorpdfstring{$\ast$}{*} bases. The output should be backwards compatible with the output of     \texorpdfstring{$\ast$}{*} Catch2 v2 binaries.     \texorpdfstring{$\ast$}{*}/    void default\+List\+Tags( std\+::ostream\& out, std\+::vector$<$Tag\+Info$>$ const\& tags, bool is\+Filtered );    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Lists test case information to the provided stream in user-\/friendly     \texorpdfstring{$\ast$}{*} format     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Used as the default listing implementation by the first party reporter     \texorpdfstring{$\ast$}{*} bases. The output is backwards compatible with the output of Catch2     \texorpdfstring{$\ast$}{*} v2 binaries, and also supports the format specific to the old     \texorpdfstring{$\ast$}{*} \`{}-\/-\/list-\/test-\/names-\/only\`{} option, for people who used it in integrations.     \texorpdfstring{$\ast$}{*}/    void default\+List\+Tests( std\+::ostream\& out,                           Colour\+Impl\texorpdfstring{$\ast$}{*} stream\+Colour,                           std\+::vector$<$Test\+Case\+Handle$>$ const\& tests,                           bool is\+Filtered,                           Verbosity verbosity );    /\texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Prints test run totals to the provided stream in user-\/friendly format     \texorpdfstring{$\ast$}{*}     \texorpdfstring{$\ast$}{*} Used by the console and compact reporters.     \texorpdfstring{$\ast$}{*}/    void print\+Test\+Run\+Totals( std\+::ostream\& stream,                      Colour\+Impl\& stream\+Colour,                      Totals const\& totals );\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+HELPERS\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+JSON\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+JSON\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$stack$>$namespace Catch \{    class Json\+Reporter \+: public Streaming\+Reporter\+Base \{    public\+:        Json\+Reporter( Reporter\+Config\&\& config );        \texorpdfstring{$\sim$}{\string~}Json\+Reporter() override;        static std\+::string get\+Description();    public\+: // Streaming\+Reporter\+Base        void test\+Run\+Starting( Test\+Run\+Info const\& run\+Info ) override;        void test\+Run\+Ended( Test\+Run\+Stats const\& run\+Stats ) override;        void test\+Case\+Starting( Test\+Case\+Info const\& tc\+Info ) override;        void test\+Case\+Ended( Test\+Case\+Stats const\& tc\+Stats ) override;        void test\+Case\+Partial\+Starting( Test\+Case\+Info const\& tc\+Info,                                      uint64\+\_\+t index ) override;        void test\+Case\+Partial\+Ended( Test\+Case\+Stats const\& tc\+Stats,                                   uint64\+\_\+t index ) override;        void section\+Starting( Section\+Info const\& section\+Info ) override;        void section\+Ended( Section\+Stats const\& section\+Stats ) override;        void assertion\+Ended( Assertion\+Stats const\& assertion\+Stats ) override;        //void test\+Run\+Ended\+Cumulative() override;        void benchmark\+Preparing( String\+Ref name ) override;        void benchmark\+Starting( Benchmark\+Info const\& ) override;        void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& ) override;        void benchmark\+Failed( String\+Ref error ) override;        void list\+Reporters(            std\+::vector$<$Reporter\+Description$>$ const\& descriptions ) override;        void list\+Listeners(            std\+::vector$<$Listener\+Description$>$ const\& descriptions ) override;        void list\+Tests( std\+::vector$<$Test\+Case\+Handle$>$ const\& tests ) override;        void list\+Tags( std\+::vector$<$Tag\+Info$>$ const\& tags ) override;    private\+:        Timer m\+\_\+test\+Case\+Timer;        enum class Writer \{            Object,            Array        \};        Json\+Array\+Writer\& start\+Array();        Json\+Array\+Writer\& start\+Array( String\+Ref key );        Json\+Object\+Writer\& start\+Object();        Json\+Object\+Writer\& start\+Object( String\+Ref key );        void end\+Object();        void end\+Array();        bool is\+Inside( Writer writer );        void start\+Listing();        void end\+Listing();        // Invariant\+:        // When m\+\_\+writers is not empty and its top element is        // -\/ Writer\+::\+Object, then m\+\_\+object\+Writers is not be empty        // -\/ Writer\+::\+Array,  then m\+\_\+array\+Writers shall not be empty        std\+::stack$<$Json\+Object\+Writer$>$ m\+\_\+object\+Writers\{\};        std\+::stack$<$Json\+Array\+Writer$>$ m\+\_\+array\+Writers\{\};        std\+::stack$<$Writer$>$ m\+\_\+writers\{\};        bool m\+\_\+started\+Listing = false;        // std\+::size\+\_\+t m\+\_\+section\+Depth = 0;        // std\+::size\+\_\+t m\+\_\+section\+Started = 0;    \};\} // namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+JSON\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+JUNIT\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+JUNIT\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    class Junit\+Reporter final \+: public Cumulative\+Reporter\+Base \{    public\+:        Junit\+Reporter(Reporter\+Config\&\& \+\_\+config);        static std\+::string get\+Description();        void test\+Run\+Starting(Test\+Run\+Info const\& run\+Info) override;        void test\+Case\+Starting(Test\+Case\+Info const\& test\+Case\+Info) override;        void assertion\+Ended(Assertion\+Stats const\& assertion\+Stats) override;        void test\+Case\+Ended(Test\+Case\+Stats const\& test\+Case\+Stats) override;        void test\+Run\+Ended\+Cumulative() override;    private\+:        void write\+Run(Test\+Run\+Node const\& test\+Run\+Node, double suite\+Time);        void write\+Test\+Case(Test\+Case\+Node const\& test\+Case\+Node);        void write\+Section( std\+::string const\& class\+Name,                           std\+::string const\& root\+Name,                           Section\+Node const\& section\+Node,                           bool test\+Ok\+To\+Fail );        void write\+Assertions(Section\+Node const\& section\+Node);        void write\+Assertion(Assertion\+Stats const\& stats);        Xml\+Writer xml;        Timer suite\+Timer;        std\+::string std\+Out\+For\+Suite;        std\+::string std\+Err\+For\+Suite;        unsigned int unexpected\+Exceptions = 0;        bool m\+\_\+ok\+To\+Fail = false;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+JUNIT\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+MULTI\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+MULTI\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    class Multi\+Reporter final \+: public IEvent\+Listener \{        /\texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} Stores all added reporters and listeners         \texorpdfstring{$\ast$}{*}         \texorpdfstring{$\ast$}{*} All Listeners are stored before all reporters, and individual         \texorpdfstring{$\ast$}{*} listeners/reporters are stored in order of insertion.         \texorpdfstring{$\ast$}{*}/        std\+::vector$<$IEvent\+Listener\+Ptr$>$ m\+\_\+reporter\+Likes;        bool m\+\_\+have\+Noncapturing\+Reporters = false;        // Keep track of how many listeners we have already inserted,        // so that we can insert them into the main vector at the right place        size\+\_\+t m\+\_\+inserted\+Listeners = 0;        void update\+Preferences(IEvent\+Listener const\& reporterish);    public\+:        Multi\+Reporter( IConfig const\texorpdfstring{$\ast$}{*} config )\+:            IEvent\+Listener( config ) \{            m\+\_\+preferences.\+should\+Report\+All\+Assertion\+Starts = false;        \}        using IEvent\+Listener\+::\+IEvent\+Listener;        void add\+Listener( IEvent\+Listener\+Ptr\&\& listener );        void add\+Reporter( IEvent\+Listener\+Ptr\&\& reporter );    public\+: // IEvent\+Listener        void no\+Matching\+Test\+Cases( String\+Ref unmatched\+Spec ) override;        void fatal\+Error\+Encountered( String\+Ref error ) override;        void report\+Invalid\+Test\+Spec( String\+Ref arg ) override;        void benchmark\+Preparing( String\+Ref name ) override;        void benchmark\+Starting( Benchmark\+Info const\& benchmark\+Info ) override;        void benchmark\+Ended( Benchmark\+Stats$<$$>$ const\& benchmark\+Stats ) override;        void benchmark\+Failed( String\+Ref error ) override;        void test\+Run\+Starting( Test\+Run\+Info const\& test\+Run\+Info ) override;        void test\+Case\+Starting( Test\+Case\+Info const\& test\+Info ) override;        void test\+Case\+Partial\+Starting(Test\+Case\+Info const\& test\+Info, uint64\+\_\+t part\+Number) override;        void section\+Starting( Section\+Info const\& section\+Info ) override;        void assertion\+Starting( Assertion\+Info const\& assertion\+Info ) override;        void assertion\+Ended( Assertion\+Stats const\& assertion\+Stats ) override;        void section\+Ended( Section\+Stats const\& section\+Stats ) override;        void test\+Case\+Partial\+Ended(Test\+Case\+Stats const\& test\+Stats, uint64\+\_\+t part\+Number) override;        void test\+Case\+Ended( Test\+Case\+Stats const\& test\+Case\+Stats ) override;        void test\+Run\+Ended( Test\+Run\+Stats const\& test\+Run\+Stats ) override;        void skip\+Test( Test\+Case\+Info const\& test\+Info ) override;        void list\+Reporters(std\+::vector$<$Reporter\+Description$>$ const\& descriptions) override;        void list\+Listeners(std\+::vector$<$Listener\+Description$>$ const\& descriptions) override;        void list\+Tests(std\+::vector$<$Test\+Case\+Handle$>$ const\& tests) override;        void list\+Tags(std\+::vector$<$Tag\+Info$>$ const\& tags) override;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+MULTI\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+REGISTRARS\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+REGISTRARS\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$type\+\_\+traits$>$namespace Catch \{    namespace Detail \{        template $<$typename T, typename = void$>$        struct has\+\_\+description \+: std\+::false\+\_\+type \{\};        template $<$typename T$>$        struct has\+\_\+description$<$            T,            void\+\_\+t$<$decltype( T\+::get\+Description() )$>$$>$            \+: std\+::true\+\_\+type \{\};                        void register\+Reporter\+Impl( std\+::string const\& name,                                   IReporter\+Factory\+Ptr reporter\+Ptr );                void register\+Listener\+Impl( Detail\+::unique\+\_\+ptr$<$Event\+Listener\+Factory$>$ listener\+Factory );    \} // namespace Detail    class IEvent\+Listener;    using IEvent\+Listener\+Ptr = Detail\+::unique\+\_\+ptr$<$IEvent\+Listener$>$;    template $<$typename T$>$    class Reporter\+Factory \+: public IReporter\+Factory \{        IEvent\+Listener\+Ptr create( Reporter\+Config\&\& config ) const override \{            return Detail\+::make\+\_\+unique$<$T$>$( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(config) );        \}        std\+::string get\+Description() const override \{            return T\+::get\+Description();        \}    \};    template$<$typename T$>$    class Reporter\+Registrar \{    public\+:        explicit Reporter\+Registrar( std\+::string const\& name ) \{            register\+Reporter\+Impl( name,                                  Detail\+::make\+\_\+unique$<$Reporter\+Factory$<$T$>$$>$() );        \}    \};    template$<$typename T$>$    class Listener\+Registrar \{        class Typed\+Listener\+Factory \+: public Event\+Listener\+Factory \{            String\+Ref m\+\_\+listener\+Name;            std\+::string get\+Description\+Impl( std\+::true\+\_\+type ) const \{                return T\+::get\+Description();            \}            std\+::string get\+Description\+Impl( std\+::false\+\_\+type ) const \{                return "{}(No description provided)"{};            \}        public\+:            Typed\+Listener\+Factory( String\+Ref listener\+Name )\+:                m\+\_\+listener\+Name( listener\+Name ) \{\}            IEvent\+Listener\+Ptr create( IConfig const\texorpdfstring{$\ast$}{*} config ) const override \{                return Detail\+::make\+\_\+unique$<$T$>$( config );            \}            String\+Ref get\+Name() const override \{                return m\+\_\+listener\+Name;            \}            std\+::string get\+Description() const override \{                return get\+Description\+Impl( Detail\+::has\+\_\+description$<$T$>$\{\} );            \}        \};    public\+:        Listener\+Registrar(String\+Ref listener\+Name) \{            register\+Listener\+Impl( Detail\+::make\+\_\+unique$<$Typed\+Listener\+Factory$>$(listener\+Name) );        \}    \};\}\#if !defined(CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE)\#    define CATCH\+\_\+\+REGISTER\+\_\+\+REPORTER( name, reporter\+Type )                  \textbackslash{}        CATCH\+\_\+\+INTERNAL\+\_\+\+START\+\_\+\+WARNINGS\+\_\+\+SUPPRESSION                          \textbackslash{}        CATCH\+\_\+\+INTERNAL\+\_\+\+SUPPRESS\+\_\+\+GLOBALS\+\_\+\+WARNINGS                           \textbackslash{}        namespace \{                                                        \textbackslash{}            const Catch\+::\+Reporter\+Registrar$<$reporter\+Type$>$                   \textbackslash{}                INTERNAL\+\_\+\+CATCH\+\_\+\+UNIQUE\+\_\+\+NAME( catch\+\_\+internal\+\_\+\+Registrar\+For )( \textbackslash{}                    name );                                                \textbackslash{}        \}                                                                  \textbackslash{}        CATCH\+\_\+\+INTERNAL\+\_\+\+STOP\+\_\+\+WARNINGS\+\_\+\+SUPPRESSION\#    define CATCH\+\_\+\+REGISTER\+\_\+\+LISTENER( listener\+Type )                        \textbackslash{}        CATCH\+\_\+\+INTERNAL\+\_\+\+START\+\_\+\+WARNINGS\+\_\+\+SUPPRESSION                          \textbackslash{}        CATCH\+\_\+\+INTERNAL\+\_\+\+SUPPRESS\+\_\+\+GLOBALS\+\_\+\+WARNINGS                           \textbackslash{}        namespace \{                                                        \textbackslash{}            const Catch\+::\+Listener\+Registrar$<$listener\+Type$>$                   \textbackslash{}                INTERNAL\+\_\+\+CATCH\+\_\+\+UNIQUE\+\_\+\+NAME( catch\+\_\+internal\+\_\+\+Registrar\+For )( \textbackslash{}                    \#listener\+Type\#\#\+\_\+catch\+\_\+sr );                            \textbackslash{}        \}                                                                  \textbackslash{}        CATCH\+\_\+\+INTERNAL\+\_\+\+STOP\+\_\+\+WARNINGS\+\_\+\+SUPPRESSION\#else // CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE\#define CATCH\+\_\+\+REGISTER\+\_\+\+REPORTER(name, reporter\+Type)\#define CATCH\+\_\+\+REGISTER\+\_\+\+LISTENER(listener\+Type)\#endif // CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+REGISTRARS\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+SONARQUBE\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+SONARQUBE\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    class Sonar\+Qube\+Reporter final \+: public Cumulative\+Reporter\+Base \{    public\+:        Sonar\+Qube\+Reporter(Reporter\+Config\&\& config)        \+: Cumulative\+Reporter\+Base(\mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(config))        , xml(m\+\_\+stream) \{            m\+\_\+preferences.\+should\+Redirect\+Std\+Out = true;            m\+\_\+preferences.\+should\+Report\+All\+Assertions = false;            m\+\_\+preferences.\+should\+Report\+All\+Assertion\+Starts = false;            m\+\_\+should\+Store\+Succesful\+Assertions = false;        \}        static std\+::string get\+Description() \{            using namespace std\+::string\+\_\+literals;            return "{}Reports test results in the Generic Test Data Sonar\+Qube XML format"{}s;        \}        void test\+Run\+Starting( Test\+Run\+Info const\& test\+Run\+Info ) override;        void test\+Run\+Ended\+Cumulative() override \{            write\+Run( \texorpdfstring{$\ast$}{*}m\+\_\+test\+Run );            xml.\+end\+Element();        \}        void write\+Run( Test\+Run\+Node const\& run\+Node );        void write\+Test\+File(String\+Ref filename, std\+::vector$<$Test\+Case\+Node const\texorpdfstring{$\ast$}{*}$>$ const\& test\+Case\+Nodes);        void write\+Test\+Case(Test\+Case\+Node const\& test\+Case\+Node);        void write\+Section(std\+::string const\& root\+Name, Section\+Node const\& section\+Node, bool ok\+To\+Fail);        void write\+Assertions(Section\+Node const\& section\+Node, bool ok\+To\+Fail);        void write\+Assertion(Assertion\+Stats const\& stats, bool ok\+To\+Fail);    private\+:        Xml\+Writer xml;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+SONARQUBE\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+TAP\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+TAP\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    class TAPReporter final \+: public Streaming\+Reporter\+Base \{    public\+:        TAPReporter( Reporter\+Config\&\& config )\+:            Streaming\+Reporter\+Base( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(config) ) \{            m\+\_\+preferences.\+should\+Report\+All\+Assertions = true;            m\+\_\+preferences.\+should\+Report\+All\+Assertion\+Starts = false;        \}        static std\+::string get\+Description() \{            using namespace std\+::string\+\_\+literals;            return "{}Reports test results in TAP format, suitable for test harnesses"{}s;        \}        void test\+Run\+Starting( Test\+Run\+Info const\& test\+Info ) override;        void no\+Matching\+Test\+Cases( String\+Ref unmatched\+Spec ) override;        void assertion\+Ended(Assertion\+Stats const\& \+\_\+assertion\+Stats) override;        void test\+Run\+Ended(Test\+Run\+Stats const\& \+\_\+test\+Run\+Stats) override;    private\+:        std\+::size\+\_\+t counter = 0;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+TAP\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+TEAMCITY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+TEAMCITY\+\_\+\+HPP\+\_\+\+INCLUDED\#include $<$cstring$>$\#ifdef \+\_\+\+\_\+clang\+\_\+\+\_\+\#   pragma clang diagnostic push\#   pragma clang diagnostic ignored "{}-\/Wpadded"{}\#endifnamespace Catch \{    class Team\+City\+Reporter final \+: public Streaming\+Reporter\+Base \{    public\+:        Team\+City\+Reporter( Reporter\+Config\&\& \+\_\+config )        \+:   Streaming\+Reporter\+Base( \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(\+\_\+config) )        \{            m\+\_\+preferences.\+should\+Redirect\+Std\+Out = true;            m\+\_\+preferences.\+should\+Report\+All\+Assertion\+Starts = false;        \}        \texorpdfstring{$\sim$}{\string~}Team\+City\+Reporter() override;        static std\+::string get\+Description() \{            using namespace std\+::string\+\_\+literals;            return "{}Reports test results as Team\+City service messages"{}s;        \}        void test\+Run\+Starting( Test\+Run\+Info const\& run\+Info ) override;        void test\+Run\+Ended( Test\+Run\+Stats const\& run\+Stats ) override;        void assertion\+Ended(Assertion\+Stats const\& assertion\+Stats) override;        void section\+Starting(Section\+Info const\& section\+Info) override \{            m\+\_\+header\+Printed\+For\+This\+Section = false;            Streaming\+Reporter\+Base\+::section\+Starting( section\+Info );        \}        void test\+Case\+Starting(Test\+Case\+Info const\& test\+Info) override;        void test\+Case\+Ended(Test\+Case\+Stats const\& test\+Case\+Stats) override;    private\+:        void print\+Section\+Header(std\+::ostream\& os);        bool m\+\_\+header\+Printed\+For\+This\+Section = false;        Timer m\+\_\+test\+Timer;    \};\} // end namespace Catch\#ifdef \+\_\+\+\_\+clang\+\_\+\+\_\+\#   pragma clang diagnostic pop\#endif\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+TEAMCITY\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+REPORTER\+\_\+\+XML\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+REPORTER\+\_\+\+XML\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    class Xml\+Reporter \+: public Streaming\+Reporter\+Base \{    public\+:        Xml\+Reporter(Reporter\+Config\&\& \+\_\+config);        \texorpdfstring{$\sim$}{\string~}Xml\+Reporter() override;        static std\+::string get\+Description();        virtual std\+::string get\+Stylesheet\+Ref() const;        void write\+Source\+Info(Source\+Line\+Info const\& source\+Info);    public\+: // Streaming\+Reporter\+Base        void test\+Run\+Starting(Test\+Run\+Info const\& test\+Info) override;        void test\+Case\+Starting(Test\+Case\+Info const\& test\+Info) override;        void section\+Starting(Section\+Info const\& section\+Info) override;        void assertion\+Ended(Assertion\+Stats const\& assertion\+Stats) override;        void section\+Ended(Section\+Stats const\& section\+Stats) override;        void test\+Case\+Ended(Test\+Case\+Stats const\& test\+Case\+Stats) override;        void test\+Run\+Ended(Test\+Run\+Stats const\& test\+Run\+Stats) override;        void benchmark\+Preparing( String\+Ref name ) override;        void benchmark\+Starting(Benchmark\+Info const\&) override;        void benchmark\+Ended(Benchmark\+Stats$<$$>$ const\&) override;        void benchmark\+Failed( String\+Ref error ) override;        void list\+Reporters(std\+::vector$<$Reporter\+Description$>$ const\& descriptions) override;        void list\+Listeners(std\+::vector$<$Listener\+Description$>$ const\& descriptions) override;        void list\+Tests(std\+::vector$<$Test\+Case\+Handle$>$ const\& tests) override;        void list\+Tags(std\+::vector$<$Tag\+Info$>$ const\& tags) override;    private\+:        Timer m\+\_\+test\+Case\+Timer;        Xml\+Writer m\+\_\+xml;        int m\+\_\+section\+Depth = 0;    \};\} // end namespace Catch\#endif // CATCH\+\_\+\+REPORTER\+\_\+\+XML\+\_\+\+HPP\+\_\+\+INCLUDED\#endif // CATCH\+\_\+\+REPORTERS\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#endif // CATCH\+\_\+\+ALL\+\_\+\+HPP\+\_\+\+INCLUDED\#endif // CATCH\+\_\+\+AMALGAMATED\+\_\+\+HPP\+\_\+\+INCLUDED\#ifndef CATCH\+\_\+\+WINDOWS\+\_\+\+H\+\_\+\+PROXY\+\_\+\+HPP\+\_\+\+INCLUDED\#define CATCH\+\_\+\+WINDOWS\+\_\+\+H\+\_\+\+PROXY\+\_\+\+HPP\+\_\+\+INCLUDED\#if defined(CATCH\+\_\+\+PLATFORM\+\_\+\+WINDOWS)// We might end up with the define made globally through the compiler,// and we don\textquotesingle{}t want to trigger warnings for this\#if !defined(NOMINMAX)\#  define NOMINMAX\#endif\#if !defined(WIN32\+\_\+\+LEAN\+\_\+\+AND\+\_\+\+MEAN)\#  define WIN32\+\_\+\+LEAN\+\_\+\+AND\+\_\+\+MEAN\#endif\#include $<$windows.\+h$>$\#endif // defined(CATCH\+\_\+\+PLATFORM\+\_\+\+WINDOWS)\#endif // CATCH\+\_\+\+WINDOWS\+\_\+\+H\+\_\+\+PROXY\+\_\+\+HPP\+\_\+\+INCLUDEDnamespace Catch \{    namespace Benchmark \{        namespace Detail \{            Chronometer\+Concept\+::\texorpdfstring{$\sim$}{\string~}\+Chronometer\+Concept() = default;        \} // namespace Detail    \} // namespace Benchmark\} // namespace Catch// Adapted from donated nonius code.\#include $<$vector$>$namespace Catch \{    namespace Benchmark \{        namespace Detail \{            Sample\+Analysis analyse(const IConfig \&cfg, FDuration\texorpdfstring{$\ast$}{*} first, FDuration\texorpdfstring{$\ast$}{*} last) \{                if (!cfg.\+benchmark\+No\+Analysis()) \{                    std\+::vector$<$double$>$ samples;                    samples.\+reserve(static\+\_\+cast$<$size\+\_\+t$>$(last -\/ first));                    for (auto current = first; current != last; ++current) \{                        samples.\+push\+\_\+back( current-\/$>$count() );                    \}                    auto analysis = Catch\+::\+Benchmark\+::\+Detail\+::analyse\+\_\+samples(                        cfg.\+benchmark\+Confidence\+Interval(),                        cfg.\+benchmark\+Resamples(),                        samples.\+data(),                        samples.\+data() + samples.\+size() );                    auto outliers = Catch\+::\+Benchmark\+::\+Detail\+::classify\+\_\+outliers(                        samples.\+data(), samples.\+data() + samples.\+size() );                    auto wrap\+\_\+estimate = \mbox{[}$\,$\mbox{]}(Estimate$<$double$>$ e) \{                        return Estimate$<$FDuration$>$ \{                            FDuration(e.\+point),                                FDuration(e.\+lower\+\_\+bound),                                FDuration(e.\+upper\+\_\+bound),                                e.\+confidence\+\_\+interval,                        \};                    \};                    std\+::vector$<$FDuration$>$ samples2;                    samples2.\+reserve(samples.\+size());                    for (auto s \+: samples) \{                        samples2.\+push\+\_\+back( FDuration( s ) );                    \}                    return \{                        \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(samples2),                        wrap\+\_\+estimate(analysis.\+mean),                        wrap\+\_\+estimate(analysis.\+standard\+\_\+deviation),                        outliers,                        analysis.\+outlier\+\_\+variance,                    \};                \} else \{                    std\+::vector$<$FDuration$>$ samples;                    samples.\+reserve(static\+\_\+cast$<$size\+\_\+t$>$(last -\/ first));                    FDuration mean = FDuration(0);                    int i = 0;                    for (auto it = first; it $<$ last; ++it, ++i) \{                        samples.\+push\+\_\+back(\texorpdfstring{$\ast$}{*}it);                        mean += \texorpdfstring{$\ast$}{*}it;                    \}                    mean /= i;                    return Sample\+Analysis\{                        \mbox{\hyperlink{catch__amalgamated_8hpp_a62516a9b52be8207f277f4adc2999207}{CATCH\+\_\+\+MOVE}}(samples),                        Estimate$<$FDuration$>$\{ mean, mean, mean, 0.\+0 \},                        Estimate$<$FDuration$>$\{ FDuration( 0 ),                                             FDuration( 0 ),                                             FDuration( 0 ),                                             0.\+0 \},                        Outlier\+Classification\{\},                        0.\+0                    \};                \}            \}        \} // namespace Detail    \} // namespace Benchmark\} // namespace Catchnamespace Catch \{    namespace Benchmark \{        namespace Detail \{            struct do\+\_\+nothing \{                void operator()() const \{\}            \};            Benchmark\+Function\+::callable\+::\texorpdfstring{$\sim$}{\string~}callable() = default;            Benchmark\+Function\+::\+Benchmark\+Function()\+:                f( new model$<$do\+\_\+nothing$>$\{ \{\} \} )\{\}        \} // namespace Detail    \} // namespace Benchmark\} // namespace Catch\#include $<$exception$>$namespace Catch \{    namespace Benchmark \{        namespace Detail \{            struct optimized\+\_\+away\+\_\+error \+: std\+::exception \{                const char\texorpdfstring{$\ast$}{*} what() const noexcept override;            \};            const char\texorpdfstring{$\ast$}{*} optimized\+\_\+away\+\_\+error\+::what() const noexcept \{                return "{}could not measure benchmark, maybe it was optimized away"{};            \}            void throw\+\_\+optimized\+\_\+away\+\_\+error() \{                Catch\+::throw\+\_\+exception(optimized\+\_\+away\+\_\+error\{\});            \}        \} // namespace Detail    \} // namespace Benchmark\} // namespace Catch// Adapted from donated nonius code.\#include $<$algorithm$>$\#include $<$cassert$>$\#include $<$cmath$>$\#include $<$cstddef$>$\#include $<$numeric$>$\#include $<$random$>$\#if defined(CATCH\+\_\+\+CONFIG\+\_\+\+USE\+\_\+\+ASYNC)\#include $<$future$>$\#endifnamespace Catch \{    namespace Benchmark \{        namespace Detail \{            namespace \{                template $<$typename URng, typename Estimator$>$                static sample                resample( URng\& rng,                          unsigned int resamples,                          double const\texorpdfstring{$\ast$}{*} first,                          double const\texorpdfstring{$\ast$}{*} last,                          Estimator\& estimator ) \{                    auto n = static\+\_\+cast$<$size\+\_\+t$>$( last -\/ first );                    Catch\+::uniform\+\_\+integer\+\_\+distribution$<$size\+\_\+t$>$ dist( 0, n -\/ 1 );                    sample out;                    out.\+reserve( resamples );                    std\+::vector$<$double$>$ resampled;                    resampled.\+reserve( n );                    for ( size\+\_\+t i = 0; i $<$ resamples; ++i ) \{                        resampled.\+clear();                        for ( size\+\_\+t s = 0; s $<$ n; ++s ) \{                            resampled.\+push\+\_\+back( first\mbox{[}dist( rng )\mbox{]} );                        \}                        const auto estimate =                            estimator( resampled.\+data(), resampled.\+data() + resampled.\+size() );                        out.\+push\+\_\+back( estimate );                    \}                    std\+::sort( out.\+begin(), out.\+end() );                    return out;                \}                static double outlier\+\_\+variance( Estimate$<$double$>$ mean,                                                Estimate$<$double$>$ stddev,                                                int n ) \{                    double sb = stddev.\+point;                    double mn = mean.\+point / n;                    double mg\+\_\+min = mn / 2.;                    double sg = (std\+::min)( mg\+\_\+min / 4., sb / std\+::sqrt( n ) );                    double sg2 = sg \texorpdfstring{$\ast$}{*} sg;                    double sb2 = sb \texorpdfstring{$\ast$}{*} sb;                    auto c\+\_\+max = \mbox{[}n, mn, sb2, sg2\mbox{]}( double x ) -\/$>$ double \{                        double k = mn -\/ x;                        double d = k \texorpdfstring{$\ast$}{*} k;                        double nd = n \texorpdfstring{$\ast$}{*} d;                        double k0 = -\/n \texorpdfstring{$\ast$}{*} nd;                        double k1 = sb2 -\/ n \texorpdfstring{$\ast$}{*} sg2 + nd;                        double det = k1 \texorpdfstring{$\ast$}{*} k1 -\/ 4 \texorpdfstring{$\ast$}{*} sg2 \texorpdfstring{$\ast$}{*} k0;                        return static\+\_\+cast$<$int$>$( -\/2. \texorpdfstring{$\ast$}{*} k0 /                                                 ( k1 + std\+::sqrt( det ) ) );                    \};                    auto var\+\_\+out = \mbox{[}n, sb2, sg2\mbox{]}( double c ) \{                        double nc = n -\/ c;                        return ( nc / n ) \texorpdfstring{$\ast$}{*} ( sb2 -\/ nc \texorpdfstring{$\ast$}{*} sg2 );                    \};                    return (std\+::min)( var\+\_\+out( 1 ),                                       var\+\_\+out(                                           (std\+::min)( c\+\_\+max( 0. ),                                                       c\+\_\+max( mg\+\_\+min ) ) ) ) /                           sb2;                \}                static double erf\+\_\+inv( double x ) \{                    // Code accompanying the article "{}Approximating the erfinv
\item 
\Hypertarget{catch__amalgamated_8cpp_af65382d821ca7d874af23bc1cab05617}\label{catch__amalgamated_8cpp_af65382d821ca7d874af23bc1cab05617} 
\#define {\bfseries CATCH2\+\_\+\+CLANG\+\_\+\+NO\+\_\+\+SANITIZE\+\_\+\+INTEGER}
\end{DoxyCompactItemize}
\doxysubsubsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
\Hypertarget{catch__amalgamated_8cpp_af942e91344c728dbd8c9732dbf8054c9}\label{catch__amalgamated_8cpp_af942e91344c728dbd8c9732dbf8054c9} 
using {\bfseries Catch\+::\+Registry\+Hub\+Singleton} = Singleton$<$ Registry\+Hub, \mbox{\hyperlink{classCatch_1_1IRegistryHub}{IRegistry\+Hub}}, \mbox{\hyperlink{classCatch_1_1IMutableRegistryHub}{IMutable\+Registry\+Hub}} $>$
\end{DoxyCompactItemize}
\doxysubsubsection*{Enumerations}
\begin{DoxyCompactItemize}
\item 
\Hypertarget{catch__amalgamated_8cpp_a65dcb4c6cc6803847848523398ae680c}\label{catch__amalgamated_8cpp_a65dcb4c6cc6803847848523398ae680c} 
enum class {\bfseries Floating\+Point\+Kind} \+: uint8\+\_\+t \{ {\bfseries Float}
, {\bfseries Double}
 \}
\end{DoxyCompactItemize}
\doxysubsubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\Hypertarget{catch__amalgamated_8cpp_a62bf6e1353fde8e95644d156c4a8b3ed}\label{catch__amalgamated_8cpp_a62bf6e1353fde8e95644d156c4a8b3ed} 
{\bfseries if} (w$<$ 6.\+250000)
\item 
\Hypertarget{catch__amalgamated_8cpp_a571030d8a3068b49d454220cfdea714f}\label{catch__amalgamated_8cpp_a571030d8a3068b49d454220cfdea714f} 
double {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::weighted\+\_\+average\+\_\+quantile} (int k, int q, double \texorpdfstring{$\ast$}{*}first, double \texorpdfstring{$\ast$}{*}last)
\item 
\Hypertarget{catch__amalgamated_8cpp_a523468c0e7dbf99ffb1801aad78e352d}\label{catch__amalgamated_8cpp_a523468c0e7dbf99ffb1801aad78e352d} 
\mbox{\hyperlink{structCatch_1_1Benchmark_1_1OutlierClassification}{Outlier\+Classification}} {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::classify\+\_\+outliers} (double const \texorpdfstring{$\ast$}{*}first, double const \texorpdfstring{$\ast$}{*}last)
\item 
\Hypertarget{catch__amalgamated_8cpp_ac5f830d662344dd75387c26aa83e6ac3}\label{catch__amalgamated_8cpp_ac5f830d662344dd75387c26aa83e6ac3} 
double {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::mean} (double const \texorpdfstring{$\ast$}{*}first, double const \texorpdfstring{$\ast$}{*}last)
\item 
\Hypertarget{catch__amalgamated_8cpp_abc5e70b0f758f550b2fdff85512efdb5}\label{catch__amalgamated_8cpp_abc5e70b0f758f550b2fdff85512efdb5} 
double {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::normal\+\_\+cdf} (double x)
\item 
\Hypertarget{catch__amalgamated_8cpp_a62d6c634e2c8901d02ffe8718817f1b4}\label{catch__amalgamated_8cpp_a62d6c634e2c8901d02ffe8718817f1b4} 
double {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::erfc\+\_\+inv} (double x)
\item 
\Hypertarget{catch__amalgamated_8cpp_af3527090cdeb0456b1aacbdc29050841}\label{catch__amalgamated_8cpp_af3527090cdeb0456b1aacbdc29050841} 
double {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::normal\+\_\+quantile} (double p)
\item 
\Hypertarget{catch__amalgamated_8cpp_a0a635ce60c227f5217d9606e2afe527c}\label{catch__amalgamated_8cpp_a0a635ce60c227f5217d9606e2afe527c} 
\mbox{\hyperlink{structCatch_1_1Benchmark_1_1Estimate}{Estimate}}$<$ double $>$ {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::bootstrap} (double confidence\+\_\+level, double \texorpdfstring{$\ast$}{*}first, double \texorpdfstring{$\ast$}{*}last, sample const \&resample, double(\texorpdfstring{$\ast$}{*}estimator)(double const \texorpdfstring{$\ast$}{*}, double const \texorpdfstring{$\ast$}{*}))
\item 
\Hypertarget{catch__amalgamated_8cpp_a1a4ae7ccc7fa8c996bc6e4ada5a7004b}\label{catch__amalgamated_8cpp_a1a4ae7ccc7fa8c996bc6e4ada5a7004b} 
\mbox{\hyperlink{structCatch_1_1Benchmark_1_1Detail_1_1bootstrap__analysis}{bootstrap\+\_\+analysis}} {\bfseries Catch\+::\+Benchmark\+::\+Detail\+::analyse\+\_\+samples} (double confidence\+\_\+level, unsigned int n\+\_\+resamples, double \texorpdfstring{$\ast$}{*}first, double \texorpdfstring{$\ast$}{*}last)
\item 
\Hypertarget{catch__amalgamated_8cpp_af610e11bcfe94ebc07788fdcf1b716b7}\label{catch__amalgamated_8cpp_af610e11bcfe94ebc07788fdcf1b716b7} 
\mbox{\hyperlink{classCatch_1_1Approx}{Approx}} {\bfseries Catch\+::literals\+::operator"{}"{}\+\_\+a} (long double val)
\item 
\Hypertarget{catch__amalgamated_8cpp_ad9c310bd2eaacfd7c23f7a5a1fc587bf}\label{catch__amalgamated_8cpp_ad9c310bd2eaacfd7c23f7a5a1fc587bf} 
\mbox{\hyperlink{classCatch_1_1Approx}{Approx}} {\bfseries Catch\+::literals\+::operator"{}"{}\+\_\+a} (unsigned long long val)
\item 
\Hypertarget{catch__amalgamated_8cpp_a2842e594466b16b9ca13e09077b44406}\label{catch__amalgamated_8cpp_a2842e594466b16b9ca13e09077b44406} 
bool {\bfseries Catch\+::operator==} (\mbox{\hyperlink{structCatch_1_1ProcessedReporterSpec}{Processed\+Reporter\+Spec}} const \&lhs, \mbox{\hyperlink{structCatch_1_1ProcessedReporterSpec}{Processed\+Reporter\+Spec}} const \&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_aba921d5844aa120874480fe71d1c1ae3}\label{catch__amalgamated_8cpp_aba921d5844aa120874480fe71d1c1ae3} 
std\+::uint32\+\_\+t {\bfseries Catch\+::get\+Seed} ()
\begin{DoxyCompactList}\small\item\em Returns Catch2\textquotesingle{}s current RNG seed. \end{DoxyCompactList}\item 
\Hypertarget{catch__amalgamated_8cpp_a5d328566cb8da87b48f1fac3f319ac7a}\label{catch__amalgamated_8cpp_a5d328566cb8da87b48f1fac3f319ac7a} 
\mbox{\hyperlink{classCatch_1_1IRegistryHub}{IRegistry\+Hub}} const \& {\bfseries Catch\+::get\+Registry\+Hub} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a585459763f2c7610e57de2dd22dd1ad8}\label{catch__amalgamated_8cpp_a585459763f2c7610e57de2dd22dd1ad8} 
\mbox{\hyperlink{classCatch_1_1IMutableRegistryHub}{IMutable\+Registry\+Hub}} \& {\bfseries Catch\+::get\+Mutable\+Registry\+Hub} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a0f78e9afdebc6d4512d18e76fbf54b8c}\label{catch__amalgamated_8cpp_a0f78e9afdebc6d4512d18e76fbf54b8c} 
void {\bfseries Catch\+::clean\+Up} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_adafff91485eeeeb9e9333f317cc0e3b1}\label{catch__amalgamated_8cpp_adafff91485eeeeb9e9333f317cc0e3b1} 
std\+::string {\bfseries Catch\+::translate\+Active\+Exception} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a60f033a91680546a152f5dfa4427104c}\label{catch__amalgamated_8cpp_a60f033a91680546a152f5dfa4427104c} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{void}} {\bfseries Catch\+::\+Detail\+::register\+Translator\+Impl} (\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Detail\+::unique\+\_\+ptr}}$<$ \mbox{\hyperlink{classCatch_1_1IExceptionTranslator}{IException\+Translator}} $>$ \&\&\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{translator}})
\item 
\Hypertarget{catch__amalgamated_8cpp_aa7e8f5954fada348761e0473b3e4c1a2}\label{catch__amalgamated_8cpp_aa7e8f5954fada348761e0473b3e4c1a2} 
std\+::ostream \& {\bfseries Catch\+::operator$<$$<$} (std\+::ostream \&os, \mbox{\hyperlink{structCatch_1_1Version}{Version}} const \&version)
\item 
\Hypertarget{catch__amalgamated_8cpp_a35e54475ed669ef7f7ac00b858e91b2a}\label{catch__amalgamated_8cpp_a35e54475ed669ef7f7ac00b858e91b2a} 
\mbox{\hyperlink{structCatch_1_1Version}{Version}} const \& {\bfseries Catch\+::library\+Version} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_ab6e4736f7a2b0501a13c4dc4adfe5bb6}\label{catch__amalgamated_8cpp_ab6e4736f7a2b0501a13c4dc4adfe5bb6} 
void {\bfseries Catch\+::\+Generators\+::\+Detail\+::throw\+\_\+generator\+\_\+exception} (char const \texorpdfstring{$\ast$}{*}msg)
\begin{DoxyCompactList}\small\item\em Throws \doxylink{classCatch_1_1GeneratorException}{Generator\+Exception} with the provided message. \end{DoxyCompactList}\item 
\Hypertarget{catch__amalgamated_8cpp_ab0ad55177ac1e5f00b123909b191f436}\label{catch__amalgamated_8cpp_ab0ad55177ac1e5f00b123909b191f436} 
\mbox{\hyperlink{classCatch_1_1IGeneratorTracker}{IGenerator\+Tracker}} \texorpdfstring{$\ast$}{*} {\bfseries Catch\+::\+Generators\+::acquire\+Generator\+Tracker} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} generator\+Name, \mbox{\hyperlink{structCatch_1_1SourceLineInfo}{Source\+Line\+Info}} const \&line\+Info)
\item 
\Hypertarget{catch__amalgamated_8cpp_a24e1bac2be5e078f26c395a96470b706}\label{catch__amalgamated_8cpp_a24e1bac2be5e078f26c395a96470b706} 
\mbox{\hyperlink{classCatch_1_1IGeneratorTracker}{IGenerator\+Tracker}} \texorpdfstring{$\ast$}{*} {\bfseries Catch\+::\+Generators\+::create\+Generator\+Tracker} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} generator\+Name, \mbox{\hyperlink{structCatch_1_1SourceLineInfo}{Source\+Line\+Info}} line\+Info, \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Generator\+Base\+Ptr}} \&\&generator)
\item 
\Hypertarget{catch__amalgamated_8cpp_a43ff3ca07ca525084cadb89dee13e39e}\label{catch__amalgamated_8cpp_a43ff3ca07ca525084cadb89dee13e39e} 
std\+::uint32\+\_\+t {\bfseries Catch\+::\+Generators\+::\+Detail\+::get\+Seed} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a26cdeefafe46a4d606b51248eb7bbe7e}\label{catch__amalgamated_8cpp_a26cdeefafe46a4d606b51248eb7bbe7e} 
void {\bfseries Catch\+::handle\+Exception\+Match\+Expr} (\mbox{\hyperlink{classCatch_1_1AssertionHandler}{Assertion\+Handler}} \&handler, std\+::string const \&str)
\item 
\Hypertarget{catch__amalgamated_8cpp_ab5b76a1843c33a4a71aa698a3defc528}\label{catch__amalgamated_8cpp_ab5b76a1843c33a4a71aa698a3defc528} 
\mbox{\hyperlink{classCatch_1_1Clara_1_1Detail_1_1BasicResult}{Parser\+Result}} {\bfseries Catch\+::\+Clara\+::\+Detail\+::convert\+Into} (std\+::string const \&source, std\+::string \&target)
\item 
\Hypertarget{catch__amalgamated_8cpp_aaf5cc67b22b463d47af6e69ee31bf44e}\label{catch__amalgamated_8cpp_aaf5cc67b22b463d47af6e69ee31bf44e} 
\mbox{\hyperlink{classCatch_1_1Clara_1_1Detail_1_1BasicResult}{Parser\+Result}} {\bfseries Catch\+::\+Clara\+::\+Detail\+::convert\+Into} (std\+::string const \&source, bool \&target)
\item 
\Hypertarget{catch__amalgamated_8cpp_a96d773398ae9697da7845bbf5027e35e}\label{catch__amalgamated_8cpp_a96d773398ae9697da7845bbf5027e35e} 
\mbox{\hyperlink{classCatch_1_1Clara_1_1Parser}{Clara\+::\+Parser}} {\bfseries Catch\+::make\+Command\+Line\+Parser} (\mbox{\hyperlink{structCatch_1_1ConfigData}{Config\+Data}} \&config)
\item 
\Hypertarget{catch__amalgamated_8cpp_ade51091dea188100d1c7a8acc55f5ea5}\label{catch__amalgamated_8cpp_ade51091dea188100d1c7a8acc55f5ea5} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{uint32\+\_\+t}} {\bfseries Catch\+::\+Detail\+::convert\+To\+Bits} (\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{float}} f)
\item 
\Hypertarget{catch__amalgamated_8cpp_aa4cbea1ca1087603043d57005bbbec54}\label{catch__amalgamated_8cpp_aa4cbea1ca1087603043d57005bbbec54} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{uint64\+\_\+t}} {\bfseries Catch\+::\+Detail\+::convert\+To\+Bits} (\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{double}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{d}})
\item 
\Hypertarget{catch__amalgamated_8cpp_a18fef8312d01399bbf5722432f099216}\label{catch__amalgamated_8cpp_a18fef8312d01399bbf5722432f099216} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{bool}} {\bfseries Catch\+::\+Detail\+::direct\+Compare} (\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{float}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{lhs}}, \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{float}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{rhs}})
\item 
\Hypertarget{catch__amalgamated_8cpp_a4e6b189b0908b0866a4f79b5ba5f9b7d}\label{catch__amalgamated_8cpp_a4e6b189b0908b0866a4f79b5ba5f9b7d} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{bool}} {\bfseries Catch\+::\+Detail\+::direct\+Compare} (\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{double}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{lhs}}, \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{double}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{rhs}})
\item 
\Hypertarget{catch__amalgamated_8cpp_a9a53cd3f44546dfc2935a3a6d3277ce6}\label{catch__amalgamated_8cpp_a9a53cd3f44546dfc2935a3a6d3277ce6} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{char}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{const}} \texorpdfstring{$\ast$}{*} {\bfseries Catch\+::\+Detail\+::get\+Env} (\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{char}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{const}} \texorpdfstring{$\ast$}{*}\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{var\+Name}})
\item 
\Hypertarget{catch__amalgamated_8cpp_a375b927ff7cc5356ff4a71626d54c83f}\label{catch__amalgamated_8cpp_a375b927ff7cc5356ff4a71626d54c83f} 
auto {\bfseries Catch\+::make\+Stream} (std\+::string const \&filename) -\/$>$ \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Detail\+::unique\+\_\+ptr}}$<$ IStream $>$
\item 
\Hypertarget{catch__amalgamated_8cpp_abf821d46e662c8d93d80a98d79a10314}\label{catch__amalgamated_8cpp_abf821d46e662c8d93d80a98d79a10314} 
auto {\bfseries Catch\+::operator$<$$<$} (std\+::ostream \&os, \mbox{\hyperlink{classCatch_1_1LazyExpression}{Lazy\+Expression}} const \&lazy\+Expr) -\/$>$ std\+::ostream \&
\item 
\Hypertarget{catch__amalgamated_8cpp_a11c40de0d3593160a350d9e4323311b2}\label{catch__amalgamated_8cpp_a11c40de0d3593160a350d9e4323311b2} 
bool {\bfseries Catch\+::list} (IEvent\+Listener \&reporter, \mbox{\hyperlink{classCatch_1_1Config}{Config}} const \&config)
\item 
\Hypertarget{catch__amalgamated_8cpp_a0ddf1224851353fc92bfbff6f499fa97}\label{catch__amalgamated_8cpp_a0ddf1224851353fc92bfbff6f499fa97} 
int {\bfseries main} (int argc, char \texorpdfstring{$\ast$}{*}argv\mbox{[}$\,$\mbox{]})
\item 
\Hypertarget{catch__amalgamated_8cpp_a73b1b55bbb03be501419181d88db9c6f}\label{catch__amalgamated_8cpp_a73b1b55bbb03be501419181d88db9c6f} 
bool {\bfseries Catch\+::is\+Redirect\+Available} (Output\+Redirect\+::\+Kind kind)
\item 
\Hypertarget{catch__amalgamated_8cpp_ae9831933e640b35f907975c129f4763f}\label{catch__amalgamated_8cpp_ae9831933e640b35f907975c129f4763f} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Detail\+::unique\+\_\+ptr}}$<$ Output\+Redirect $>$ {\bfseries Catch\+::make\+Output\+Redirect} (bool actual)
\item 
\Hypertarget{catch__amalgamated_8cpp_a6869418a3394de1080b85a72d73b37e2}\label{catch__amalgamated_8cpp_a6869418a3394de1080b85a72d73b37e2} 
Redirect\+Guard {\bfseries Catch\+::scoped\+Activate} (Output\+Redirect \&redirect\+Impl)
\item 
\Hypertarget{catch__amalgamated_8cpp_a604293e8cd25e37091594d6f30c5f54e}\label{catch__amalgamated_8cpp_a604293e8cd25e37091594d6f30c5f54e} 
Redirect\+Guard {\bfseries Catch\+::scoped\+Deactivate} (Output\+Redirect \&redirect\+Impl)
\item 
\Hypertarget{catch__amalgamated_8cpp_a369d3d53347e3c8da1d23ef64fa39daf}\label{catch__amalgamated_8cpp_a369d3d53347e3c8da1d23ef64fa39daf} 
\mbox{\hyperlink{classCatch_1_1Optional}{Optional}}$<$ unsigned int $>$ {\bfseries Catch\+::parse\+UInt} (std\+::string const \&input, int base)
\item 
\Hypertarget{catch__amalgamated_8cpp_aff37796f0f578c2816f74267e641c5f7}\label{catch__amalgamated_8cpp_aff37796f0f578c2816f74267e641c5f7} 
bool {\bfseries Catch\+::isnan} (float f)
\item 
\Hypertarget{catch__amalgamated_8cpp_a37d450336c237ac77721f0a3f9fb048d}\label{catch__amalgamated_8cpp_a37d450336c237ac77721f0a3f9fb048d} 
bool {\bfseries Catch\+::isnan} (double d)
\item 
\Hypertarget{catch__amalgamated_8cpp_ae65d074e6c60320640a500d302b83bb2}\label{catch__amalgamated_8cpp_ae65d074e6c60320640a500d302b83bb2} 
float {\bfseries Catch\+::nextafter} (float x, float y)
\item 
\Hypertarget{catch__amalgamated_8cpp_add39a699bce7f13c95616fcaa62ab7ca}\label{catch__amalgamated_8cpp_add39a699bce7f13c95616fcaa62ab7ca} 
double {\bfseries Catch\+::nextafter} (double x, double y)
\item 
\Hypertarget{catch__amalgamated_8cpp_a6d5126d3ec2d72a47fa404b704d99010}\label{catch__amalgamated_8cpp_a6d5126d3ec2d72a47fa404b704d99010} 
bool {\bfseries Catch\+::operator==} (\mbox{\hyperlink{classCatch_1_1SimplePcg32}{Simple\+Pcg32}} const \&lhs, \mbox{\hyperlink{classCatch_1_1SimplePcg32}{Simple\+Pcg32}} const \&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_ab5a7a360e947e33298ee18f652749230}\label{catch__amalgamated_8cpp_ab5a7a360e947e33298ee18f652749230} 
bool {\bfseries Catch\+::operator!=} (\mbox{\hyperlink{classCatch_1_1SimplePcg32}{Simple\+Pcg32}} const \&lhs, \mbox{\hyperlink{classCatch_1_1SimplePcg32}{Simple\+Pcg32}} const \&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_a170bbe5db76570c4820b5e2eb260f82b}\label{catch__amalgamated_8cpp_a170bbe5db76570c4820b5e2eb260f82b} 
std\+::uint32\+\_\+t {\bfseries Catch\+::generate\+Random\+Seed} (Generate\+From from)
\item 
\Hypertarget{catch__amalgamated_8cpp_a874fd7848ec5a0ef02d88c6ec37c9a03}\label{catch__amalgamated_8cpp_a874fd7848ec5a0ef02d88c6ec37c9a03} 
std\+::vector$<$ std\+::string $>$ {\bfseries Catch\+::\+Detail\+::split\+Reporter\+Spec} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} \mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{reporter\+Spec}})
\begin{DoxyCompactList}\small\item\em Splits the reporter spec into reporter name and kv-\/pair options. \end{DoxyCompactList}\item 
\Hypertarget{catch__amalgamated_8cpp_a64ba838a0c2e6767d095a7a01fc07b48}\label{catch__amalgamated_8cpp_a64ba838a0c2e6767d095a7a01fc07b48} 
\mbox{\hyperlink{classCatch_1_1Optional}{Optional}}$<$ \mbox{\hyperlink{catch__amalgamated_8hpp_a91308e87521e370e591065a22b010025}{Colour\+Mode}} $>$ {\bfseries Catch\+::\+Detail\+::string\+To\+Colour\+Mode} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} colour\+Mode)
\item 
\Hypertarget{catch__amalgamated_8cpp_a408299b05a1363c7cd99fb5b6c7f1e3d}\label{catch__amalgamated_8cpp_a408299b05a1363c7cd99fb5b6c7f1e3d} 
bool {\bfseries Catch\+::operator==} (Reporter\+Spec const \&lhs, Reporter\+Spec const \&rhs)
\item 
\mbox{\hyperlink{classCatch_1_1Optional}{Optional}}$<$ Reporter\+Spec $>$ \mbox{\hyperlink{catch__amalgamated_8cpp_ae987bd04fd59321f5183794daeffd4cf}{Catch\+::parse\+Reporter\+Spec}} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} reporter\+Spec)
\item 
\Hypertarget{catch__amalgamated_8cpp_af718eeab870712f292ed8dc6ee3f6488}\label{catch__amalgamated_8cpp_af718eeab870712f292ed8dc6ee3f6488} 
\mbox{\hyperlink{classCatch_1_1IResultCapture}{IResult\+Capture}} \& {\bfseries Catch\+::get\+Result\+Capture} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a161400810eb0995394d6d8d3cae821ad}\label{catch__amalgamated_8cpp_a161400810eb0995394d6d8d3cae821ad} 
void {\bfseries Catch\+::seed\+Rng} (\mbox{\hyperlink{classCatch_1_1IConfig}{IConfig}} const \&config)
\item 
\Hypertarget{catch__amalgamated_8cpp_acf5ea05e942d2d7fe79111e12754ed76}\label{catch__amalgamated_8cpp_acf5ea05e942d2d7fe79111e12754ed76} 
unsigned int {\bfseries Catch\+::rng\+Seed} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a788ebefcd83342b7c479222a1eeffaee}\label{catch__amalgamated_8cpp_a788ebefcd83342b7c479222a1eeffaee} 
void {\bfseries Catch\+::add\+Singleton} (ISingleton \texorpdfstring{$\ast$}{*}singleton)
\item 
\Hypertarget{catch__amalgamated_8cpp_a8bdb92cb53a4e016bc0dee66efd99118}\label{catch__amalgamated_8cpp_a8bdb92cb53a4e016bc0dee66efd99118} 
void {\bfseries Catch\+::cleanup\+Singletons} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a8c8ea1f66bc1cdc3e1254ed7fa57c06d}\label{catch__amalgamated_8cpp_a8c8ea1f66bc1cdc3e1254ed7fa57c06d} 
std\+::ostream \& {\bfseries Catch\+::operator$<$$<$} (std\+::ostream \&os, \mbox{\hyperlink{structCatch_1_1SourceLineInfo}{Source\+Line\+Info}} const \&info)
\item 
\Hypertarget{catch__amalgamated_8cpp_a0179d453617ba2296f2baa99a49e7264}\label{catch__amalgamated_8cpp_a0179d453617ba2296f2baa99a49e7264} 
std\+::ostream \& {\bfseries Catch\+::cout} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a54c1ce08041448d684ae8edc14162cd2}\label{catch__amalgamated_8cpp_a54c1ce08041448d684ae8edc14162cd2} 
std\+::ostream \& {\bfseries Catch\+::cerr} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a1b2213f54e4d31a659db49827e81856b}\label{catch__amalgamated_8cpp_a1b2213f54e4d31a659db49827e81856b} 
std\+::ostream \& {\bfseries Catch\+::clog} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a695f62327be0676e046291eeaae15110}\label{catch__amalgamated_8cpp_a695f62327be0676e046291eeaae15110} 
bool {\bfseries Catch\+::starts\+With} (std\+::string const \&s, std\+::string const \&prefix)
\item 
\Hypertarget{catch__amalgamated_8cpp_aa77a782fac38c4f6417a7af909e8b29c}\label{catch__amalgamated_8cpp_aa77a782fac38c4f6417a7af909e8b29c} 
bool {\bfseries Catch\+::starts\+With} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} s, char prefix)
\item 
\Hypertarget{catch__amalgamated_8cpp_ada025504f627feaf9ac68ca391515dff}\label{catch__amalgamated_8cpp_ada025504f627feaf9ac68ca391515dff} 
bool {\bfseries Catch\+::ends\+With} (std\+::string const \&s, std\+::string const \&suffix)
\item 
\Hypertarget{catch__amalgamated_8cpp_afd801a3e33fd7a8b91ded0d02747a93f}\label{catch__amalgamated_8cpp_afd801a3e33fd7a8b91ded0d02747a93f} 
bool {\bfseries Catch\+::ends\+With} (std\+::string const \&s, char suffix)
\item 
\Hypertarget{catch__amalgamated_8cpp_aa52974b0e426e7e2fbd725a900e9c36e}\label{catch__amalgamated_8cpp_aa52974b0e426e7e2fbd725a900e9c36e} 
bool {\bfseries Catch\+::contains} (std\+::string const \&s, std\+::string const \&infix)
\item 
\Hypertarget{catch__amalgamated_8cpp_a0760dbe87d090a55a35414db57d272c4}\label{catch__amalgamated_8cpp_a0760dbe87d090a55a35414db57d272c4} 
void {\bfseries Catch\+::to\+Lower\+In\+Place} (std\+::string \&s)
\item 
\Hypertarget{catch__amalgamated_8cpp_ac036a17412d318598ffda8e1fe7a1177}\label{catch__amalgamated_8cpp_ac036a17412d318598ffda8e1fe7a1177} 
std\+::string {\bfseries Catch\+::to\+Lower} (std\+::string const \&s)
\item 
\Hypertarget{catch__amalgamated_8cpp_ad2b13ec5c5220e066b6fe7ba7a82db9d}\label{catch__amalgamated_8cpp_ad2b13ec5c5220e066b6fe7ba7a82db9d} 
char {\bfseries Catch\+::to\+Lower} (char c)
\item 
\Hypertarget{catch__amalgamated_8cpp_a084108b47f37d8bfd5db51c50c7451b3}\label{catch__amalgamated_8cpp_a084108b47f37d8bfd5db51c50c7451b3} 
std\+::string {\bfseries Catch\+::trim} (std\+::string const \&str)
\item 
\Hypertarget{catch__amalgamated_8cpp_a6f6d8ef0349688290bd242b50a702c28}\label{catch__amalgamated_8cpp_a6f6d8ef0349688290bd242b50a702c28} 
\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} {\bfseries Catch\+::trim} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} ref)
\item 
\Hypertarget{catch__amalgamated_8cpp_afe4e6770da547e43e9e4eeaa05f946ea}\label{catch__amalgamated_8cpp_afe4e6770da547e43e9e4eeaa05f946ea} 
bool {\bfseries Catch\+::replace\+In\+Place} (std\+::string \&str, std\+::string const \&replace\+This, std\+::string const \&with\+This)
\item 
\Hypertarget{catch__amalgamated_8cpp_a678e3c779388970bb3ec5802245f93d7}\label{catch__amalgamated_8cpp_a678e3c779388970bb3ec5802245f93d7} 
std\+::vector$<$ \mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} $>$ {\bfseries Catch\+::split\+String\+Ref} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} str, char delimiter)
\item 
\Hypertarget{catch__amalgamated_8cpp_a27d46b1ac4a1956660e4e9361c4835b8}\label{catch__amalgamated_8cpp_a27d46b1ac4a1956660e4e9361c4835b8} 
std\+::ostream \& {\bfseries Catch\+::operator$<$$<$} (std\+::ostream \&os, pluralise const \&pluraliser)
\item 
\Hypertarget{catch__amalgamated_8cpp_acabbdedb64bd66b7e0233969f6cdfb58}\label{catch__amalgamated_8cpp_acabbdedb64bd66b7e0233969f6cdfb58} 
auto {\bfseries Catch\+::operator$<$$<$} (std\+::ostream \&os, \mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} str) -\/$>$ std\+::ostream \&
\item 
\Hypertarget{catch__amalgamated_8cpp_ae053e7e198e60bf45f2b8bc51050f5f4}\label{catch__amalgamated_8cpp_ae053e7e198e60bf45f2b8bc51050f5f4} 
std\+::string {\bfseries Catch\+::operator+} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} lhs, \mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_a1c519834d917d9c6d2df64f26abcf059}\label{catch__amalgamated_8cpp_a1c519834d917d9c6d2df64f26abcf059} 
auto {\bfseries Catch\+::operator+=} (std\+::string \&lhs, \mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} rhs) -\/$>$ std\+::string \&
\item 
\Hypertarget{catch__amalgamated_8cpp_ad9dc14789e42b18c6dc26590a49a6eaa}\label{catch__amalgamated_8cpp_ad9dc14789e42b18c6dc26590a49a6eaa} 
std\+::vector$<$ \mbox{\hyperlink{classCatch_1_1TestCaseHandle}{Test\+Case\+Handle}} $>$ {\bfseries Catch\+::sort\+Tests} (\mbox{\hyperlink{classCatch_1_1IConfig}{IConfig}} const \&config, std\+::vector$<$ \mbox{\hyperlink{classCatch_1_1TestCaseHandle}{Test\+Case\+Handle}} $>$ const \&unsorted\+Test\+Cases)
\item 
\Hypertarget{catch__amalgamated_8cpp_a12f76a88f2882e9d1d221979dec0324d}\label{catch__amalgamated_8cpp_a12f76a88f2882e9d1d221979dec0324d} 
bool {\bfseries Catch\+::is\+Throw\+Safe} (\mbox{\hyperlink{classCatch_1_1TestCaseHandle}{Test\+Case\+Handle}} const \&test\+Case, \mbox{\hyperlink{classCatch_1_1IConfig}{IConfig}} const \&config)
\item 
\Hypertarget{catch__amalgamated_8cpp_af1944a358b260e03c6695aa7ae259c9a}\label{catch__amalgamated_8cpp_af1944a358b260e03c6695aa7ae259c9a} 
std\+::vector$<$ \mbox{\hyperlink{classCatch_1_1TestCaseHandle}{Test\+Case\+Handle}} $>$ {\bfseries Catch\+::filter\+Tests} (std\+::vector$<$ \mbox{\hyperlink{classCatch_1_1TestCaseHandle}{Test\+Case\+Handle}} $>$ const \&test\+Cases, Test\+Spec const \&test\+Spec, \mbox{\hyperlink{classCatch_1_1IConfig}{IConfig}} const \&config)
\item 
\Hypertarget{catch__amalgamated_8cpp_aae7d61b3abc9c8d3c82407b380e6a414}\label{catch__amalgamated_8cpp_aae7d61b3abc9c8d3c82407b380e6a414} 
std\+::vector$<$ \mbox{\hyperlink{classCatch_1_1TestCaseHandle}{Test\+Case\+Handle}} $>$ const \& {\bfseries Catch\+::get\+All\+Test\+Cases\+Sorted} (\mbox{\hyperlink{classCatch_1_1IConfig}{IConfig}} const \&config)
\item 
void \mbox{\hyperlink{catch__amalgamated_8cpp_a2236988eae84fb6bcc456bbf8ddfd2bf}{Catch\+::throw\+\_\+test\+\_\+failure\+\_\+exception}} ()
\item 
void \mbox{\hyperlink{catch__amalgamated_8cpp_a7c6db2bf035e2e570d0b6703f6f5a3d8}{Catch\+::throw\+\_\+test\+\_\+skip\+\_\+exception}} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a4036958fd61b3ba0b3d2467e7f4f6fd7}\label{catch__amalgamated_8cpp_a4036958fd61b3ba0b3d2467e7f4f6fd7} 
\mbox{\hyperlink{classCatch_1_1Detail_1_1unique__ptr}{Detail\+::unique\+\_\+ptr}}$<$ ITest\+Invoker $>$ {\bfseries Catch\+::make\+Test\+Invoker} (void(\texorpdfstring{$\ast$}{*}test\+As\+Function)())
\item 
\Hypertarget{catch__amalgamated_8cpp_a512213886b4304e4573b57fe42b66d4e}\label{catch__amalgamated_8cpp_a512213886b4304e4573b57fe42b66d4e} 
std\+::ostream \& {\bfseries Catch\+::\+Text\+Flow\+::operator$<$$<$} (std\+::ostream \&os, Column const \&col)
\item 
\Hypertarget{catch__amalgamated_8cpp_a24f631f4606e5664e764e6a6b9df5c04}\label{catch__amalgamated_8cpp_a24f631f4606e5664e764e6a6b9df5c04} 
Column {\bfseries Catch\+::\+Text\+Flow\+::\+Spacer} (size\+\_\+t space\+Width)
\item 
\Hypertarget{catch__amalgamated_8cpp_a2627582ff1b81131b3deac691e847156}\label{catch__amalgamated_8cpp_a2627582ff1b81131b3deac691e847156} 
std\+::ostream \& {\bfseries Catch\+::\+Text\+Flow\+::operator$<$$<$} (std\+::ostream \&os, Columns const \&cols)
\item 
\Hypertarget{catch__amalgamated_8cpp_a3027b08d3fce163c060fbeb52520d28a}\label{catch__amalgamated_8cpp_a3027b08d3fce163c060fbeb52520d28a} 
Columns {\bfseries Catch\+::\+Text\+Flow\+::operator+} (Column const \&lhs, Column const \&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_a3fe83f06ebecb334bd138dae8568ad29}\label{catch__amalgamated_8cpp_a3fe83f06ebecb334bd138dae8568ad29} 
Columns {\bfseries Catch\+::\+Text\+Flow\+::operator+} (Column \&\&lhs, Column \&\&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_a12526387d93de04a83f5842cefb83d92}\label{catch__amalgamated_8cpp_a12526387d93de04a83f5842cefb83d92} 
Columns \& {\bfseries Catch\+::\+Text\+Flow\+::operator+=} (Columns \&lhs, Column const \&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_ae7ff2aeae98d2bb38fd08399bb7da352}\label{catch__amalgamated_8cpp_ae7ff2aeae98d2bb38fd08399bb7da352} 
Columns \& {\bfseries Catch\+::\+Text\+Flow\+::operator+=} (Columns \&lhs, Column \&\&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_addb58348d617cfd289663fe52c185e68}\label{catch__amalgamated_8cpp_addb58348d617cfd289663fe52c185e68} 
Columns {\bfseries Catch\+::\+Text\+Flow\+::operator+} (Columns const \&lhs, Column const \&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_aa8b32803ded290301e4ec200e138c541}\label{catch__amalgamated_8cpp_aa8b32803ded290301e4ec200e138c541} 
Columns {\bfseries Catch\+::\+Text\+Flow\+::operator+} (Columns \&\&lhs, Column \&\&rhs)
\item 
\Hypertarget{catch__amalgamated_8cpp_a4b5a2b34a00e65b753185bbc6a4962be}\label{catch__amalgamated_8cpp_a4b5a2b34a00e65b753185bbc6a4962be} 
bool {\bfseries Catch\+::uncaught\+\_\+exceptions} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a64142d8bbd7638d9af0e6b6829821e86}\label{catch__amalgamated_8cpp_a64142d8bbd7638d9af0e6b6829821e86} 
std\+::ostream \& {\bfseries Catch\+::operator$<$$<$} (std\+::ostream \&os, Xml\+Encode const \&xml\+Encode)
\item 
\Hypertarget{catch__amalgamated_8cpp_ae345560f84f68d52fc5df4ac77eb4b92}\label{catch__amalgamated_8cpp_ae345560f84f68d52fc5df4ac77eb4b92} 
Is\+Empty\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Is\+Empty} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a640c1714c014191cc131b37f955f83ed}\label{catch__amalgamated_8cpp_a640c1714c014191cc131b37f955f83ed} 
Has\+Size\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Size\+Is} (std\+::size\+\_\+t sz)
\item 
\Hypertarget{catch__amalgamated_8cpp_a4c7d45a32d4ecf1d71b24b37920a5be7}\label{catch__amalgamated_8cpp_a4c7d45a32d4ecf1d71b24b37920a5be7} 
Exception\+Message\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Message} (std\+::string const \&message)
\item 
\Hypertarget{catch__amalgamated_8cpp_a88361ad809aab09ff75c87bf6cdd7fad}\label{catch__amalgamated_8cpp_a88361ad809aab09ff75c87bf6cdd7fad} 
Within\+Ulps\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+ULP} (double target, uint64\+\_\+t max\+Ulp\+Diff)
\item 
\Hypertarget{catch__amalgamated_8cpp_af0eb912b197be0f79e60fd1884e9ac29}\label{catch__amalgamated_8cpp_af0eb912b197be0f79e60fd1884e9ac29} 
Within\+Ulps\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+ULP} (float target, uint64\+\_\+t max\+Ulp\+Diff)
\item 
\Hypertarget{catch__amalgamated_8cpp_a13a915665906ab3efb39e118c649285f}\label{catch__amalgamated_8cpp_a13a915665906ab3efb39e118c649285f} 
Within\+Abs\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+Abs} (double target, double margin)
\item 
\Hypertarget{catch__amalgamated_8cpp_a78dba3ba1112c48a6376a38b48ea70e2}\label{catch__amalgamated_8cpp_a78dba3ba1112c48a6376a38b48ea70e2} 
Within\+Rel\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+Rel} (double target, double eps)
\item 
\Hypertarget{catch__amalgamated_8cpp_a01c32f9483573cfb0d703f5f34b9848d}\label{catch__amalgamated_8cpp_a01c32f9483573cfb0d703f5f34b9848d} 
Within\+Rel\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+Rel} (double target)
\item 
\Hypertarget{catch__amalgamated_8cpp_a65b303b8eb9ba612cc5c149488aa7753}\label{catch__amalgamated_8cpp_a65b303b8eb9ba612cc5c149488aa7753} 
Within\+Rel\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+Rel} (float target, float eps)
\item 
\Hypertarget{catch__amalgamated_8cpp_a735b5278dad4189adbc79098c2360b03}\label{catch__amalgamated_8cpp_a735b5278dad4189adbc79098c2360b03} 
Within\+Rel\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Within\+Rel} (float target)
\item 
\Hypertarget{catch__amalgamated_8cpp_a0d170fa146d9a4ec0d908acce010128e}\label{catch__amalgamated_8cpp_a0d170fa146d9a4ec0d908acce010128e} 
Is\+Na\+NMatcher {\bfseries Catch\+::\+Matchers\+::\+Is\+NaN} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a4f719bca42718f4936668308772732ae}\label{catch__amalgamated_8cpp_a4f719bca42718f4936668308772732ae} 
All\+True\+Matcher {\bfseries Catch\+::\+Matchers\+::\+All\+True} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a072ee44afcb1647b55b6c3437f22af44}\label{catch__amalgamated_8cpp_a072ee44afcb1647b55b6c3437f22af44} 
None\+True\+Matcher {\bfseries Catch\+::\+Matchers\+::\+None\+True} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_a99b3d0b547a4335b786e8fcea6a11cad}\label{catch__amalgamated_8cpp_a99b3d0b547a4335b786e8fcea6a11cad} 
Any\+True\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Any\+True} ()
\item 
\Hypertarget{catch__amalgamated_8cpp_ae584743abef84739c036faf46eef53b7}\label{catch__amalgamated_8cpp_ae584743abef84739c036faf46eef53b7} 
String\+Equals\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Equals} (std\+::string const \&str, Case\+Sensitive case\+Sensitivity)
\item 
\Hypertarget{catch__amalgamated_8cpp_a348b90347a2dea3747eabd01d03c114c}\label{catch__amalgamated_8cpp_a348b90347a2dea3747eabd01d03c114c} 
String\+Contains\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Contains\+Substring} (std\+::string const \&str, Case\+Sensitive case\+Sensitivity)
\item 
\Hypertarget{catch__amalgamated_8cpp_a12b1480cb0af61579e8776cf538d0069}\label{catch__amalgamated_8cpp_a12b1480cb0af61579e8776cf538d0069} 
Ends\+With\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Ends\+With} (std\+::string const \&str, Case\+Sensitive case\+Sensitivity)
\item 
\Hypertarget{catch__amalgamated_8cpp_af3c7edfbfb4cba59f76578304597e548}\label{catch__amalgamated_8cpp_af3c7edfbfb4cba59f76578304597e548} 
Starts\+With\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Starts\+With} (std\+::string const \&str, Case\+Sensitive case\+Sensitivity)
\item 
\Hypertarget{catch__amalgamated_8cpp_af4de9d3e501b83d17a048cf2107629dc}\label{catch__amalgamated_8cpp_af4de9d3e501b83d17a048cf2107629dc} 
Regex\+Matcher {\bfseries Catch\+::\+Matchers\+::\+Matches} (std\+::string const \&regex, Case\+Sensitive case\+Sensitivity)
\item 
\Hypertarget{catch__amalgamated_8cpp_a228a8fff5aa311bd0e3592b8cb711392}\label{catch__amalgamated_8cpp_a228a8fff5aa311bd0e3592b8cb711392} 
std\+::string {\bfseries Catch\+::\+Matchers\+::\+Detail\+::describe\+\_\+multi\+\_\+matcher} (\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}} combine, std\+::string const \texorpdfstring{$\ast$}{*}descriptions\+\_\+begin, std\+::string const \texorpdfstring{$\ast$}{*}descriptions\+\_\+end)
\item 
\Hypertarget{catch__amalgamated_8cpp_a4c77e898254807f1a2d7195ca324c19e}\label{catch__amalgamated_8cpp_a4c77e898254807f1a2d7195ca324c19e} 
void {\bfseries Catch\+::handle\+Exception\+Match\+Expr} (\mbox{\hyperlink{classCatch_1_1AssertionHandler}{Assertion\+Handler}} \&handler, String\+Matcher const \&matcher)
\end{DoxyCompactItemize}
\doxysubsubsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\Hypertarget{catch__amalgamated_8cpp_aad57484016654da87125db86f4227ea3}\label{catch__amalgamated_8cpp_aad57484016654da87125db86f4227ea3} 
double {\bfseries w} = -\/log( ( 1.\+0 -\/ x ) \texorpdfstring{$\ast$}{*} ( 1.\+0 + x ) )
\item 
\Hypertarget{catch__amalgamated_8cpp_ac483f6ce851c9ecd9fb835ff7551737c}\label{catch__amalgamated_8cpp_ac483f6ce851c9ecd9fb835ff7551737c} 
double {\bfseries p} = -\/2.\+7109920616438573243e-\/11
\item 
\mbox{\hyperlink{catch__amalgamated_8cpp_a0544c3fe466e421738dae463968b70ba}{else}}
\item 
\Hypertarget{catch__amalgamated_8cpp_a6abfb3eb1e8098e09b8a4d1fc295b265}\label{catch__amalgamated_8cpp_a6abfb3eb1e8098e09b8a4d1fc295b265} 
return p \texorpdfstring{$\ast$}{*} {\bfseries x}
\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
This file provides platform specific implementations of Fatal\+Condition\+Handler

This means that there is a lot of conditional compilation, and platform specific code. Currently, Catch2 supports a dummy handler (if no handler is desired), and 2 platform specific handlers\+:
\begin{DoxyItemize}
\item Windows\textquotesingle{} SEH
\item POSIX signals
\end{DoxyItemize}

Consequently, various pieces of code below are compiled if either of the platform specific handlers is enabled, or if none of them are enabled. It is assumed that both cannot be enabled at the same time, and doing so should cause a compilation error.

If another platform specific handler is added, the compile guards below will need to be updated taking these assumptions into account. 

\doxysubsection{Function Documentation}
\Hypertarget{catch__amalgamated_8cpp_ae987bd04fd59321f5183794daeffd4cf}\label{catch__amalgamated_8cpp_ae987bd04fd59321f5183794daeffd4cf} 
\index{catch\_amalgamated.cpp@{catch\_amalgamated.cpp}!parseReporterSpec@{parseReporterSpec}}
\index{parseReporterSpec@{parseReporterSpec}!catch\_amalgamated.cpp@{catch\_amalgamated.cpp}}
\doxysubsubsection{\texorpdfstring{parseReporterSpec()}{parseReporterSpec()}}
{\footnotesize\ttfamily Optional$<$ Reporter\+Spec $>$ Catch\+::parse\+Reporter\+Spec (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classCatch_1_1StringRef}{String\+Ref}}}]{reporter\+Spec }\end{DoxyParamCaption})}

Parses provided reporter spec string into

Returns empty optional on errors, e.\+g.
\begin{DoxyItemize}
\item field that is not first and not a key+value pair
\item duplicated keys in kv pair
\item unknown catch reporter option
\item empty key/value in an custom kv pair
\item ... 
\end{DoxyItemize}\Hypertarget{catch__amalgamated_8cpp_a2236988eae84fb6bcc456bbf8ddfd2bf}\label{catch__amalgamated_8cpp_a2236988eae84fb6bcc456bbf8ddfd2bf} 
\index{catch\_amalgamated.cpp@{catch\_amalgamated.cpp}!throw\_test\_failure\_exception@{throw\_test\_failure\_exception}}
\index{throw\_test\_failure\_exception@{throw\_test\_failure\_exception}!catch\_amalgamated.cpp@{catch\_amalgamated.cpp}}
\doxysubsubsection{\texorpdfstring{throw\_test\_failure\_exception()}{throw\_test\_failure\_exception()}}
{\footnotesize\ttfamily void Catch\+::throw\+\_\+test\+\_\+failure\+\_\+exception (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Outlines throwing of {\ttfamily Test\+Failure\+Exception} into a single TU

Also handles {\ttfamily CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE\+\_\+\+EXCEPTIONS} for callers. \Hypertarget{catch__amalgamated_8cpp_a7c6db2bf035e2e570d0b6703f6f5a3d8}\label{catch__amalgamated_8cpp_a7c6db2bf035e2e570d0b6703f6f5a3d8} 
\index{catch\_amalgamated.cpp@{catch\_amalgamated.cpp}!throw\_test\_skip\_exception@{throw\_test\_skip\_exception}}
\index{throw\_test\_skip\_exception@{throw\_test\_skip\_exception}!catch\_amalgamated.cpp@{catch\_amalgamated.cpp}}
\doxysubsubsection{\texorpdfstring{throw\_test\_skip\_exception()}{throw\_test\_skip\_exception()}}
{\footnotesize\ttfamily void Catch\+::throw\+\_\+test\+\_\+skip\+\_\+exception (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Outlines throwing of {\ttfamily Test\+Skip\+Exception} into a single TU

Also handles {\ttfamily CATCH\+\_\+\+CONFIG\+\_\+\+DISABLE\+\_\+\+EXCEPTIONS} for callers. 

\doxysubsection{Variable Documentation}
\Hypertarget{catch__amalgamated_8cpp_a0544c3fe466e421738dae463968b70ba}\label{catch__amalgamated_8cpp_a0544c3fe466e421738dae463968b70ba} 
\index{catch\_amalgamated.cpp@{catch\_amalgamated.cpp}!else@{else}}
\index{else@{else}!catch\_amalgamated.cpp@{catch\_amalgamated.cpp}}
\doxysubsubsection{\texorpdfstring{else}{else}}
{\footnotesize\ttfamily else}

{\bfseries Initial value\+:}
\begin{DoxyCode}{0}
\DoxyCodeLine{\{}
\DoxyCodeLine{\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ w\ =\ sqrt(\ w\ )\ -\/\ 5.000000}

\end{DoxyCode}
